<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pipipapi</title>
  
  
  <link href="https://wangyuhang-cmd.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangyuhang-cmd.github.io/"/>
  <updated>2021-08-13T08:14:55.780Z</updated>
  <id>https://wangyuhang-cmd.github.io/</id>
  
  <author>
    <name>Pipipapi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>七夕小动画</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/13/%E4%B8%83%E5%A4%95%E5%B0%8F%E5%8A%A8%E7%94%BB/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/13/%E4%B8%83%E5%A4%95%E5%B0%8F%E5%8A%A8%E7%94%BB/</id>
    <published>2021-08-13T08:08:41.000Z</published>
    <updated>2021-08-13T08:14:55.780Z</updated>
    
    <content type="html"><![CDATA[<h3 id="马上七夕就要到了是不是"><a class="markdownIt-Anchor" href="#马上七夕就要到了是不是"></a> 马上七夕就要到了，是不是</h3><p>今天浏览CSDN模仿了一个UP主码了一段小动画，当作一小段慰藉吧~</p><p><strong><img src="/2021/08/13/%E4%B8%83%E5%A4%95%E5%B0%8F%E5%8A%A8%E7%94%BB/1.jpg" class title="This is an test image"></strong></p><p>附上源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> mainloop, hideturtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_all</span>():</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    turtle.pensize(<span class="number">800</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.fd(<span class="number">300</span>)</span><br><span class="line">    turtle.bk(<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定位画笔的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_to</span>(<span class="params">x, y, state</span>):</span></span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> state <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_heart</span>(<span class="params">size</span>):</span></span><br><span class="line">    turtle.color(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.setheading(<span class="number">150</span>)</span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    turtle.fd(size)</span><br><span class="line">    turtle.circle(size * -<span class="number">3.745</span>, <span class="number">45</span>)</span><br><span class="line">    turtle.circle(size * -<span class="number">1.431</span>, <span class="number">165</span>)</span><br><span class="line">    turtle.left(<span class="number">120</span>)</span><br><span class="line">    turtle.circle(size * -<span class="number">1.431</span>, <span class="number">165</span>)</span><br><span class="line">    turtle.circle(size * -<span class="number">3.745</span>, <span class="number">45</span>)</span><br><span class="line">    turtle.fd(size)</span><br><span class="line">    turtle.end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出发射爱心的小人</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_people</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.circle(<span class="number">60</span>, <span class="number">360</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.setheading(<span class="number">90</span>)</span><br><span class="line">    turtle.fd(<span class="number">75</span>)</span><br><span class="line">    turtle.setheading(<span class="number">180</span>)</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line">    turtle.pensize(<span class="number">4</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(<span class="number">2</span>, <span class="number">360</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    turtle.pensize(<span class="number">4</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(-<span class="number">2</span>, <span class="number">360</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.fd(<span class="number">35</span>)</span><br><span class="line">    turtle.setheading(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">10</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.fd(<span class="number">35</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">10</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">135</span>)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.bk(<span class="number">60</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">45</span>)</span><br><span class="line">    turtle.fd(<span class="number">30</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">135</span>)</span><br><span class="line">    turtle.fd(<span class="number">35</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制文字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_text</span>(<span class="params">text, t_color, font_size, show_time</span>):</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">350</span>, <span class="number">0</span>)</span><br><span class="line">    turtle.color(t_color)</span><br><span class="line">    turtle.write(text, font=(<span class="string">&#x27;宋体&#x27;</span>, font_size, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    time.sleep(show_time)</span><br><span class="line">    clear_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爱心发射</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_</span>():</span></span><br><span class="line">    turtle.speed(<span class="number">0</span>)</span><br><span class="line">    draw_people(-<span class="number">250</span>, <span class="number">20</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">150</span>, -<span class="number">30</span>)</span><br><span class="line">    draw_heart(<span class="number">14</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">200</span>, -<span class="number">200</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.write(<span class="string">&#x27;Biu~&#x27;</span>, font=(<span class="string">&#x27;宋体&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">20</span>, -<span class="number">60</span>)</span><br><span class="line">    draw_heart(<span class="number">25</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">70</span>, -<span class="number">200</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.write(<span class="string">&#x27;Biu~&#x27;</span>, font=(<span class="string">&#x27;宋体&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">200</span>, -<span class="number">100</span>)</span><br><span class="line">    draw_heart(<span class="number">45</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">150</span>, -<span class="number">200</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.write(<span class="string">&#x27;Biu~&#x27;</span>, font=(<span class="string">&#x27;宋体&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 隐藏海龟</span></span><br><span class="line">    hideturtle()</span><br><span class="line">    turtle.setup(<span class="number">900</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    draw_text(<span class="string">&quot;我想给你看个东西&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;准备好了吗？&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;接下来&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;skyblue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;skyblue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;skyblue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;七夕快乐！！！&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;发射爱心！！！&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">    draw_()</span><br><span class="line">    <span class="comment"># 使用mainloop防止窗口卡死</span></span><br><span class="line">    mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>​借鉴自：<a href="https://blog.csdn.net/qq_35164554/article/details/119610642">https://blog.csdn.net/qq_35164554/article/details/119610642</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;马上七夕就要到了是不是&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#马上七夕就要到了是不是&quot;&gt;&lt;/a&gt; 马上七夕就要到了，是不是&lt;/h3&gt;
&lt;p&gt;今天浏览CSDN模仿了一个UP主码了一段小动画，当作一小段慰藉吧~&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="一些小玩意er" scheme="https://wangyuhang-cmd.github.io/categories/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%8E%A9%E6%84%8Fer/"/>
    
    
    <category term="Python" scheme="https://wangyuhang-cmd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2021-08-12T08:12:30.000Z</published>
    <updated>2021-08-13T08:45:05.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><h6 id="push-up-由子节点算父节点的信息"><a class="markdownIt-Anchor" href="#push-up-由子节点算父节点的信息"></a> push up 由子节点算父节点的信息</h6><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">sum=left.sum+right.sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span></span></p><h5 id="push-down操作-懒标记延迟标记"><a class="markdownIt-Anchor" href="#push-down操作-懒标记延迟标记"></a> push down操作 （懒标记/延迟标记）</h5><p>将父节点的修改信息下传到子节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入节点编号，用子节点信息来算父节点信息</span></span><br><span class="line">push up（<span class="keyword">int</span> u）</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将一段区间初始化为一颗线段树</span></span><br><span class="line"><span class="built_in">build</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//修改操作,修改某一个点或者某一个区间（懒标记）</span></span><br><span class="line"><span class="built_in">modify</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//查询某一段区间的信息</span></span><br><span class="line"><span class="built_in">query</span>()</span><br></pre></td></tr></table></figure><h5 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义：</h5><p>线段树是一颗满二叉树；以一棵长度为10的序列为例:</p><p><strong><img src="/2021/08/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/1.png" class title="This is an test image"></strong></p><p>对于图中的段从上到下，从左到右依次编号为1，2，3 …</p><p>因此某一段 u 的左儿子是 u&lt;&lt;1 ，右儿子是 u&lt;&lt;1|1 。</p><h5 id="线段树的结构"><a class="markdownIt-Anchor" href="#线段树的结构"></a> 线段树的结构</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般使用结构体来存储线段树,空间大小开四倍</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;  <span class="comment">//维护的区间</span></span><br><span class="line">    <span class="keyword">int</span> v;   <span class="comment">//维护的信息...</span></span><br><span class="line">&#125; tree[N*<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h5 id="线段树的建树"><a class="markdownIt-Anchor" href="#线段树的建树"></a> 线段树的建树：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">//构建节点u，其维护的是区间[l,r]</span></span><br><span class="line">    tr[u]=&#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ; <span class="comment">//已经是叶子节点</span></span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="push_up操作"><a class="markdownIt-Anchor" href="#push_up操作"></a> push_up操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push_up操作,用子节点信息来更新父节点信息,以维护最大值为例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    tree[u].v=<span class="built_in">max</span>(tree[u&lt;&lt;<span class="number">1</span>].v,tree[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询操作"><a class="markdownIt-Anchor" href="#查询操作"></a> 查询操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//query操作，用来查询某一段区间内的信息,以最大值为例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;  <span class="comment">//从u节点开始查询[l,r]区间内的某一信息</span></span><br><span class="line">    <span class="keyword">if</span>(tree[u].l&gt;=l&amp;&amp;tree[u].r&lt;=r) <span class="keyword">return</span> tree[u].v;  <span class="comment">//说明这一段的信息已经被完全包含，因此不需要继续向下递归，直接返回即可</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//否则需要判断该递归那一边</span></span><br><span class="line">    <span class="keyword">int</span> mid=tree[u].l+tree[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r));  <span class="comment">//递归左边并更新信息</span></span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));  <span class="comment">//递归右边并更新信息,切记是mid&lt;r，无等号</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改操作"><a class="markdownIt-Anchor" href="#修改操作"></a> 修改操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//modify操作，用来修改某一叶子节点并更新其所有父节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;   <span class="comment">//从u节点开始递归查找，将编号为x的节点的值修改为v</span></span><br><span class="line">    <span class="keyword">if</span>(tree[u].l==x&amp;&amp;tree[u].r==x) tree[u].v=v;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=tree[u].l+tree[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒标记延迟标记push_down操作"><a class="markdownIt-Anchor" href="#懒标记延迟标记push_down操作"></a> 懒标记（延迟标记）push_down操作</h4><ul><li>为了支持区间的修改操作，线段树添加了延迟标记。</li><li>延迟标记，即在修改的时候对修改的区间上进行标记，</li><li>在查找或者下一次修改的时候，用父区间的懒标记更新当前区间的懒标记，并更新当前区间的信息。换而言之，在修改指令的时候遇到完整区间直接更新并回溯，但在回溯前增加标记。当后续指令需要递归此节点时，根据标记跟新此节点的两个儿子节点，并将标记传给儿子节点。</li><li>懒标记的意义表面此节点曾经被修改过，但是其儿子尚未被更新</li></ul><h4 id="添加懒标记后的更新的线段树函数"><a class="markdownIt-Anchor" href="#添加懒标记后的更新的线段树函数"></a> 添加懒标记后的更新的线段树函数</h4><h5 id="push_down通过父节点来更新子节点"><a class="markdownIt-Anchor" href="#push_down通过父节点来更新子节点"></a> push_down通过父节点来更新子节点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push_down操作既可以先更新再标记，也可以先标记再更新。此处我更习惯于先更新，后标记,此处以维护区间和的信息为例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    Node &amp;root=tree[u], &amp;left=tree[u&lt;&lt;<span class="number">1</span>], &amp;right=tree[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    left.add+=root.add;  <span class="comment">//更新左儿子的懒标记</span></span><br><span class="line">    left.sum=(left.r-left.l+<span class="number">1</span>)*root.add;  <span class="comment">//更新左儿子的信息</span></span><br><span class="line">    right.add+=root.add;  <span class="comment">//更新右儿子的懒标记</span></span><br><span class="line">    right.sum=(right.r-right.l+<span class="number">1</span>)*root.add;  <span class="comment">//更新右儿子的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="query查询函数"><a class="markdownIt-Anchor" href="#query查询函数"></a> query查询函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(tree[u].l&gt;=l&amp;&amp;tree[u].r&lt;=r) <span class="keyword">return</span> tree[u].sum;</span><br><span class="line">    <span class="built_in">push_down</span>(u);  <span class="comment">//先更新一下子节点</span></span><br><span class="line">    <span class="keyword">int</span> mid=tree[u].l+tree[u].r&gt;&gt;<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);  <span class="comment">//只需要搜索左儿子</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r); <span class="comment">//只需要搜索右儿子</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> suml,sumr;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) suml+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) sum2+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">return</span> suml+sumr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="modify修改函数"><a class="markdownIt-Anchor" href="#modify修改函数"></a> modify修改函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[u].l&gt;=l&amp;&amp;tree[u].r&lt;=r) &#123;</span><br><span class="line">        tree[u].sum+=(tree[u].r-tree[u].l+<span class="number">1</span>)*d; <span class="comment">//先标记</span></span><br><span class="line">        tree[u].add+=d;     <span class="comment">//然后标记</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);  <span class="comment">//先更新子节点</span></span><br><span class="line">    <span class="keyword">int</span> mid=tree[u].l+tree[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,d); <span class="comment">//如果有在mid左边的部分，修改左儿子</span></span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d); <span class="comment">//有右儿子的部分，修改右儿子</span></span><br><span class="line">    <span class="built_in">push_up</span>(u);  <span class="comment">//更新父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="当有多个需要维护的懒标记时即有多个懒标记的时候"><a class="markdownIt-Anchor" href="#当有多个需要维护的懒标记时即有多个懒标记的时候"></a> 当有多个需要维护的懒标记时，即有多个懒标记的时候：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(Node &amp;root,<span class="keyword">int</span> add,<span class="keyword">int</span> mul)</span></span>&#123;</span><br><span class="line">    root.sum=root.sum*mul+add*(root.r-root,l+<span class="number">1</span>);</span><br><span class="line">    root.mul=root.mul*mul;</span><br><span class="line">    root.add=root.add*mul+add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用子节点来更新父节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">tree[u].sum=tree[u&lt;&lt;<span class="number">1</span>].sum+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tree[u].add=<span class="number">0</span>,tree[u].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用父节点来更新子节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cal</span>(tree[u&lt;&lt;<span class="number">1</span>],tree[u].add,tree[u].mul);</span><br><span class="line">    <span class="built_in">cal</span>(tree[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],tree[u].add,tree[u].mul);</span><br><span class="line">    <span class="comment">//恢复</span></span><br><span class="line">    root.add=<span class="number">0</span>,root.mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扫描线"><a class="markdownIt-Anchor" href="#扫描线"></a> 扫描线</h4><p>在有重复覆盖的长方形面积题型中，使用线段树维护区间扫描线：</p><p>长方形左侧为+1线，右侧为-1线，使用线段树可动态维护，修改一段区间或者获取一段区间内区间的长度</p><p>值得注意的是边界问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;  <span class="comment">//维护的是最左侧区间的左端点和最右侧区间的右端点</span></span><br><span class="line">    <span class="keyword">int</span> cnt;  <span class="comment">//维护的是各区间扫描线的覆盖次数</span></span><br><span class="line">    <span class="keyword">double</span> len; <span class="comment">//维护的是扫描线长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线段树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线段树&quot;&gt;&lt;/a&gt; 线段树&lt;/h2&gt;
&lt;h6 id=&quot;push-up-由子节点算父节点的信息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#push-up</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="线段树" scheme="https://wangyuhang-cmd.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树状数组</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/11/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/11/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</id>
    <published>2021-08-11T14:39:37.000Z</published>
    <updated>2021-08-11T14:58:06.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树状数组"><a class="markdownIt-Anchor" href="#树状数组"></a> 树状数组</h2><hr>简记<p>1.快速求前缀和 O(logn)</p><p>2.修改某一个数  O(logn)</p><p>基于二进制的想法</p><hr><p>对于一个序列 a[1]~a[n],树状数组用于维护其前缀和。支持logn复杂度求前缀和与logn复杂度修改序列中的某一个元素。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">定</mi><mi mathvariant="normal">义</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi>a</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">树</mi><mi mathvariant="normal">状</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">组</mi></mrow><annotation encoding="application/x-tex">定义tree[]表示a[]数组对应的树状数组</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mclose">]</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mclose">]</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">树</span><span class="mord cjk_fallback">状</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">组</span></span></span></span></span></p><p>设我们有一个长度为n的序列，其中:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mn>10011...</mn><msub><mo stretchy="false">)</mo><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msup><mn>2</mn><msub><mi>i</mi><mi>k</mi></msub></msup></mrow><annotation encoding="application/x-tex">n=(...10011...)_{bin}=2^{i_1}+2^{i_2}+...+2^{i_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8746639999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>我们将此序列按照二进制的思想可以分成k段（k=n二进制表示下1的个数）：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo separator="true">,</mo><mi>n</mi><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mn>1</mn></msub></msup><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mn>2</mn></msub></msup><mo>−</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>−</mo><msup><mn>2</mn><msub><mi>i</mi><mi>k</mi></msub></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">(n-2^{i_1},n] \\(n-2^{i_1}-2^{i_2},n-2^{i_1}] \\... \\(0,n-2^{i_1}-2^{i_2}-...-2^{i_k}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0691039999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9579939999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>如图，为tree[]为每一段绿色区间之和：</p><p><strong><img src="/2021/08/11/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/tree_array.jpg" class title="This is an test image"></strong></p><p>图中任意一个区间都能由之前若干个区间覆盖，而且覆盖区间的数量正好是当前区间二进制表示下1的个数，而且每次都递减最后一位1。因此我们可以借助lowbit运算来求得每一个构成的子区间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建树方式</strong>：</p><p><strong><img src="/2021/08/11/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/1.jpg" class title="This is an test image"></strong></p><h5 id="在已知数组a的情况下有三种建树方式"><a class="markdownIt-Anchor" href="#在已知数组a的情况下有三种建树方式"></a> 在已知数组a[]的情况下有三种建树方式：</h5><h5 id="1最简单的onlogn"><a class="markdownIt-Anchor" href="#1最简单的onlogn"></a> 1.最简单的O(nlogn)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> b=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">add</span>(i,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2on建树法"><a class="markdownIt-Anchor" href="#2on建树法"></a> 2.O(n)建树法：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    tree[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;i-<span class="built_in">lowbit</span>(i);j-=<span class="built_in">lowbit</span>(j))</span><br><span class="line">        tree[i]+=tree[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3回归本质建树法okn"><a class="markdownIt-Anchor" href="#3回归本质建树法okn"></a> 3.回归本质建树法O(kn)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.先预处理a[i]的前缀和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]+=a[i<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span>(itn i=<span class="number">1</span>;i&lt;=n;i++) tree[i]=a[i]-a[i=<span class="built_in">lowbit</span>(i)]</span><br></pre></td></tr></table></figure><p><strong>查询操作</strong>：</p><p><strong><img src="/2021/08/11/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/2.jpg" class title="This is an test image"></strong></p><p>以c[16]为例：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mn>16</mn><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mn>16</mn><mo stretchy="false">]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mn>15</mn><mo stretchy="false">]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mn>12</mn><mo stretchy="false">]</mo><mo>+</mo><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy="false">[</mo><mn>8</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">tree[16]=a[16]+tree[15]+tree[12]+tree[8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">6</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">5</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">8</span><span class="mclose">]</span></span></span></span></span></p><p>因此我们可以总结出查询操作的模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res+=tree[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改操作</strong></p><p><strong><img src="/2021/08/11/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/3.jpg" class title="This is an test image"></strong></p><p>我们逆向查询操作的步骤，当修改某一个数的值的时候，会逆向影响到由此数组成的所有查询路线，因此当修改一个值后，此数的所有查询路线对应的数都需要修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span>&#123; <span class="comment">//在x位置插入c</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        tree[i]+=c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="大致题型"><a class="markdownIt-Anchor" href="#大致题型"></a> 大致题型：</h5><p>适用于针对一个区间的修改或者查询操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;树状数组&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#树状数组&quot;&gt;&lt;/a&gt; 树状数组&lt;/h2&gt;
&lt;hr&gt;简记
&lt;p&gt;1.快速求前缀和 O(logn)&lt;/p&gt;
&lt;p&gt;2.修改某一个数  O(logn)&lt;/p&gt;
&lt;p&gt;基于二进制的想法&lt;/</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://wangyuhang-cmd.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>图论进阶</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/</id>
    <published>2021-08-10T07:56:50.000Z</published>
    <updated>2021-08-11T14:58:01.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图论进阶"><a class="markdownIt-Anchor" href="#图论进阶"></a> 图论进阶</h1><h3 id="差分约束"><a class="markdownIt-Anchor" href="#差分约束"></a> 差分约束</h3><p>1.可以用来求一个不等式组的可行解</p><p>2.可以求最大值或者最小值</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">方</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">形</mi><mi mathvariant="normal">如</mi><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>x</mi><mi>j</mi></msub><mo>+</mo><msub><mi>c</mi><mi>k</mi></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">方程形如x_i \lt x_j+c_k:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">如</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>&lt;</mo><msub><mi>x</mi><mn>4</mn></msub><mo>+</mo><msub><mi>c</mi><mn>3</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>&lt;</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>c</mi><mi>n</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>c</mi><mi>n</mi></msub><mi mathvariant="normal">为</mi><mi mathvariant="normal">常</mi><mi mathvariant="normal">量</mi></mrow><annotation encoding="application/x-tex">\begin{cases}        x_1 \lt x_2 +c_1\\        x_2 \lt x_3 +c_2 \\         x_3 \lt x_4 +c_3 \\        ...\\        x_n \lt x_{n+1} +c_n  \\    \end{cases}\\c_1,c_2...c_n为常量</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500199999999998em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9999899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.29999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.89999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.200010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.100019999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">常</span><span class="mord cjk_fallback">量</span></span></span></span></span></p><p>对于每一个不等式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>x</mi><mi>j</mi></msub><mo>+</mo><msub><mi>c</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">x_i \lt x_j + c_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>我们可以借助最短路模型中的三角不等式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>t</mi><mi>s</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dits[j] \lt dist[i] + w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span></p><p>j 和 i 对应两个点，之间的长度对应常数c.</p><p>因此借助此性质建图，我们只需任取超级源点（此源点出发要能遍历所有边，因此考虑超级源点）进行遍历，得到的每一个点到起点的最短路径即为对应可行解。</p><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结:</h4><p>[1]先将每一个不等式转化为从xj走到xi,长度为c的一条边</p><p>[2]找一个超级源点使得该点能够遍历到所有边</p><p>[3]从源点求一遍单源最短路</p><p>[4]对于形如xi&lt;=c的转化方式：建立一个虚拟源点，等价于</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mi>c</mi><mspace linebreak="newline"></mspace><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x_i \le x_0+c\\x_0=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><h4 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果：</h4><p>[1]如果存在负环，原不等式组一定无解</p><p>[2]如果没有负环，则 dist[i]就是原不等式组的一个解</p><h5 id="求最大可行解与最小可行解"><a class="markdownIt-Anchor" href="#求最大可行解与最小可行解"></a> 求最大可行解与最小可行解</h5><p>结论1：如果求的是最小值，则应该使用最长路(ge)</p><p>结论2：如果求的是最大值，则应该使用最短路(le)</p><p>*结论2证明：*倘若求Xi的最大值，即求出Xi的所有上界取最小值，即等于最短路径的长度,使用≤号来规范</p><p>小技巧：如果发现超时了有两种Debug技巧</p><p>1.检查数组是不是开小了</p><p>2.将SPFA中的队列改成栈</p><p>3.记住，一定是从小的向大的连边，以大于为例，a&gt;=b+c表示从b向a连一条长度为c的边（最长路）a&lt;=b+c表示从b向a连一条长度为c的边（最短路）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(Q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> t=Q.<span class="built_in">top</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t]=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];~i;i=ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j]&lt;dist[t]+w[i])&#123;</span><br><span class="line">                dist[j]=dist[t]+w[i];</span><br><span class="line">                cnt[j]=cnt[t]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[j]&gt;n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    Q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于差分约束有三种做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以求最长路为例：</span><br><span class="line">[<span class="number">1</span>]边权无限制<span class="function">SPFA<span class="title">O</span><span class="params">(km~nm)</span></span></span><br><span class="line"><span class="function">[2]边权非负Tarjan</span></span><br><span class="line"><span class="function">[3]边权为正拓扑序计算最长路</span></span><br></pre></td></tr></table></figure><hr><h3 id="最近公共祖先lca"><a class="markdownIt-Anchor" href="#最近公共祖先lca"></a> 最近公共祖先LCA</h3><p>对于一棵树：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">与</mi><mi mathvariant="normal">其</mi><mi mathvariant="normal">根</mi><mi mathvariant="normal">节</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">称</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">祖</mi><mi mathvariant="normal">先</mi></mrow><annotation encoding="application/x-tex">每个点与其根节点被称为这个点的祖先</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">与</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">根</span><span class="mord cjk_fallback">节</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">祖</span><span class="mord cjk_fallback">先</span></span></span></span></span></p><p><strong>绿色的点都是⭐的祖先</strong></p><p><strong><img src="/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/image-20210805114952904.png" class title="This is an test image"></strong></p><p>当一个点同时是另外两个点的祖先时，成为这两点的公共祖先</p><p><strong>紫色点是绿色与红色点的公共祖先</strong></p><p><strong><img src="/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/image-20210805115215096.png" class title="This is an test image"></strong></p><h4 id="求法"><a class="markdownIt-Anchor" href="#求法"></a> 求法：</h4><h5 id="1向上标记法"><a class="markdownIt-Anchor" href="#1向上标记法"></a> <strong>1.向上标记法</strong></h5><p>从某一个点向上遍历并标记。再从另外一个点开始标记，标记到的第一个已经被标记到的点便是最近公共祖先</p><h5 id="2树上倍增lca"><a class="markdownIt-Anchor" href="#2树上倍增lca"></a> <strong>2.树上倍增LCA</strong></h5><p>倍增f[i,j]表示从i开始，向上走2^j所能走到的所有节点</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mo>=</mo><mn>0</mn><mtext>       </mtext><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>i</mi><mo mathvariant="normal">′</mo></msup><mi>s</mi><mtext> </mtext><mi>f</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">j=0 \ \ \ \ \ \ \ f(i,j)=i&#x27;s \ father</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mo>≥</mo><mn>0</mn><mtext>       </mtext><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">j\ge 0 \ \ \ \ \ \ \ f(i,j)=f(f(i,j-1),j-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>:</mo><mtext>     </mtext><mi>f</mi><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mi>a</mi><mo stretchy="false">[</mo><mi>f</mi><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">function:\ \ \ \ \    fa[i][j]=fa[fa[i][j-1]][j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p><h6 id="预处理一般使用bfs"><a class="markdownIt-Anchor" href="#预处理一般使用bfs"></a> 预处理,一般使用BFS</h6><p>fa[i,j]表示从i开始，向上走2^j步所能走到的节点。0&lt;=j&lt;=logn</p><p>depth[i]表示深度</p><p>哨兵：如果从i开始跳2^j步会跳过根节点，那么fa[i,j]=0.depth[0]=0</p><h6 id="在线step"><a class="markdownIt-Anchor" href="#在线step"></a> 在线step:</h6><p>[1]先将两个点跳到同一层</p><p>[2]判断a与b之间的关系</p><p>[3]让两个点同时往上跳，一直跳到他们最近公共祖先的下一层。</p><p>跳法：从最大的二的整次幂开始跳</p><p>预处理O(nlogn)</p><p>查询O(logn)</p><p><em>板子</em>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> root)</span></span>&#123;</span><br><span class="line">    depth[<span class="number">0</span>]=<span class="number">0</span>,depth[root]=<span class="number">1</span>;  <span class="comment">//depth[0]初始化深度为0表示不合法的深度</span></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; Q;Q.<span class="built_in">push</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(Q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> t=Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];~i;i=ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(depth[j]&gt;depth[t]+<span class="number">1</span>)&#123;</span><br><span class="line">                depth[j]=depth[t]+<span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">                Q.<span class="built_in">push</span>(j);</span><br><span class="line">                fa[j][<span class="number">0</span>]=t;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">15</span>;k++)</span><br><span class="line">                    fa[j][k]=fa[fa[j][k<span class="number">-1</span>]][k<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth[a]&lt;depth[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="comment">//从后向前遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">15</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth[fa[a][i]]&gt;=depth[b]) </span><br><span class="line">            a=fa[a][i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">15</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i]!=fa[b][i])&#123;</span><br><span class="line">            a=fa[a][i],b=fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tarjan缩点离线求lca-onm"><a class="markdownIt-Anchor" href="#tarjan缩点离线求lca-onm"></a> Tarjan缩点———离线求LCA  O(n+m)</h4><p><em>对向上标记法的优化，基于DFS</em></p><p>DFS的过程中将点分成三类：</p><p><strong><img src="/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/image-20210805150806951.png" class title="This is an test image"></strong></p><p>其中，绿色部分为已经被遍历且回溯的2类点，红色为正在遍历的1号点。对于每一个1号点与2号点的组合，他们的最近公共祖先一定在1号点的父辈节点上，因此可以考虑使用并查集将2类点压缩到1类点的路径上。</p><p>如果求2区域内的点与x的最近公共祖先，可以将绿颜色部分（已经遍历且回溯过的点）合并到1区域的根节点上（使用并查集维护）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tarjan缩点step:</span><br><span class="line">[<span class="number">1</span>]预处理步骤，存储所有询问，保存数组中时应该保存并双向，dfs出所有的点距</span><br><span class="line">tarjan:</span><br><span class="line">[<span class="number">2</span>]类似于深度搜索，标记当前点为第<span class="number">1</span>类点（如上图红）</span><br><span class="line">    遍历所有以当前点为根节点的点，如果未被标记则搜索，然后并查集合并</span><br><span class="line">[<span class="number">3</span>]对于与当前点有关的询问，如果另外一个点被标记为图上绿（已遍历且回溯）</span><br><span class="line">    则计算出距离并记录答案。</span><br><span class="line">    [<span class="number">4</span>]当前点已经被遍历且回溯，应当标记为第二类点</span><br></pre></td></tr></table></figure><p>附上板子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span>&#123; <span class="comment">//算出每个点到根节点的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==father) <span class="keyword">continue</span>;</span><br><span class="line">        dist[j]=dist[u]+w[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            fa[j]=u;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> ver=query[u][i].x,id=query[u][i].y;</span><br><span class="line">        <span class="keyword">if</span>(st[ver]==<span class="number">2</span>)&#123; <span class="comment">//如果已经被划分到了左边被遍历过的子树中</span></span><br><span class="line">            <span class="keyword">int</span> root=<span class="built_in">find</span>(ver);</span><br><span class="line">            res[id]=dist[u]+dist[ver]<span class="number">-2</span>*dist[root];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rmqdfs序"><a class="markdownIt-Anchor" href="#rmqdfs序"></a> RMQ+DFS序</h5><p><strong><img src="/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/image-20210805171657805.png" class title="This is an test image"></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]深度优先搜索出这一颗树的dfs序（根节点出现多次）</span><br><span class="line">[<span class="number">2</span>]求节点x和节点y之间的最近公共祖先，</span><br><span class="line">   即在dfs序中任意x,y之间找最小值</span><br><span class="line">[<span class="number">3</span>]找区间最小值可以使用RMQ算法</span><br></pre></td></tr></table></figure><h4 id="树上差分"><a class="markdownIt-Anchor" href="#树上差分"></a> 树上差分：</h4><p>最近公共祖先减少2，两个节点各增加1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnt[root]-=<span class="number">2</span>;</span><br><span class="line">cnt[a]++;</span><br><span class="line">cnt[b]++;</span><br></pre></td></tr></table></figure><hr><h3 id="有向图的强连通分量scc"><a class="markdownIt-Anchor" href="#有向图的强连通分量scc"></a> 有向图的强连通分量SCC</h3><ul><li>关于图上的传递性</li></ul><p><em><strong>定义：对于一个有向图，连通分量中的任意两点u，v；必有可以从u走到v，也可以从v走到u</strong></em></p><p>强连通分量：极大连通分量，即不能再增加点使得其仍然是一个连通分量</p><p>作用：将一个有向图缩点成有向无环图(DAG)</p><p><strong><img src="/2021/08/10/%E5%9B%BE%E8%AE%BA%E8%BF%9B%E9%98%B6/image-20210806112911233.png" class title="This is an test image"></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将点分为<span class="number">4</span>类：</span><br><span class="line">    [<span class="number">1</span>]树枝边  (x,y)</span><br><span class="line">    [<span class="number">2</span>]前向边  (a,b)</span><br><span class="line">    [<span class="number">3</span>]后向边  (m,n)</span><br><span class="line">    [<span class="number">4</span>]横叉边  (b,y)</span><br></pre></td></tr></table></figure><p>问题：某一点是否在强连通分量中？</p><ul><li>情况1：存在后向边指向祖先节点</li><li>情况2：先到横叉边，横叉边再通过后向边走到祖宗节点</li></ul><p>step：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Tarjan算法求强连通分量(SCC)</span><br><span class="line">对每个点定义两个时间戳</span><br><span class="line">[<span class="number">1</span>]dfn[u]表示遍历到u的时间戳</span><br><span class="line">[<span class="number">2</span>]low[u]表示从u开始走所能遍历到的最小的时间戳</span><br><span class="line">[<span class="number">3</span>]u是其所在的强连通分量的最高点，等价于dfn[u]=low[u]</span><br></pre></td></tr></table></figure><p>Tarjan_scc模板  O(n+m)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">    dfs[u]=low[u]=++timestamp;</span><br><span class="line">    stk[++top]=u,in_stk[u]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[j]);    <span class="comment">//u能到j，j能到的最小值u也一定能到</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in_stk[j])&#123;     <span class="comment">//栈中存储的所有点都不是其所在的强连通分量的最高点</span></span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],dfn[j]);     <span class="comment">//此时的j要么是祖先，要么是横叉点</span></span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">if</span>(dfn[u]==low[u])&#123;   <span class="comment">//找到了强连通分量的最高点</span></span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">        scc_cnt++;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">           y=stk[top--];</span><br><span class="line">            in_stk[y]=<span class="literal">false</span>;</span><br><span class="line">            id[y]=scc_cnt;                                </span><br><span class="line">        &#125; <span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着需要做缩点操作，用来建新图（DAG）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> dot=<span class="number">1</span>;dot&lt;=n;dot++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[dot];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(id[i]!=id[j])  <span class="comment">//如果i和j不在一个强连通分量中</span></span><br><span class="line">            <span class="built_in">add</span>(id[i],id[j]); <span class="comment">//在两个强连通分量之间加一条边(建图）</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>连通分量在缩完点之后就已经是满足拓扑序了，因此可以不用再写拓扑排序</p><p>性质：1）将一个有向图转化为强连通分量所需要加的边的最小个数为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mrow><mi mathvariant="normal">出</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">为</mi><mn>0</mn></mrow></msub><mo separator="true">,</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mrow><mi mathvariant="normal">入</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">为</mi><mn>0</mn></mrow></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">min\{cnt_{出度为0},cnt_{入度为0}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">{</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">出</span><span class="mord cjk_fallback mtight">度</span><span class="mord cjk_fallback mtight">为</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">入</span><span class="mord cjk_fallback mtight">度</span><span class="mord cjk_fallback mtight">为</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></span></p><hr> <h3 id="无向图的双连通分量无向图"><a class="markdownIt-Anchor" href="#无向图的双连通分量无向图"></a> 无向图的双连通分量（无向图）</h3><p>无向图有两种双连通分量</p><ul><li>第一种是边的双连通分量</li><li>第二种是点的双连通分量</li></ul><h4 id="e-dcc-边的双连通分量"><a class="markdownIt-Anchor" href="#e-dcc-边的双连通分量"></a> e-DCC 边的双连通分量</h4><p>桥：是一个无向边。对于一个无向连通图，如果删除某一条边便会变得不连通，那么称这条边为桥</p><p><em><strong>定义：极大的，不含有桥的连通区域被称为边的双连通分量</strong></em></p><p>性质：[1]删去任意一条边仍然是连通图</p><p>​   [2]任意两点之间一定包含两条不相交的路径</p><p>​   [3]将一个无向图转化为边的双连通分量最小需要加的边的个数是</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mfrac><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">]</mo><mtext>  </mtext><mi mathvariant="normal">其</mi><mi mathvariant="normal">中</mi><mi>c</mi><mi>n</mi><mi>t</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">为</mi><mn>1</mn><mi mathvariant="normal">的</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">数</mi></mrow><annotation encoding="application/x-tex">[\frac{cnt+1}{2}] \ \ 其中cnt表示度为1的点的个数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span></span></span></span></span></p><p>无向图中存在类似于有向图中的三种边：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]树枝边  (x,y)</span><br><span class="line">[<span class="number">2</span>]前向边  (a,b)</span><br><span class="line">[<span class="number">3</span>]后向边  (m,n)</span><br></pre></td></tr></table></figure><p>方法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]类似于SCC，首先引入时间戳预处理出：</span><br><span class="line">    dfn[x]:遍历到x节点的时间戳</span><br><span class="line">    low[x]:x所能遍历到的最小的时间戳</span><br><span class="line">[<span class="number">2</span>]找到桥&lt;=&gt;找到dfn[x]&lt;low[y]  <span class="comment">//y在x下方，y无论如何也走不到x</span></span><br><span class="line">[<span class="number">3</span>]找到所有边的连通分量有两种方法：</span><br><span class="line">    <span class="number">1</span>)将所有桥删除掉，剩下的每一个连通块都是一个连通分量</span><br><span class="line">    <span class="number">2</span>)类似于有向图，借助stack来判断dfn[x]==low[x]</span><br></pre></td></tr></table></figure><p>step：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> from)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line">    stk[++top]=u;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j,i);  <span class="comment">//from是反向边，此处为i</span></span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(dfn[u]&lt;low[j])&#123;   <span class="comment">//如果满足桥的性质</span></span><br><span class="line">                is_bridge[i]=is_bridge[i^<span class="number">1</span>]=<span class="literal">true</span>;  <span class="comment">//加边的时候是一偶一奇加的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i!=(from^<span class="number">1</span>))  <span class="comment">//如果不是反向边</span></span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])&#123;  <span class="comment">//找到了一个dcc</span></span><br><span class="line">        dcc_cnt++;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stk[top--];</span><br><span class="line">            id[y]=dcc_cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="v-dcc点的双连通分量"><a class="markdownIt-Anchor" href="#v-dcc点的双连通分量"></a> v-DCC点的双连通分量</h4><p>割点：在一个无向图中如果删去某一个点使得整个图变得不连通，则称此点为此无向图的割点</p><p><em><strong>定义：极大的，不包含个点的连通块被称为点的双连通分量</strong></em></p><p>性质：每一个割点至少属于两个连通分量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">求割点：</span><br><span class="line">    [<span class="number">1</span>]满足low[y]&gt;=dfn[x]后需要分类讨论</span><br><span class="line">    [<span class="number">2</span>]如果x不是根节点，那么x是割点</span><br><span class="line">    [<span class="number">3</span>]如果x是根节点，则其至少有两个子节点yi都满足low[yi]&gt;=dfn[x],此时x才能算割点</span><br></pre></td></tr></table></figure><p>求点的双连通分量思路：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]记录时间戳，当前点入栈</span><br><span class="line">[<span class="number">2</span>]特判,如果是孤立点就单独记录进对应连通块的数组</span><br><span class="line">[<span class="number">3</span>]遍历所有邻边，并更新。如果没有更新过</span><br><span class="line">    当找到了dfn[x]&lt;=dfn[y]之后要对其讨论是否是割点:</span><br><span class="line">        <span class="keyword">if</span>(dfn[x]&lt;=low[y])&#123;</span><br><span class="line">            cnt++;<span class="comment">//对于记录当前有多少个分支+1  </span></span><br><span class="line">            <span class="keyword">if</span>(x!=root||cnt&gt;<span class="number">1</span>) x是割点</span><br><span class="line">            将栈中元素弹出直至弹出y为止</span><br><span class="line">            将x也放入当前双连通分量中</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二分图"><a class="markdownIt-Anchor" href="#二分图"></a> 二分图</h2><hr><h3 id="二分图算法"><a class="markdownIt-Anchor" href="#二分图算法"></a> 二分图算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">二分图&#123;<span class="comment">//一个图是二分图当且仅当图中不含奇数环</span></span><br><span class="line"><span class="number">1.</span>染色法&#123; <span class="built_in">O</span>(n+m)</span><br><span class="line"><span class="number">1.</span>建邻接表</span><br><span class="line"><span class="number">2.f</span><span class="keyword">or</span>(<span class="number">1</span>~n)</span><br><span class="line"><span class="keyword">if</span>(i未染色）</span><br><span class="line"><span class="built_in">dfs</span>(i)</span><br><span class="line">需要标记每个点是否被染色</span><br><span class="line">&#125;</span><br><span class="line">关键的<span class="keyword">bool</span> dfs:</span><br><span class="line"><span class="number">1.</span>标记颜色</span><br><span class="line"><span class="number">2.</span>遍历此点所有连接的点，如果没有被染色，则染色并dfs,若返回<span class="literal">false</span> 则返回<span class="literal">false</span>（这里的迭代十分关键，看代码）</span><br><span class="line"><span class="number">3.</span>否则如果染过颜色，则判断颜色是都矛盾</span><br><span class="line"><span class="number">4.</span>都没问题返回<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    color[x]=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!color[j])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(j,<span class="number">3</span>-k)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(color[j]==k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之后的main函数内：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!color[i])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">dfs</span>(i,<span class="number">1</span>))&#123;</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="匈牙利算法"><a class="markdownIt-Anchor" href="#匈牙利算法"></a> 匈牙利算法</h3><h5 id="在使用匈牙利算法之前一定要证明是二分图即可以二染色"><a class="markdownIt-Anchor" href="#在使用匈牙利算法之前一定要证明是二分图即可以二染色"></a> 在使用匈牙利算法之前一定要证明是二分图，即可以二染色！</h5><pre><code>遍历二分图要找的点每一个对应点如果此点不在配对成功的集合中&#123;将此点加入配对成功的集合如果此映射点没有被配对或者将其配对的点有其他可配对的点，则返回配对成功(对应函数外侧更新答案)&#125;</code></pre><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[x];i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">            st[j]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(match[j]==<span class="number">0</span>||<span class="built_in">find</span>(match[j]))&#123;</span><br><span class="line">                match[j]=x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1二分图不存在奇数换染色法不存在矛盾问题"><a class="markdownIt-Anchor" href="#1二分图不存在奇数换染色法不存在矛盾问题"></a> 1.二分图不存在奇数换，染色法不存在矛盾问题</h4><h4 id="2匈牙利算法匹配最大匹配匹配点增广路经"><a class="markdownIt-Anchor" href="#2匈牙利算法匹配最大匹配匹配点增广路经"></a> 2.匈牙利算法，匹配，最大匹配，匹配点，增广路经</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">匹配：即没有公共点的边</span><br><span class="line">最大匹配：边数最多的匹配</span><br><span class="line">匹配点：在匹配中的点</span><br><span class="line">增广路径：从一个非匹配点走，依次走非匹配边与匹配边，直到通过非匹配边走到一个非匹配点</span><br></pre></td></tr></table></figure><p>结论：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">匹</mi><mi mathvariant="normal">配</mi><mo>∼</mo><mi mathvariant="normal">不</mi><mi mathvariant="normal">存</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">增</mi><mi mathvariant="normal">广</mi><mi mathvariant="normal">路</mi><mi mathvariant="normal">径</mi></mrow><annotation encoding="application/x-tex">最大匹配 \sim 不存在增广路径</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">匹</span><span class="mord cjk_fallback">配</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">存</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">增</span><span class="mord cjk_fallback">广</span><span class="mord cjk_fallback">路</span><span class="mord cjk_fallback">径</span></span></span></span></span></p><h4 id="3最小点覆盖最大独立集最小路径点覆盖最小路径重复点覆盖"><a class="markdownIt-Anchor" href="#3最小点覆盖最大独立集最小路径点覆盖最小路径重复点覆盖"></a> 3.最小点覆盖，最大独立集，最小路径点覆盖，最小路径重复点覆盖</h4><p><em><strong>最大匹配数=最小点覆盖=总点数-最大独立集=总点数-最小路径覆盖</strong></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最小点覆盖:从一个图中选出最少的点使得使得每一条边至少有一个端点被选出来</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">证明:最小点覆盖数=最大匹配数      </span><br><span class="line">[<span class="number">1</span>]最小点覆盖数&gt;=最大匹配数：</span><br><span class="line">每一条边都选出一个点即可</span><br><span class="line">[<span class="number">2</span>]最小覆盖数与最大匹配数之间可取等号：</span><br><span class="line">将一个图分成两半，构造：</span><br><span class="line">从左边每个非匹配点做一遍匈牙利算法，并标记所有经过的点。最终选出左边未被标记的点和右边被标记的点</span><br><span class="line"></span><br><span class="line">上述构造满足三个性质：</span><br><span class="line">    <span class="number">1</span>)左边所有未被标记的点都是匹配点</span><br><span class="line">    <span class="number">2</span>)右边所有被标记的点都是匹配点</span><br><span class="line">    <span class="number">3</span>)对于匹配边，要么左右全被标记，要么全不被标记</span><br><span class="line"></span><br><span class="line">因此选出来的点恰好可以满足最小覆盖，因为每个匹配边有且只有一个点被选</span><br></pre></td></tr></table></figure><ul><li><p><em>最大独立集：从一个图中选出最多的点使得选出的点之间无边&lt;=&gt;去掉最少的点将所有边都破坏掉</em></p></li><li><p><em>最大团：选出最大的点使得任意两点之间都有边</em></p></li></ul><ul><li><em>最小路径点覆盖：在DAG中用最少的互不相交的路径（从起点连连连到终点）将所有点覆盖</em>，拆点将每个点分成出点和入点，使得原图变成一个二分图</li><li><em>最小路径重复点覆盖</em>:<ul><li>[1]求传递闭包(如果一个点间接连向另外一个点的话就直接加一条边)得到G’</li><li>[2]在G’上求最小路径覆盖</li></ul></li></ul><h4 id="4最优匹配-km算法最小费用流"><a class="markdownIt-Anchor" href="#4最优匹配-km算法最小费用流"></a> 4.最优匹配 KM算法/最小费用流</h4><h4 id="5多重匹配多夫多妻最大流"><a class="markdownIt-Anchor" href="#5多重匹配多夫多妻最大流"></a> 5.多重匹配（多夫多妻）最大流</h4><hr><h2 id="欧拉路径与欧拉回路问题"><a class="markdownIt-Anchor" href="#欧拉路径与欧拉回路问题"></a> 欧拉路径与欧拉回路问题</h2><p>大前提所有点都是连通的</p><h5 id="欧拉路径"><a class="markdownIt-Anchor" href="#欧拉路径"></a> 欧拉路径：</h5><ul><li>是否存在一条路径每个边之走一遍</li></ul><p>对于无向图：</p><ul><li>欧拉路径（一笔画）问题的解决方案：所有奇数路径的点（奇点）的个数只能是0或者2个。如果是2个只能位于起点或者终点</li></ul><p>对于有向图：</p><ul><li>欧拉路径<ul><li>[1]所有点的入度等于出度</li><li>[2]除了起点和终点之外的所有点的出度等于入度。起点的出度比入度多1，终点的入度比出度多1</li></ul></li></ul><h5 id="欧拉回路"><a class="markdownIt-Anchor" href="#欧拉回路"></a> 欧拉回路：</h5><ul><li>是否存在一个环路，每个边恰好走一次之后又回到原来的地方</li></ul><p>对于无向图</p><ul><li><em><strong>欧拉回路的度数为奇数的点只能由0个</strong></em></li></ul><p>对于有向图</p><ul><li>所有的点出度等于入度</li></ul><p>算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dfs</span>(<span class="keyword">int</span> u)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j])</span><br><span class="line">        <span class="built_in">dfs</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    queue.<span class="built_in">push</span>(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是有向图，则使用之后删去此边</p><p>如果是无向图，经过一条边之后应该标记反向边，标记方法&amp;1（因为加入的时候是01，23…加入的）</p><p>板子：(优化)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=h[u];~i;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i])&#123;   <span class="comment">//如果已经标记过来就直接删除</span></span><br><span class="line">            i=ne[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        st[i]=<span class="literal">true</span>;  <span class="comment">//标记当前边</span></span><br><span class="line">        <span class="keyword">if</span>(T==<span class="number">1</span>) st[i^<span class="number">1</span>]=<span class="literal">true</span>;  <span class="comment">//如果是无向图就加双向边</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="comment">//先算出要加的边</span></span><br><span class="line">        <span class="keyword">if</span>(T==<span class="number">1</span>)&#123;</span><br><span class="line">            t=i/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>) t=-t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> t=i+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//先把当前边删除再遍历，这样能保证每个边只被遍历依次</span></span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        i=ne[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        Q.<span class="built_in">push</span>(t);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~h[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = h[u];</span><br><span class="line">        <span class="keyword">if</span>(used[i]) &#123;</span><br><span class="line">            h[u] = ne[i];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h[u] = ne[i];</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>) used[i ^ <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(e[i]);</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = i / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; <span class="number">1</span>) t *= <span class="number">-1</span>;</span><br><span class="line">            ans[ ++ cnt] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ans[ ++ cnt] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图论进阶&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#图论进阶&quot;&gt;&lt;/a&gt; 图论进阶&lt;/h1&gt;
&lt;h3 id=&quot;差分约束&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#差分约束&quot;&gt;&lt;/a&gt; 差分约束&lt;/h3</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/10/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/10/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2021-08-10T07:53:16.000Z</published>
    <updated>2021-08-11T14:57:50.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h1><h6 id="最小生成树理论基础"><a class="markdownIt-Anchor" href="#最小生成树理论基础"></a> 最小生成树理论基础：</h6><p>1.任意一颗最小生成树一定<strong>可以</strong>包含无向图中权值最小的边</p><p>2.给定一张无向图G=(V, E)，n=|M|, m=|E|。从E中选出k &lt; n- 1条边构成G的一个生成森林。若再从剩余的m-k条边中选n- 1 - k条边添加到生成森林中，使其成为G的生成树，并且选出的边的权值之和最小。则该生成树一定可以包含m - k条边中连接生成森林的两个不连通节点的权值最小的边。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">最小生成树&#123;</span><br><span class="line">Prim algorithm&#123;</span><br><span class="line"><span class="number">1.</span>朴素版<span class="function">Prim <span class="title">O</span><span class="params">(O^<span class="number">2</span>)</span> 稠密图</span>&#123;</span><br><span class="line">将所有点初始化为正无穷</span><br><span class="line">迭代n次</span><br><span class="line">找到集合外最近的点</span><br><span class="line">判断这个点是不是连通的</span><br><span class="line">如果不是第一条边就进行累加</span><br><span class="line">用这个点更新集合外的点到集合的距离(不更新累加距离，只更新最短距离)</span><br><span class="line">标记这个集合并加入集合</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>堆优化<span class="function">Prim <span class="title">O</span><span class="params">(mlogn)</span> 稀疏图</span>&#123;<span class="comment">//一般不用，用克鲁斯卡尔代替</span></span><br><span class="line">这里就先不写了...</span><br><span class="line">&#125;</span><br><span class="line">&#125;Kruskal algorithm&#123; <span class="built_in">O</span>(mlogm) 稀疏图</span><br><span class="line"><span class="number">1.</span>将所有边按权重从小到大排序 <span class="built_in">O</span>(mlogm)</span><br><span class="line"><span class="number">2.</span>初始化并查集</span><br><span class="line"><span class="number">3.</span>从小到大枚举每条边(a-b权重c),若a,b不连通，将a,b加入集合中</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">二分图&#123;<span class="comment">//一个图是二分图当且仅当图中不含奇数环</span></span><br><span class="line"><span class="number">1.</span>染色法&#123; <span class="built_in">O</span>(n+m)</span><br><span class="line"><span class="number">1.</span>建邻接表</span><br><span class="line"><span class="number">2.f</span><span class="keyword">or</span>(<span class="number">1</span>~n)</span><br><span class="line"><span class="keyword">if</span>(i未染色）</span><br><span class="line"><span class="built_in">dfs</span>(i)</span><br><span class="line">需要标记每个点是否被染色</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span>匈牙利算法&#123; <span class="built_in">O</span>(nm),实际运行时间远小于<span class="built_in">O</span>(nm)</span><br><span class="line">最快时间内得出二分图成功匹配的最大的数量（成功匹配：没有两条边共用一个点）</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">最大流算法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树-2"><a class="markdownIt-Anchor" href="#最小生成树-2"></a> 最小生成树</h2><h4 id="prim-algorithm"><a class="markdownIt-Anchor" href="#prim-algorithm"></a> Prim algorithm</h4><p>prim算法是从一个点开始扩展，逐渐得到一棵树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 510</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> g[MAXN][MAXN],dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> st[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//n次迭代</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dis[t]&gt;dis[j]))</span><br><span class="line">                t=j;</span><br><span class="line">               </span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>&amp;&amp;dis[t]==INF) <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>) res+=dis[t];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) </span><br><span class="line">            dis[j]=<span class="built_in">min</span>(dis[j],g[t][j]);</span><br><span class="line">            </span><br><span class="line">        st[t]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kruskal算法"><a class="markdownIt-Anchor" href="#kruskal算法"></a> Kruskal算法</h4><p>结合了并查集的思想，将所有边排序后开始选择，在图中主键连通的过程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Kruskal algorithm&#123; <span class="built_in">O</span>(mlogm) 稀疏图</span><br><span class="line"><span class="number">1.</span>将所有边按权重从小到大排序 <span class="built_in">O</span>(mlogm)</span><br><span class="line"><span class="number">2.</span>初始化并查集</span><br><span class="line"><span class="number">3.</span>从小到大枚举每条边(a-b权重c),若a,b不连通，将a,b加入集合中</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edges W) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> w&lt;W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; edges[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==fa[x]?fa[x]:fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;edges[i].a,&amp;edges[i].b,&amp;edges[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edges+<span class="number">1</span>,edges+<span class="number">1</span>+m); <span class="comment">//第一步排序</span></span><br><span class="line">    <span class="comment">//初始化并查集</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a=edges[i].a,b=edges[i].b,w=edges[i].w;</span><br><span class="line">        </span><br><span class="line">        a=<span class="built_in">find</span>(a),b=<span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">            res+=w;</span><br><span class="line">            cnt++;</span><br><span class="line">            fa[a]=b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最小生成树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#最小生成树&quot;&gt;&lt;/a&gt; 最小生成树&lt;/h1&gt;
&lt;h6 id=&quot;最小生成树理论基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#最小生成树理论基础&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>图论题技巧整理</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/08/%E5%9B%BE%E8%AE%BA%E9%A2%98%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/08/%E5%9B%BE%E8%AE%BA%E9%A2%98%E6%8A%80%E5%B7%A7%E6%95%B4%E7%90%86/</id>
    <published>2021-08-08T11:38:08.000Z</published>
    <updated>2021-08-11T14:57:55.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图论题技巧整理"><a class="markdownIt-Anchor" href="#图论题技巧整理"></a> 图论题技巧整理</h2><h5 id="最短路径模型"><a class="markdownIt-Anchor" href="#最短路径模型"></a> 最短路径模型</h5><p>1.建立虚拟源点</p><ul><li>虚拟远点的建立可以将点权转化为边权</li><li>对于多个起点，一个终点的情况，也可以建立虚拟源点。从源点向每个起点出发连接一条长度为0的边。这样就可以转化为从虚拟源点出发，能到达中点的最短路径</li></ul><p>2.记录路径（将dist[] 数组开至二维）</p><ul><li>对于按照某一顺序访问多个节点的题目可以先遍历记录路径，再使用DFS()根据全排列求解</li></ul><p>3.将边权进行0，1转换</p><ul><li>对于求第k+1大的路径或者求最大的路径使得某某条件最小时，可以配合二分，将所有边权分类为1和0来进行求解(分类)</li></ul><p>4.对于不同连通块，内部只有正权边，外部由负权边构成的图</p><ul><li>按照拓扑序做堆优化的Dijkstra算法。由于按照拓扑序列，因此保证了到每一点的距离都为最小</li></ul><p>5.考虑建立反向边</p><ul><li>当起点有多个而只有一个确定的终点时，应当考虑建立反向边</li></ul><p>6.正反各进行遍历</p><ul><li>对于在途中买卖一次商品的题目，考虑正反都进行遍历，然后最后使用DP的思想来划分集合，然后求解</li></ul><p>7.拆点</p><p>将dist数组扩展至二维，来存储点的不同性质（类似于DP）。例如寻找最短路径和次短路径的时候可以选择拆点</p><p>8.有负权边，求在最短路径条数：</p><ul><li><p>先使用SPFA求出所有最短路径，枚举所有t-&gt;j的边w[i]，判断每个边是否满足:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>t</mi><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dist[j]==dist[t]+w[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span></p></li><li></li></ul><p>9.求最短路径条数：</p><ul><li>使用Dijkstra算法或者BFS能够保证拓扑序。在更新最短距离的时候顺便记录一下条数即可</li></ul><p>10.恰好经过k条路的最短路径</p><ul><li>1.快速幂+类Floyd算法</li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">[</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">[</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mo stretchy="false">[</mo><mi>b</mi><mo separator="true">,</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d[a+b,i,j]=min(d[a+b,i,j],d[a,i,k]+d[b,k,j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><ul><li>2.bellman_ford算法</li></ul><h5 id="最小生成树模型"><a class="markdownIt-Anchor" href="#最小生成树模型"></a> 最小生成树模型</h5><p>1.建立超级源点</p><p>便于将点权转化为边权</p><p>2.次小生成树</p><p>定义：给一个带权图，把图中所有生成树按权值从小到大排序，第二小的成为次小生成树</p><ul><li>有两种定义方式，一种是按照排列定义的第二小，因此可能数值与最小生成树一样。第二种是严格次小生成树，即严格小于最小生成树</li></ul><p><strong>方法1</strong>：先求最小生成树，再枚举删除最小生成树的边求解,时间复杂度为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo>+</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogm+nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p><p>劣势：不容易求严格最小生成树</p><p><em>证明</em> 设T为图G的一颗生成树，对于非树边a和非树边b，插入边a，并删除边b的操作记为(+a,-b)</p><p>如果T+a-b之后仍然是一颗生成树，称(+a,-b)是T的一个可行交换</p><p>称由T进行依次可行变换所得到的新的生成树集合为T的邻集，次小生成树一定在最小生成树的邻集当中。</p><p><strong>方法2</strong>：先求最小生成树，然后依次枚举非树边，然后将改边加入树中，同时从树中去掉一条边，使得最终的图仍是一棵树</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m+n^2+mlogm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p><p>可用树上倍增LCA优化至</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Q(m+mlogn+mlogm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></span></p><h5 id="基于spfa求负环"><a class="markdownIt-Anchor" href="#基于spfa求负环"></a> 基于SPFA求负环</h5><p>1.统计每个点入队的次数，如果某个点入队n次说明存在负环</p><p>2.统计每个点的最短路中所包含的边数，如果某个点的最短路所包含的边数大于等于n，则也说明存在负环</p><p>但是由于SPFA判断负环的时间复杂度比较高，约O(nm)，因此有一种较为取巧的方式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">当</mi><mi mathvariant="normal">所</mi><mi mathvariant="normal">有</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">更</mi><mi mathvariant="normal">新</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">迭</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">超</mi><mi mathvariant="normal">过</mi><mn>2</mn><mi>n</mi><mo stretchy="false">(</mo><mi mathvariant="normal">尽</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">开</mi><mi mathvariant="normal">大</mi><mo stretchy="false">)</mo><mi mathvariant="normal">时</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">就</mi><mi mathvariant="normal">认</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">概</mi><mi mathvariant="normal">率</mi><mi mathvariant="normal">图</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">有</mi><mi mathvariant="normal">负</mi><mi mathvariant="normal">环</mi></mrow><annotation encoding="application/x-tex">当所有点的被更新的迭代次数超过2n(尽量开大)时，我们就认为大概率图中有负环</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">更</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">迭</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">超</span><span class="mord cjk_fallback">过</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord cjk_fallback">尽</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">大</span><span class="mclose">)</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">认</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">概</span><span class="mord cjk_fallback">率</span><span class="mord cjk_fallback">图</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">负</span><span class="mord cjk_fallback">环</span></span></span></span></span></p><h5 id="01分数规划"><a class="markdownIt-Anchor" href="#01分数规划"></a> 01分数规划</h5><p>图论问题形如求</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">Σ</mi><msub><mi>f</mi><mi>i</mi></msub></mrow><mrow><mi mathvariant="normal">Σ</mi><msub><mi>t</mi><mi>i</mi></msub></mrow></mfrac><mi mathvariant="normal">的</mi><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">值</mi></mrow><annotation encoding="application/x-tex">\frac{\Sigma{f_i}}{\Sigma{t_i}}的最大值</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Σ</span><span class="mord"><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Σ</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">值</span></span></span></span></span></p><p>为01分数规划，一般思路：<strong>二分</strong>比值,然后判断图中是否存在正环</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图论题技巧整理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#图论题技巧整理&quot;&gt;&lt;/a&gt; 图论题技巧整理&lt;/h2&gt;
&lt;h5 id=&quot;最短路径模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#最短路径模型&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/01/test-my-site/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/01/test-my-site/</id>
    <published>2021-08-01T06:00:33.000Z</published>
    <updated>2021-08-13T08:53:09.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客简述"><a class="markdownIt-Anchor" href="#博客简述"></a> 博客简述</h2><p>我是一位NUIST CS专业的大二学生。</p><p>我搭建博客的初衷是为了分享知识，同时我也是费曼学习法热衷的拥蹙.</p><p>本博客将分享一切我感兴趣的，学习的知识，遍及各类编程语言基础，进阶…，基础数据结构与算法，网络编程，开发框架，数据科学，机器学习，产品营销等等</p><p>由于之前用的笔记软件发现不是很赞，所以有很多前期的笔记还未整理好，目前部分分类只放了一两篇文章，请见谅。后期我会督促自己整理笔记与新的心得。</p><p>希望我和大家一起进步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;博客简述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#博客简述&quot;&gt;&lt;/a&gt; 博客简述&lt;/h2&gt;
&lt;p&gt;我是一位NUIST CS专业的大二学生。&lt;/p&gt;
&lt;p&gt;我搭建博客的初衷是为了分享知识，同时我也是费曼学习法热衷的拥蹙.&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="博客简述" scheme="https://wangyuhang-cmd.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AE%80%E8%BF%B0/"/>
    
    
    <category term="First Page" scheme="https://wangyuhang-cmd.github.io/tags/First-Page/"/>
    
  </entry>
  
  <entry>
    <title>DP中的优化</title>
    <link href="https://wangyuhang-cmd.github.io/2021/07/20/DP%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>https://wangyuhang-cmd.github.io/2021/07/20/DP%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/</id>
    <published>2021-07-20T08:06:01.000Z</published>
    <updated>2021-08-11T14:58:14.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调队列优化dp"><a class="markdownIt-Anchor" href="#单调队列优化dp"></a> 单调队列优化DP</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">划定区间取值问题</span><br><span class="line">对于长度为l的区间，每s长度至少有一个数被取，使用动态规划</span><br><span class="line"><span class="built_in">f</span>(i)表示选第i个数的最小方案</span><br><span class="line">集合划分：可以取i-s+<span class="number">1</span>到i<span class="number">-1</span>的各种方式</span><br><span class="line">因此f[i]=w[i]+<span class="built_in">min</span>(f[i-m+<span class="number">1</span>],....,f[i<span class="number">-1</span>])</span><br><span class="line">对于后面这一段<span class="built_in">min</span>(f[i-m+<span class="number">1</span>~i<span class="number">-1</span>])可以使用单调队列优化。</span><br></pre></td></tr></table></figure><hr><h1 id="凸包优化dp斜率优化"><a class="markdownIt-Anchor" href="#凸包优化dp斜率优化"></a> 凸包优化DP（斜率优化）</h1><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">由</mi><mi mathvariant="normal">状</mi><mi mathvariant="normal">态</mi><mi mathvariant="normal">转</mi><mi mathvariant="normal">移</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">：</mi><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><msub><mi>T</mi><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>C</mi><mi>i</mi></msub><mo>−</mo><msub><mi>C</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>S</mi><mo stretchy="false">(</mo><msub><mi>C</mi><mi>n</mi></msub><mo>−</mo><msub><mi>C</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">由状态转移方程：f[i]=min\{ f[j]+T_{i}(C_i-C_j)+S(C_n-C_j) \}  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">状</span><span class="mord cjk_fallback">态</span><span class="mord cjk_fallback">转</span><span class="mord cjk_fallback">移</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">其</mi><mi mathvariant="normal">中</mi><mi>j</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1...</mn><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">其中j=0,1...i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">我</mi><mi mathvariant="normal">们</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">将</mi><mi mathvariant="normal">其</mi><mi mathvariant="normal">整</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">以</mi><msub><mi>C</mi><mi>j</mi></msub><mi mathvariant="normal">为</mi><mi mathvariant="normal">自</mi><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">，</mi><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mi mathvariant="normal">为</mi><mi mathvariant="normal">因</mi><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">次</mi><mi mathvariant="normal">函</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">形</mi><mi mathvariant="normal">式</mi><mi mathvariant="normal">：</mi></mrow><annotation encoding="application/x-tex">我们可以将其整理为以C_j为自变量，f[j]为因变量的一次函数形式：</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">以</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>S</mi><mo>+</mo><msub><mi>T</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>C</mi><mi>j</mi></msub><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>T</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub><mo>−</mo><mi>S</mi><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">f(j)=(S+T_i)C_j+f(i)-T_iC_i-SC_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>因为要最小化f(i),对于本题来说，就是找截距最小值，在图中我们可以发现只需要维护图中的凸包的下边界：</p><p><strong><img src="/2021/07/20/DP%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/image-20210726154444502.png" class title="This is an test image"></strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">凸</mi><mi mathvariant="normal">包</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">边</mi><mi mathvariant="normal">界</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">义</mi><mi mathvariant="normal">：</mi><mi mathvariant="normal">任</mi><mi mathvariant="normal">意</mi><mi mathvariant="normal">两</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">连</mi><mi mathvariant="normal">线</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">连</mi><mi mathvariant="normal">线</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">都</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">凸</mi><mi mathvariant="normal">包</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">边</mi><mi mathvariant="normal">界</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">上</mi></mrow><annotation encoding="application/x-tex">凸包下边界的定义：任意两点连线，在连线上方的点都在凸包的下边界以上</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">凸</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">界</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">义</span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">任</span><span class="mord cjk_fallback">意</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">凸</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">界</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">上</span></span></span></span></span></p><p>但是只维护凸包的下边界最坏会出现O(n)的情况，因此仍然需要挖掘其他信息：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.</mn><mi mathvariant="normal">某</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">取</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">斜</mi><mi mathvariant="normal">率</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">于</mi><mi>k</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">第</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">起</mi><mi mathvariant="normal">点</mi></mrow><annotation encoding="application/x-tex">1.某点被取当为斜率大于k的第一个点的起点</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord cjk_fallback">某</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">斜</span><span class="mord cjk_fallback">率</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">第</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">起</span><span class="mord cjk_fallback">点</span></span></span></span></span></p><p><strong><img src="/2021/07/20/DP%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96/image-20210726154551944.png" class title="This is an test image"></strong></p><p>总结：如何在维护凸包中找到截距最小的点：</p><p>相当于在于一个单调的队列中，找到第一个大于某一个数的点。因此普遍做法是采用二分法。</p><p>其他特殊性质：</p><p>1.斜率单调递增，新加的点的横坐标也单调递增(k1&lt;k2&lt;k3)</p><p>​在查询的时候可以将队头小于当前斜率的点全部删除(删除所有小于k的点)</p><p>​在插入的时候，把队尾<strong>所有</strong>不满足要求的点全部删除（即不在凸包上）</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.</mn><mi mathvariant="normal">若</mi><mtext>   </mtext><mfrac><mrow><msub><mi>f</mi><mn>2</mn></msub><mo>−</mo><msub><mi>f</mi><mn>1</mn></msub></mrow><mrow><msub><mi>C</mi><mn>2</mn></msub><mo>−</mo><msub><mi>C</mi><mn>1</mn></msub></mrow></mfrac><mo>≤</mo><mi>s</mi><mi>u</mi><mi>m</mi><msub><mi>T</mi><mi>i</mi></msub><mo>+</mo><mi>S</mi><mi mathvariant="normal">是</mi><mi mathvariant="normal">则</mi><mi mathvariant="normal">删</mi><mi mathvariant="normal">除</mi><mi mathvariant="normal">队</mi><mi mathvariant="normal">头</mi></mrow><annotation encoding="application/x-tex">1. 若\ \ \  \frac{f_2-f_1}{C_2-C_1} \le sumT_i+S是则删除队头</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord cjk_fallback">若</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">删</span><span class="mord cjk_fallback">除</span><span class="mord cjk_fallback">队</span><span class="mord cjk_fallback">头</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2.</mn><mi mathvariant="normal">若</mi><mtext>  </mtext><mfrac><mrow><msub><mi>f</mi><mrow><mi>t</mi><mi>t</mi></mrow></msub><mo>−</mo><msub><mi>f</mi><mrow><mi>t</mi><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><mrow><msub><mi>C</mi><mrow><mi>t</mi><mi>t</mi></mrow></msub><mo>−</mo><msub><mi>C</mi><mrow><mi>t</mi><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mfrac><mo>≥</mo><mfrac><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>−</mo><msub><mi>f</mi><mrow><mi>t</mi><mi>t</mi></mrow></msub></mrow><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>−</mo><msub><mi>C</mi><mrow><mi>t</mi><mi>t</mi></mrow></msub></mrow></mfrac><mi mathvariant="normal">则</mi><mi mathvariant="normal">将</mi><mi mathvariant="normal">队</mi><mi mathvariant="normal">尾</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">删</mi><mi mathvariant="normal">去</mi></mrow><annotation encoding="application/x-tex">2.若\ \  \frac{f_{tt}-f_{tt-1}}{C_{tt}-C_{tt-1}} \ge \frac{f_i-f_{tt}}{C_i-C_{tt}}则将队尾元素删去</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.265771em;vertical-align:-0.894331em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord cjk_fallback">若</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.894331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">则</span><span class="mord cjk_fallback">将</span><span class="mord cjk_fallback">队</span><span class="mord cjk_fallback">尾</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">删</span><span class="mord cjk_fallback">去</span></span></span></span></span></p><p>例题：Acwing 301</p><h3 id="更一般的情况t0时"><a class="markdownIt-Anchor" href="#更一般的情况t0时"></a> 更一般的情况，T&lt;0时：</h3><p>​此时k无法保证单调性，但新加的点横坐标一定单调递增。因此只能查询，不能删去斜率小于当前点的点。查询的时候只能二分；</p><p>​队尾仍然删除所有队尾不在凸包上的点</p><p>如果T&gt;0,C&lt;0 可以使用反函数，交换x,y</p><h3 id="最一般的情况"><a class="markdownIt-Anchor" href="#最一般的情况"></a> 最一般的情况：</h3><p>考虑C可能小于0且T也可能小于0</p><p>​队头处理还是二分。队尾的动态维护有序序列则需要平衡树来做了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调队列优化dp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单调队列优化dp&quot;&gt;&lt;/a&gt; 单调队列优化DP&lt;/h1&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://wangyuhang-cmd.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://wangyuhang-cmd.github.io/2021/07/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://wangyuhang-cmd.github.io/2021/07/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2021-07-15T08:39:09.000Z</published>
    <updated>2021-08-11T14:59:02.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a class="markdownIt-Anchor" href="#动态规划"></a> 动态规划</h1><hr><h2 id="背包模型"><a class="markdownIt-Anchor" href="#背包模型"></a> 背包模型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Dp&#123;</span><br><span class="line">    状态表示&#123;</span><br><span class="line">        集合&#123;</span><br><span class="line">            表示的是所有选法</span><br><span class="line">                </span><br><span class="line">            满足条件条件&#123;</span><br><span class="line">                <span class="number">1.</span>只从前i个物品中选</span><br><span class="line">                </span><br><span class="line">                <span class="number">2.</span>总体积&lt;=j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        属性  Min,Max,数量</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    状态计算 集合划分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h4><p>n个物品和一个容量为v的背包，每一个物品体积vi,价值wi,每件物品只能用一次.</p><p>求背包能装的下的情况下能装下的最大价值为多少,我们考虑有递推式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-v[i]]+w[i])</span><br></pre></td></tr></table></figure><p>再空间优化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v[i];j--)&#123;</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i]]+w[i]);</span><br></pre></td></tr></table></figure><hr><h4 id="完全背包问题"><a class="markdownIt-Anchor" href="#完全背包问题"></a> 完全背包问题</h4><p>每件物品可以用无限次，只要装得下。</p><p>状态转移方程代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-k*v[i]]+k*w[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们考虑对其做优化，参考01背包，先对空间做优化，然后我们可以推导出</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>2</mn><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mn>2</mn><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[j]=max(dp[j],dp[j-v[i]]+w[i],dp[j-2v[i]]+2w[i]...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>2</mn><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[j-v[i]]=max(dp[j-v[i]],dp[j-2v[i]]+w[i]...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">)</span></span></span></span></span></p><p>对比上两个方程我们可以推导出：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[j]=max(dp[j],dp[j-v[i]]+w[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=m;j++)</span><br><span class="line">        dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i]]+w[i])</span><br></pre></td></tr></table></figure><hr><h4 id="多重背包问-题"><a class="markdownIt-Anchor" href="#多重背包问-题"></a> 多重背包问 题</h4><p>每件物品的数量有限制，各为 Si：</p><h5 id="1朴素版"><a class="markdownIt-Anchor" href="#1朴素版"></a> 1.朴素版</h5><p>​核心思想：二进制优化；</p><p>​我们将s[i]拆分成二进制表示的1，2…2<sup>k，其中2</sup>k&lt;=s[i]/2</p><p>​然后转化成01背包来做</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo>⋅</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>k</mi><mo>⋅</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=max(dp[i-1][j],dp[i-1][j-k\cdot v[i]]+k\cdot w[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>​其中k=0,1,2…s[i]</p><p>我们将dp数组的行进行压缩可以得到：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo>⋅</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>k</mi><mo>⋅</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[j]=max(dp[j],dp[j-k\cdot v[i]]+k\cdot w[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>实现代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=s[i];k++)</span><br><span class="line">            dp[j]=<span class="built_in">max</span>(dp[j],dp[j-k*v[i]]+k*w[i])</span><br></pre></td></tr></table></figure><h5 id="2二进制优化版"><a class="markdownIt-Anchor" href="#2二进制优化版"></a> 2.二进制优化版</h5><p>我们可以将每个物品的数量s做二进制优化，即将每一个s拆分成1,2,4…2<sup>k,s+1-2</sup>(k+1)。这样我们可以使用这些数表示任意1-s区间内的每一个数，并且时间复杂度也可以从原来的O(nms)优化到O(nmlogs)。然后我们呢对于拆分出来的物品用01背包的思路来做即可；</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;  <span class="comment">//二进制优化</span></span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(c&gt;=u)&#123;</span><br><span class="line">            v[++cnt]=a*u;</span><br><span class="line">            w[cnt]=b*u;</span><br><span class="line">            c-=u;</span><br><span class="line">            u*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            v[++cnt]=a*c;</span><br><span class="line">            w[cnt]=b*c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n=cnt;</span><br></pre></td></tr></table></figure><hr><h4 id="分组背包问题"><a class="markdownIt-Anchor" href="#分组背包问题"></a> 分组背包问题</h4><p>物品有n组，每一组有若干个，每一组最多选一个，求最大价值</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=max(dp[i-1][j],dp[i-1,j-v[i][k]]+w[i][k])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>因此本质上还是01背包问题，我们将其转化为01背包，只不过多一层循环k依次迭代更新每一组的各件物品；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=s[i];k++)</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=v[i][k])dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v[i][k]]+w[i][k]);</span><br></pre></td></tr></table></figure><p>关于题目的文字表述：</p><p><strong><img src="/2021/07/15/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20210719135356535.png" class title="This is an test image"></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#动态规划&quot;&gt;&lt;/a&gt; 动态规划&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;背包模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背包模型&quot;&gt;&lt;/a&gt; 背包模</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://wangyuhang-cmd.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>组合数与卢卡斯定理</title>
    <link href="https://wangyuhang-cmd.github.io/2021/07/13/%E7%BB%84%E5%90%88%E6%95%B0%E4%B8%8E%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/"/>
    <id>https://wangyuhang-cmd.github.io/2021/07/13/%E7%BB%84%E5%90%88%E6%95%B0%E4%B8%8E%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/</id>
    <published>2021-07-13T08:18:25.000Z</published>
    <updated>2021-08-13T08:19:00.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合数"><a class="markdownIt-Anchor" href="#组合数"></a> 组合数</h2><h4 id="定义法"><a class="markdownIt-Anchor" href="#定义法"></a> 定义法：</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>a</mi><mi>b</mi></msubsup><mo>=</mo><mfrac><mrow><mi>a</mi><mo stretchy="false">!</mo></mrow><mrow><mi>b</mi><mo stretchy="false">!</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">C_{a}^{b}=\frac{a!}{b! \cdot (a-b)!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.146108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999998em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mclose">!</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h4 id="迭代公式法"><a class="markdownIt-Anchor" href="#迭代公式法"></a> 迭代公式法：</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>a</mi><mi>b</mi></msubsup><mo>=</mo><msubsup><mi>C</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow><mi>b</mi></msubsup><mo>+</mo><msubsup><mi>C</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>b</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_{a}^{b}=C_{a-1}^{b}+C_{a-1}^{b-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.146108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999998em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.204439em;vertical-align:-0.305331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2138779999999998em;vertical-align:-0.31477em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-2.443561em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31477em;"><span></span></span></span></span></span></span></span></span></span></span></p><h4 id="卢卡斯定理"><a class="markdownIt-Anchor" href="#卢卡斯定理"></a> 卢卡斯定理：</h4><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mi>a</mi><mi>b</mi></msubsup><mo>≡</mo><msubsup><mi>C</mi><mrow><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow><mrow><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi></mrow></msubsup><mo>⋅</mo><mtext> </mtext><msubsup><mi>C</mi><mfrac><mi>a</mi><mi>p</mi></mfrac><mfrac><mi>b</mi><mi>p</mi></mfrac></msubsup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C_{a}^{b} \equiv C_{a\ mod \ p}^{b\ mod \ p} \cdot \ C_{\frac{a}{p}}^{\frac{b}{p}} (mod\ p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.146108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999998em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.404432em;vertical-align:-0.4374159999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.3986920000000005em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span><span class="mspace mtight"><span class="mtight"> </span></span><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4374159999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:1.9361399999999998em;vertical-align:-0.6373em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2988399999999998em;"><span style="top:-2.70072em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.68282em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8800285714285714em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6373em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lucas</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;p&amp;&amp;b&lt;p) <span class="keyword">return</span> <span class="built_in">C</span>(a,b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res= (ll)<span class="built_in">C</span>(a%p,b%p)*<span class="built_in">lucas</span>(a/p,b/p)%p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//C(a,b)即以a为底取b的组合数</span></span><br></pre></td></tr></table></figure><h4 id="卡特兰数"><a class="markdownIt-Anchor" href="#卡特兰数"></a> 卡特兰数</h4><p>对于一个只由01构成的长度为2n的序列，要求其任意前缀都有0的个数大于1的个数，因此可以通过转化为在网格图中的路径表示来证明一共有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mo>−</mo><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mo>⋅</mo><mtext> </mtext><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">C_{2n}^{n}-C_{2n}^{n-1}=C_{2n}^{n}\cdot\ \frac{1}{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9613919999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.256439em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4435610000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.256439em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9613919999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>种方案数</p><h4 id="组合数高精度"><a class="markdownIt-Anchor" href="#组合数高精度"></a> 组合数高精度</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 5010 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> numlist[MAXN];</span><br><span class="line"><span class="keyword">int</span> prime[MAXN],cnt=<span class="number">0</span>,num[MAXN];</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="comment">//欧拉筛筛出所有质数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eular</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">5001</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numlist[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            prime[++cnt]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;prime[j]&lt;=<span class="number">5001</span>/i;j++)&#123;</span><br><span class="line">            numlist[i*prime[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高精度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mult</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.<span class="built_in">size</span>();i++)</span><br><span class="line">        res[i]*=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(res[i]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">            res[i+<span class="number">1</span>]+=res[i]/<span class="number">10</span>;</span><br><span class="line">            res[i]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(res[res.<span class="built_in">size</span>()<span class="number">-1</span>]&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=res.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(res[u]/<span class="number">10</span>);</span><br><span class="line">        res[u]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Eular</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="comment">//处理出所有的公约数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=a;</span><br><span class="line">        <span class="keyword">while</span>(u)&#123;</span><br><span class="line">            num[i]+=u/prime[i];</span><br><span class="line">            u/=prime[i];</span><br><span class="line">        &#125;</span><br><span class="line">        u=b;</span><br><span class="line">        <span class="keyword">while</span>(u)&#123;</span><br><span class="line">            num[i]-=u/prime[i];</span><br><span class="line">            u/=prime[i];</span><br><span class="line">        &#125;</span><br><span class="line">        u=a-b;</span><br><span class="line">        <span class="keyword">while</span>(u)&#123;</span><br><span class="line">            num[i]-=u/prime[i];</span><br><span class="line">            u/=prime[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//高精度乘法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num[i];j++)&#123;</span><br><span class="line">                <span class="built_in">mult</span>(prime[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=res.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组合数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#组合数&quot;&gt;&lt;/a&gt; 组合数&lt;/h2&gt;
&lt;h4 id=&quot;定义法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义法&quot;&gt;&lt;/a&gt; 定义法：&lt;/h4&gt;
&lt;p </summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="组合数" scheme="https://wangyuhang-cmd.github.io/tags/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>高斯消元法</title>
    <link href="https://wangyuhang-cmd.github.io/2021/07/13/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B3%95/"/>
    <id>https://wangyuhang-cmd.github.io/2021/07/13/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B3%95/</id>
    <published>2021-07-13T08:17:05.000Z</published>
    <updated>2021-08-13T08:19:13.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高斯消元法"><a class="markdownIt-Anchor" href="#高斯消元法"></a> 高斯消元法</h1><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">高</mi><mi mathvariant="normal">斯</mi><mi mathvariant="normal">消</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">以</mi><mi mathvariant="normal">在</mi><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">的</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">复</mi><mi mathvariant="normal">杂</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">求</mi><mi mathvariant="normal">解</mi><mi mathvariant="normal">多</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">线</mi><mi mathvariant="normal">性</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">程</mi><mi mathvariant="normal">组</mi></mrow><annotation encoding="application/x-tex">高斯消元法可以在O(n^{3})的时间复杂度下求解多元线性方程组</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">斯</span><span class="mord cjk_fallback">消</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">复</span><span class="mord cjk_fallback">杂</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">程</span><span class="mord cjk_fallback">组</span></span></span></span></span></p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲\left\{\begin…">\begin{equation}\left\{\begin{aligned}a_{11}x_{1}+a_{12}x_{2}+...+a_{1n}x_{n}=b_{1}\\a_{11}x_{1}+a_{12}x_{2}+...+a_{1n}x_{n}=b_{2}\\....\\a_{n1}x_{1}+a_{n2}x_{2}+...+a_{nn}x_{n}=b_{n}\end{aligned}\right.\end{equation}</p><p>解一共有三种情况：</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲\left\{\begin…">\begin{equation}\left\{\begin{aligned}1.无解\\2.无穷解\\3.有唯一解\\\end{aligned}\right.\end{equation}</p><p>可以通过其增广矩阵来解方程组：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left [\begin{array}{c:c}\begin{matrix}a_{11}&amp;a_{12}&amp;...a_{1n}\\a_{21}&amp;a_{22}&amp;...a_{2n}\\...\\a_{n1}&amp;a_{n2}&amp;...a_{nn}\\\end{matrix}&amp;\begin{matrix}b_{1}\\b_{2}\\...\\b_{n}\\\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.65em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.65em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>通过初等变换转换为上三角的形式：</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲\left\{\begin…">\begin{equation}\left\{\begin{aligned}a_{11}x_{1}+a_{12}x_{2}+...+a_{1n}x_{n}=b_{1}\\a_{12}x_{2}+...+a_{1n}x_{n}=b_{2}\\....\\a_{nn}x_{n}=b_{n}\end{aligned}\right.\end{equation}</p><p>对应增广矩阵为;</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left [\begin{array}{c:c}\begin{matrix}a_{11}&amp;a_{12}&amp;...a_{1n}\\0&amp;a_{22}&amp;...a_{2n}\\...\\0&amp;0&amp;...a_{nn}\\\end{matrix}&amp;\begin{matrix}b_{1}\\b_{2}\\...\\b_{n}\\\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.65em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:4.800000000000001em;vertical-align:-2.1500000000000004em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.65em;"><span class="pstrut" style="height:4.65em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="高斯消元思路"><a class="markdownIt-Anchor" href="#高斯消元思路"></a> 高斯消元思路</h2><p>枚举每一列：</p><ul><li>找到绝对值最大的一行</li><li>将这一行换到最上面去</li><li>将该行的第c个数变成1</li><li>用第一行将下面所有行的第c列消成0</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gauss</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c,r;</span><br><span class="line">    <span class="keyword">for</span>(c=<span class="number">1</span>,r=<span class="number">1</span>;c&lt;=n;c++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=r;</span><br><span class="line">        <span class="comment">//第一步找到最大的数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;<span class="built_in">fabs</span>(a[t][c]))</span><br><span class="line">                t=i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二步符合条件的就交换到第一行</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[t][c])&lt;eps) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=c;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">swap</span>(a[r][i],a[t][i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第三步，逐列单位化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;=c;i--) a[r][i]/=a[r][c];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//逐行减去</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=r+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;eps)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=n+<span class="number">1</span>;j&gt;=c;j--)</span><br><span class="line">                    a[i][j]-=a[i][c]*a[r][j];</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&lt;=n;i++) <span class="comment">//遍历每一行</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][n+<span class="number">1</span>])&gt;eps) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)  <span class="comment">//从最后一行开始</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) <span class="comment">//从下一行开始</span></span><br><span class="line">            a[i][n+<span class="number">1</span>]-=a[j][n+<span class="number">1</span>]*a[i][j];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高斯消元法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#高斯消元法&quot;&gt;&lt;/a&gt; 高斯消元法&lt;/h1&gt;
&lt;p class=&quot;katex-block&quot;&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;ka</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="高斯消元法" scheme="https://wangyuhang-cmd.github.io/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>初涉图论</title>
    <link href="https://wangyuhang-cmd.github.io/2021/07/05/%E5%88%9D%E6%B6%89%E5%9B%BE%E8%AE%BA/"/>
    <id>https://wangyuhang-cmd.github.io/2021/07/05/%E5%88%9D%E6%B6%89%E5%9B%BE%E8%AE%BA/</id>
    <published>2021-07-05T10:08:27.000Z</published>
    <updated>2021-08-11T14:58:57.269Z</updated>
    
    <content type="html"><![CDATA[<h4 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序：</h4><p>DFS实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dfs</span>(<span class="keyword">int</span> u)&#123;</span><br><span class="line">    <span class="keyword">for</span> u 的所有邻点</span><br><span class="line">        seq&lt;-u</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//seq是拓扑排序的逆序</span></span><br></pre></td></tr></table></figure><p>BFS</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对于一个序列x...y,对于图中的每一条有向边，x都出现y的前面</span></span><br><span class="line"><span class="comment">即所有边都是从前指向后的</span></span><br><span class="line"><span class="comment">只要有环，必然无拓扑序列</span></span><br><span class="line"><span class="comment">有向无环图必然存在拓扑序列</span></span><br><span class="line"><span class="comment">入度为0的点都可以排在前面</span></span><br><span class="line"><span class="comment">做法：</span></span><br><span class="line"><span class="comment">1.把所有入度为0的点入队</span></span><br><span class="line"><span class="comment">2.bfs()</span></span><br><span class="line"><span class="comment">while(!Q&gt;empty())&#123;</span></span><br><span class="line"><span class="comment">    t.push(队头)</span></span><br><span class="line"><span class="comment">    队头-&gt;t</span></span><br><span class="line"><span class="comment">    枚举t的所有出边&#123;</span></span><br><span class="line"><span class="comment">        删除t-&gt;j,d[j]--;</span></span><br><span class="line"><span class="comment">        if(d[j]==0) j入队</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            Q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> t=Q.<span class="built_in">front</span>();ds.<span class="built_in">push_back</span>(Q.<span class="built_in">front</span>());</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];</span><br><span class="line">            d[j]--;</span><br><span class="line">            <span class="keyword">if</span>(d[j]==<span class="number">0</span>) Q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sz=ds.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> sz&gt;=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最短路算法知识结构图"><a class="markdownIt-Anchor" href="#最短路算法知识结构图"></a> 最短路算法知识结构图</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">最短路问题&#123;</span></span><br><span class="line"><span class="comment">    单源最短路&#123;</span></span><br><span class="line"><span class="comment">        1.所有边权都是正数&#123;</span></span><br><span class="line"><span class="comment">            1.朴素Dijkstra算法 O(n^2) 适用于稠密图</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            2.堆优化的Dijkstra O(mlog(n)) 适用于稀疏图</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        2.存在负权边&#123;</span></span><br><span class="line"><span class="comment">            1.Bellman-Ford O(nm)</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            2.SPFA 一般O(m)最坏O(nm)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    多源汇最短路&#123;</span></span><br><span class="line"><span class="comment">Floyed算法        </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>稠密图：一般边数m=n^2</p><p>稀疏图：边数m=n</p><p>Dijkstra基于贪心算法</p><p>Floyed基于动态规划</p><p>Bellman-Ford基于离散数学中的知识</p><hr><h2 id="朴素版dijkstra算法"><a class="markdownIt-Anchor" href="#朴素版dijkstra算法"></a> 朴素版Dijkstra算法</h2><p>s={当前已经确定最短距离的点}</p><p>1.初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dis[<span class="number">1</span>]=<span class="number">0</span>,dis[otherwise]=+∞</span><br></pre></td></tr></table></figure><p>2.循环迭代(贪婪规则：更新当前还没有确定的点中距离最小的点）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i:<span class="number">0</span>~n)迭代循环n次</span><br><span class="line">不在s中的距离最近的点-&gt;t</span><br><span class="line">t-&gt;s <span class="comment">//将t加到s集合内</span></span><br><span class="line">用t来更新其他点的距离(<span class="built_in">check</span>(dis[x]&gt;dis[t])</span><br></pre></td></tr></table></figure><p>3.可确定每一个点到起点的最短距离了</p><p>存法：使用邻接矩阵(因为是稠密图)</p><h4 id="朴素dijstra解法"><a class="markdownIt-Anchor" href="#朴素dijstra解法"></a> 朴素Dijstra解法：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN],g[MAXN][MAXN];</span><br><span class="line"><span class="keyword">bool</span> st[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t==<span class="number">-1</span>||dis[t]&gt;dis[j]))</span><br><span class="line">                t=j;</span><br><span class="line"><span class="keyword">if</span>(t==n) <span class="keyword">break</span>;</span><br><span class="line">        st[t]=<span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            dis[j]=<span class="built_in">min</span>(dis[j],dis[t]+g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断一下是否是孤立点</span></span><br><span class="line">    <span class="keyword">if</span>(dis[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>如果是稀疏图的话，对照上面的朴素Dijkstra，我们可以在这一步：</p><p>2.循环迭代(贪婪规则：更新当前还没有确定的点中距离最小的点）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i:<span class="number">0</span>~n)迭代循环n次</span><br><span class="line">不在s中的距离最近的点-&gt;<span class="function">t  ****************<span class="title">O</span><span class="params">(n^<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">t-&gt;s <span class="comment">//将t加到s集合内</span></span></span><br><span class="line"><span class="function">用t来更新其他点的距离<span class="params">(check(dis[x]&gt;dis[t]) ***O(mlogn)</span></span></span><br></pre></td></tr></table></figure><p><em><strong>此处使用堆来进行优化，直接借助于STL中的prority_queue或者手写堆（Python中的set）</strong></em></p><p>bfs的迭代方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>先将(<span class="number">0</span>,<span class="number">1</span>)放入优先队列 <span class="comment">//必须是小根堆</span></span><br><span class="line"><span class="number">2.</span><span class="keyword">while</span>！empty:取堆顶元素并弹出,如果此点已经被更新过了则继续迭代。</span><br><span class="line">否则用当前点来更新其他点(遍历邻接表)，记住，一定要将此点放入st[]数组来被标记</span><br><span class="line">如果当前点距离大于从最近元素过来的距离，则更新dis[]并把j点放入优先队列；</span><br><span class="line"><span class="number">3.</span>最后结束的时候需要判断是否是孤立点，即是否为连通图</span><br></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用邻接表存储稀疏图</span></span><br><span class="line"><span class="keyword">int</span> n,m,idx;</span><br><span class="line"><span class="keyword">int</span> h[MAXN],e[MAXN],ne[MAXN],w[MAXN];<span class="comment">//h[]存储每个邻接表上的头结点；ne[]存的是每个节点的下一个节点，即next；w存储权重</span></span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> st[MAXN];</span><br><span class="line"><span class="comment">//pair的first存的是距离，second存的是编号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx]=b,w[idx]=c;</span><br><span class="line">    ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; heap; <span class="comment">//存储一个小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> u = heap.<span class="built_in">top</span>();heap.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ver = u.second,distance = u.first;  <span class="comment">//ver存储点的序号，distance存储距离</span></span><br><span class="line">        <span class="keyword">if</span>(st[ver]) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        st[ver]=<span class="literal">true</span>; <span class="comment">//这nm千万别忘了啊</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[ver];i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(dis[j]&gt;distance+w[i])&#123;</span><br><span class="line">                dis[j]=distance+w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dis[j],j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="bellman_ford算法-onm"><a class="markdownIt-Anchor" href="#bellman_ford算法-onm"></a> Bellman_Ford算法 O(n*m)</h3><p>任意存边方式都可，建议结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(n次)&#123;</span><br><span class="line">备份（防止用更新过的点更新其他点）</span><br><span class="line"><span class="keyword">for</span> 所有从a走到b的边，权重是w&#123;</span><br><span class="line">dis[b]=<span class="built_in">min</span>(dis[b],dis[a]+w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环完，所有边都满足三角不等式dis[b]&lt;=dis[a]+w;迭代k次表示经过不超过k条边的最短路的距离。如果第n次迭代仍然有边更新，根据抽屉原理，说明有负环。因此，Bellman-Ford算法可以用来找负环。</p><p>注意：如果有负权回路，最短路不一定存在</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 510</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,w;  </span><br><span class="line">&#125; edge[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[MAXN],backup[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bellman_ford</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//n次迭代,又名松弛操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup,dis,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a=edge[j].a,b=edge[j].b,w=edge[j].w;</span><br><span class="line">            dis[b]=<span class="built_in">min</span>(dis[b],backup[a]+w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]&gt;<span class="number">0x3f3f3f3f</span>/<span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class="line">        edge[i].a=a,edge[i].b=b,edge[i].w=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="built_in">bellman_ford</span>();</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="spfa算法"><a class="markdownIt-Anchor" href="#spfa算法"></a> SPFA算法</h3><h4 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤：</h4><pre><code>0.用邻接表存储1.队头入队，更新st数组2.BFS思路while队列不空,t&lt;-q.front(),p.pop()3.遍历t的邻接表，更新dis[]数组，即t每一出点的最小距离；4.在每一出点判断，如果不在队列里，则加入队列；5.最后迭代完之后的判断</code></pre><p>​</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 160010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用邻接表存储稀疏图</span></span><br><span class="line"><span class="keyword">int</span> n,m,idx;</span><br><span class="line"><span class="keyword">int</span> h[MAXN],e[MAXN],ne[MAXN],w[MAXN];<span class="comment">//h[]存储每个邻接表上的头结点；ne[]存的是每个节点的下一个节点，即next；w存储权重</span></span><br><span class="line"><span class="keyword">int</span> dis[MAXN];</span><br><span class="line"><span class="keyword">bool</span> st[MAXN];</span><br><span class="line"><span class="comment">//pair的first存的是距离，second存的是编号</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> t=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t]=<span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(dis[j]&gt;dis[t]+w[i])&#123;</span><br><span class="line">                dis[j]=dis[t]+w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    Q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[n]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dis[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求负环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="comment">//memset(dis,0x3f,sizeof(dis));    </span></span><br><span class="line">    <span class="comment">//dis[1]=0;    </span></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; Q;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;        </span><br><span class="line">        st[i]=<span class="literal">true</span>;        </span><br><span class="line">        Q.<span class="built_in">push</span>(i);    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">while</span>(Q.<span class="built_in">size</span>())&#123;        </span><br><span class="line">        <span class="keyword">int</span> t=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();        </span><br><span class="line">        st[t]=<span class="literal">false</span>;        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[t];i!=<span class="number">-1</span>;i=ne[i])&#123;            </span><br><span class="line">            <span class="keyword">int</span> j=e[i];            </span><br><span class="line">                                      </span><br><span class="line">            <span class="keyword">if</span>(dis[j]&gt;dis[t]+w[i])&#123;                </span><br><span class="line">                dis[j]=dis[t]+w[i];                </span><br><span class="line">                cnt[j] = cnt[t]+<span class="number">1</span>;                </span><br><span class="line">                <span class="keyword">if</span>(cnt[j]&gt;n) <span class="keyword">return</span> <span class="literal">true</span>;                </span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;                    </span><br><span class="line">                    Q.<span class="built_in">push</span>(j);                    </span><br><span class="line">                    st[j]=<span class="literal">true</span>;                </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="floyd算法-on3"><a class="markdownIt-Anchor" href="#floyd算法-on3"></a> Floyd算法 O(n^3)</h3><p>1.邻接矩阵 d [ i , j ] 存图中每个点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>~n)</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">1</span>~n)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>~n)</span><br><span class="line">            d[i][j]=<span class="built_in">min</span>(d[i][j],d[i][k]+d[k][j];</span><br></pre></td></tr></table></figure><p>d[k,i,j]表示从i点经过1~k中间点到达j的最短距离<br>因此基于动态规划的状态转移方程为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[k,i,j]=<span class="built_in">min</span>(d[k,i,j],d[k<span class="number">-1</span>,i,k]+d[k<span class="number">-1</span>,k,j])</span><br></pre></td></tr></table></figure><p>从i到j只经过k-1这些点，再从k到j只经过1<sub>k-1这些点，加在一起就是从i</sub>j经过k个点,而k-1可以压缩掉，故状态转移方程为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[i][j]=<span class="built_in">min</span>(d[i][j],d[i][k]+d[k][j];</span><br></pre></td></tr></table></figure><h4 id="floyd算法用来解决的问题"><a class="markdownIt-Anchor" href="#floyd算法用来解决的问题"></a> Floyd算法用来解决的问题：</h4><p>​1.最短路问题</p><p>​2.传递闭包</p><p>​3.找最小环</p><p>​4.恰好经过k条边的最短路径</p><h5 id="传递闭包"><a class="markdownIt-Anchor" href="#传递闭包"></a> 传递闭包</h5><p>在有向图中，能间接到的点也连一条有向边</p><p>邻接矩阵的表示方式：已知g(i,j),求d(i,j)</p><p>1.初始化 d(i,j)=g(i,j)</p><p>2.对d(i,j)做一遍Floyd</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">g</span>(i,j)=存在i-&gt;j?<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">    <span class="comment">//Floyd</span></span><br><span class="line">    <span class="keyword">for</span> k:n</span><br><span class="line">        <span class="keyword">for</span> i:n</span><br><span class="line">            <span class="keyword">for</span> j:n</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">d</span>(i,k)==<span class="number">1</span>&amp;&amp;<span class="built_in">d</span>(k,j)==<span class="number">1</span>)                <span class="built_in">d</span>(i,j)=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>矛盾的判断方式：d(i,i)=1</p><p>能唯一确定的判断方式: i != j 必有 d(i,j) | d(j,i) == 1</p><p>顺序不唯一：处于中间阶段</p><h5 id="恰好经过k条边的最短路径之改进floyd"><a class="markdownIt-Anchor" href="#恰好经过k条边的最短路径之改进floyd"></a> 恰好经过k条边的最短路径之改进Floyd</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Floyd:  d[k,i,j]表示从i到j只经过<span class="number">1</span>-k的最短路径</span><br><span class="line">本思路： d[k,i,j]表示从i到j，恰好经过k条边的最短路径</span><br><span class="line">则状态转移方程为：</span><br><span class="line">    d[a+b,i,j]=<span class="built_in">min</span>(d[a,i,k]+d[b,k,j]) k=<span class="number">1</span>-n</span><br></pre></td></tr></table></figure><p>k指的是第a个点，此算法可以处理有负环的情况</p><p>使用倍增的思想来拼接，用logn的复杂度逼近k</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;拓扑排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#拓扑排序&quot;&gt;&lt;/a&gt; 拓扑排序：&lt;/h4&gt;
&lt;p&gt;DFS实现&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>STL详解</title>
    <link href="https://wangyuhang-cmd.github.io/2021/07/01/STL%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wangyuhang-cmd.github.io/2021/07/01/STL%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-07-01T14:46:20.000Z</published>
    <updated>2021-08-11T15:57:50.684Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*STL笔记部分*/</span></span><br><span class="line"></span><br><span class="line">vector动态数组&#123;</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">claer</span>()...</span><br><span class="line">    <span class="comment">//系统位某一程序申请空间的所需时间与空间大小无关，与次数有关,因此需要倍增vector</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="number">3</span>)</span></span>; <span class="comment">//定义长度位10的vector每个数初始化为3</span></span><br><span class="line">    遍历方式：</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;::iterator it;<span class="comment">//迭代器遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:a) ... <span class="comment">//C++11特性</span></span><br><span class="line">    支持比较运算，按字典序比较大小</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&#123;</span><br><span class="line">    可以存储一个二元组pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;</span><br><span class="line">    p.first,p.second分别取第一个第二的元素</span><br><span class="line">    支持比较运算，按照字典序，以first为第一关键字，second为第二关键字</span><br><span class="line">    p=<span class="built_in">make_pair</span>(a,b) <span class="comment">//pair的构造</span></span><br><span class="line">    p=&#123;a,b&#125; <span class="comment">//c++11</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string字符串&#123;</span><br><span class="line">    <span class="built_in">c_str</span>() <span class="comment">//返回string对应的字符数组的头指针</span></span><br><span class="line">    如果使用<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,p.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue 队列</span><br><span class="line"><span class="built_in">priority_queue</span>(优先队列/堆)&#123;</span><br><span class="line">    <span class="comment">//默认是大根堆</span></span><br><span class="line">    改成小根堆：</span><br><span class="line">        <span class="number">1.</span>插入负数</span><br><span class="line">        <span class="number">2.</span>priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="built_in">push</span>(); 插入</span><br><span class="line">    <span class="built_in">top</span>();</span><br><span class="line">    <span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">stack 栈</span><br><span class="line"><span class="built_in">deque</span>(双端队列,效率低)</span><br><span class="line">set,multiset&#123;</span><br><span class="line">    <span class="comment">//set里面不能有重复元素，multiset里面可以有重复元素</span></span><br><span class="line">    set/multiset:</span><br><span class="line">        <span class="built_in">insert</span>()</span><br><span class="line">        <span class="built_in">find</span>() <span class="comment">//不存在返回end迭代器</span></span><br><span class="line">        count返回某个数的个数</span><br><span class="line">        <span class="built_in">erase</span>()</span><br><span class="line">            (<span class="number">1</span>)<span class="built_in">erase</span>(x),删除所有这个数</span><br><span class="line">            (<span class="number">2</span>)<span class="built_in">erase</span>(it)，删除此迭代器</span><br><span class="line">        <span class="built_in">lower_bound</span>(x)返回大于等于x的最小的数</span><br><span class="line">        <span class="built_in">upper_bound</span>(x)返回大于x的最小的数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map,multimap 基于平衡二叉树(红黑树)实现，动态维护有序序列&#123;</span><br><span class="line">    <span class="built_in">insert</span>();   插入的是<span class="function">pair</span></span><br><span class="line"><span class="function">    <span class="title">erase</span><span class="params">()</span></span>;    输入的参数是pair或者迭代器</span><br><span class="line">    [] 映射，<span class="built_in">O</span>(logn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(哈希表)&#123;</span><br><span class="line">unordered_set</span><br><span class="line">unordered_map</span><br><span class="line">unordered_multiset</span><br><span class="line">unordered_multima</span><br><span class="line">    <span class="comment">//增删改查是O(1);</span></span><br><span class="line">    <span class="comment">//不支持upper_bound和lower_bound</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bitset</span>(位存储，状态压缩)&#123;</span><br><span class="line">    <span class="keyword">bool</span> a[<span class="number">1024</span>]=<span class="number">1024B</span>,bitset&lt;<span class="number">1024</span>&gt;=<span class="number">128B</span></span><br><span class="line">    <span class="built_in">count</span>() 返回有多少个<span class="number">1</span></span><br><span class="line">    <span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line">    <span class="built_in">none</span>()  是否全为<span class="number">0</span></span><br><span class="line">    <span class="built_in">set</span>()  把多有位置变成<span class="number">1</span></span><br><span class="line">    <span class="built_in">set</span>(k,v) 把第k位变成v</span><br><span class="line">    <span class="built_in">flip</span>()  等价于~</span><br><span class="line">    <span class="built_in">flip</span>(k) 等价于把第k位取反</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="C++语法" scheme="https://wangyuhang-cmd.github.io/categories/C-%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="STL" scheme="https://wangyuhang-cmd.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>ST_RMQ</title>
    <link href="https://wangyuhang-cmd.github.io/2021/06/05/ST-RMQ/"/>
    <id>https://wangyuhang-cmd.github.io/2021/06/05/ST-RMQ/</id>
    <published>2021-06-05T11:37:00.000Z</published>
    <updated>2021-08-11T14:58:37.790Z</updated>
    
    <content type="html"><![CDATA[<p>ST算法，处理RMQ区间最大值问题</p><p>ST预处理函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ST_prework</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ST[i][<span class="number">0</span>]=arr[i];</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;t;j++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//由公式ST[i,j]=max(ST[i,j-1],ST[i+2^(j-1),j-1]</span></span><br><span class="line">        ST[i][j]=<span class="built_in">max</span>(ST[i][j<span class="number">-1</span>],ST[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ST_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="built_in">log</span>(r-l+<span class="number">1</span>)/<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(ST[l][k],ST[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ST算法，处理RMQ区间最大值问题&lt;/p&gt;
&lt;p&gt;ST预处理函数&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="倍增" scheme="https://wangyuhang-cmd.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火模板_c++</title>
    <link href="https://wangyuhang-cmd.github.io/2021/06/01/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E6%A8%A1%E6%9D%BF-c/"/>
    <id>https://wangyuhang-cmd.github.io/2021/06/01/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E6%A8%A1%E6%9D%BF-c/</id>
    <published>2021-06-01T11:37:57.000Z</published>
    <updated>2021-08-11T14:59:07.348Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模拟退火算法"><a class="markdownIt-Anchor" href="#模拟退火算法"></a> 模拟退火算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> T=<span class="number">100</span>; <span class="comment">//初始温度</span></span><br><span class="line"><span class="keyword">double</span> delta = <span class="number">0.98</span>; <span class="comment">//降温系数</span></span><br><span class="line"><span class="keyword">double</span> x=<span class="number">50.0</span>;  <span class="comment">//x的初始温度</span></span><br><span class="line"><span class="keyword">double</span> now=<span class="built_in">func</span>(x);  <span class="comment">//计算初始函数值</span></span><br><span class="line"><span class="keyword">double</span> ans=now;  <span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">while</span>(T&gt;eps)&#123;     <span class="comment">//eps是终止温度</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> newx = x+f[<span class="built_in">rand</span>()%<span class="number">2</span>]*T; <span class="comment">//按概率改变x，随T的降温而减少</span></span><br><span class="line"><span class="keyword">if</span>(newx &gt;= <span class="number">0</span> &amp;&amp; newx&lt;=<span class="number">100</span>)&#123;</span><br><span class="line"><span class="keyword">double</span> next = <span class="built_in">func</span>(newx);</span><br><span class="line">ans=<span class="built_in">min</span>(ans,next);</span><br><span class="line"><span class="keyword">if</span>(now-next&gt;eps)&#123;x=newx;now=next;&#125;</span><br><span class="line">&#125;</span><br><span class="line">T*=delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;模拟退火算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#模拟退火算法&quot;&gt;&lt;/a&gt; 模拟退火算法&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="贪心" scheme="https://wangyuhang-cmd.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>R语言之数据可视化</title>
    <link href="https://wangyuhang-cmd.github.io/2021/04/11/R%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://wangyuhang-cmd.github.io/2021/04/11/R%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2021-04-11T15:30:44.000Z</published>
    <updated>2021-08-11T15:57:43.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据可视化"><a class="markdownIt-Anchor" href="#数据可视化"></a> 数据可视化</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#demo可以生成演示图像</span></span><br><span class="line"></span><br><span class="line">demo(graphics)</span><br><span class="line">demo(Hershey)</span><br><span class="line">demo(persp)</span><br><span class="line">demo(image)</span><br><span class="line">demo()</span><br></pre></td></tr></table></figure><h2 id="简单绘图"><a class="markdownIt-Anchor" href="#简单绘图"></a> 简单绘图</h2><h4 id="散点图"><a class="markdownIt-Anchor" href="#散点图"></a> 散点图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(x,y，main,xlab,ylab,xlim,ylim,axes)</span><br></pre></td></tr></table></figure><p>x,y是水平数值坐标的数据集main要是图形的图块</p><p>xlab，ylab是水平轴,竖直轴的标签</p><p>xlim,ylim是绘图用的x,y值的极限</p><p>axes只是是否要绘制两个轴</p><h4 id="折线图"><a class="markdownIt-Anchor" href="#折线图"></a> 折线图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(v,type,col,xlab,ylab)</span><br></pre></td></tr></table></figure><p>v是包含数值的向量type有 ”p“仅绘制点 ”i“仅绘制线 ”o“绘制点和线</p><h4 id="条形图"><a class="markdownIt-Anchor" href="#条形图"></a> 条形图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">barplot(H,xlab,ylab,main,names.arg,col)</span><br><span class="line">H &lt;- <span class="built_in">c</span>(<span class="number">7</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">3</span>,<span class="number">41</span>)</span><br><span class="line">barplot(H)</span><br></pre></td></tr></table></figure><h4 id="饼图"><a class="markdownIt-Anchor" href="#饼图"></a> 饼图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pie(x,labels,radius,main,col,clockwise)</span><br></pre></td></tr></table></figure><p>x包含饼图使用数值的向量labels用于给出切片的描述</p><p>radius表示饼图圆的半径main表示图表的标题</p><p>col表示调色板clockwise是指示片段是顺时针还是逆时针的逻辑值</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;r&#125;x &lt;- <span class="built_in">c</span>(<span class="number">21</span>,<span class="number">62</span>,<span class="number">10</span>,<span class="number">53</span>)</span><br><span class="line">labels &lt;- <span class="built_in">c</span>(<span class="string">&quot;London&quot;</span>,<span class="string">&quot;New York&quot;</span>,<span class="string">&quot;Singapore&quot;</span>,<span class="string">&quot;Mumbai&quot;</span>)</span><br><span class="line">pie(x,labels)</span><br></pre></td></tr></table></figure><h4 id="直方图"><a class="markdownIt-Anchor" href="#直方图"></a> 直方图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hist(v,main,col,<span class="keyword">break</span>)</span><br></pre></td></tr></table></figure><p>v数据mian标题col颜色break条宽度</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v &lt;- <span class="built_in">c</span>(<span class="number">9</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">8</span>,<span class="number">36</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">41</span>,<span class="number">31</span>,<span class="number">33</span>,<span class="number">19</span>)</span><br><span class="line">hist(v,xlab = <span class="string">&quot;Weight&quot;</span>,col = <span class="string">&quot;green&quot;</span>,boarder = <span class="string">&quot;red&quot;</span>,xlim = <span class="built_in">c</span>(<span class="number">0</span>,<span class="number">40</span>),yli = <span class="built_in">c</span>(<span class="number">0</span>,<span class="number">5</span>),breaks = <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="核密度图"><a class="markdownIt-Anchor" href="#核密度图"></a> 核密度图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(density(x))</span><br></pre></td></tr></table></figure><h4 id="箱线图"><a class="markdownIt-Anchor" href="#箱线图"></a> 箱线图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boxplot(x,data,notch)</span><br></pre></td></tr></table></figure><p>notch是逻辑值。设置TRUE来绘制凹口</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input &lt;- mtcars[,<span class="built_in">c</span>(<span class="string">&#x27;mpg&#x27;</span>,<span class="string">&#x27;cyl&#x27;</span>)]</span><br><span class="line">boxplot(mpg ~ cyl,data = mtcars,xlab = <span class="string">&quot;Number of Cylinders&quot;</span>,ylab = <span class="string">&quot;Miles Per Gallon&quot;</span>,main = <span class="string">&quot;Mileage Data&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="点图"><a class="markdownIt-Anchor" href="#点图"></a> 点图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotplot()</span><br></pre></td></tr></table></figure><p>矩阵或者数据框各列之间的二元图</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pairs()</span><br></pre></td></tr></table></figure><h4 id="正态分布图"><a class="markdownIt-Anchor" href="#正态分布图"></a> 正态分布图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qqnorm(ques3$month+ques3$variety,ques3$number)</span><br><span class="line">qqPlot()</span><br></pre></td></tr></table></figure><h4 id="茎叶图"><a class="markdownIt-Anchor" href="#茎叶图"></a> 茎叶图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stem()</span><br></pre></td></tr></table></figure><h4 id="布局"><a class="markdownIt-Anchor" href="#布局"></a> 布局</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">par()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据可视化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据可视化&quot;&gt;&lt;/a&gt; 数据可视化&lt;/h2&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="数据科学" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="R语言之数据可视化" scheme="https://wangyuhang-cmd.github.io/tags/R%E8%AF%AD%E8%A8%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python手动搭建http服务器</title>
    <link href="https://wangyuhang-cmd.github.io/2021/03/14/Python%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://wangyuhang-cmd.github.io/2021/03/14/Python%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-03-14T08:36:33.000Z</published>
    <updated>2021-08-13T08:43:43.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天来用Python手动搭建http服务器"><a href="#今天来用Python手动搭建http服务器" class="headerlink" title="今天来用Python手动搭建http服务器"></a>今天来用Python手动搭建http服务器</h3><p>预备知识：</p><blockquote><p>HTTP协议<br>Hypertext Transfer Protocol    超文本传输协议<br>协议的总用就是来传输超文本HTML（Hyper TextMarkupLanguage)</p><p>C/S架构    client-server<br>B/S架构    browser-server</p></blockquote><p><strong>http服务器的搭建</strong></p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#服务器都是TCP协议</span></span><br><span class="line">server_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">server_socket.bind((<span class="string">&#x27;10.0.42.248&#x27;</span>,<span class="number">9090</span>))</span><br><span class="line">server_socket.listen(<span class="number">128</span>)</span><br><span class="line"><span class="comment">#获取到的数据是一个元组</span></span><br><span class="line"><span class="comment">#第0个元素是客户端的socket链接，第一个是客户端的IP地址和端口号</span></span><br><span class="line">client_socket,client_addr = server_socket.accept()</span><br><span class="line"><span class="comment">#从客户端socket里获取数据</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>使用浏览器进行通信访问，发现由于没有设置响应头导致浏览器无法访问：</p><p><strong><img src="/2021/03/14/Python%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/1.png" class title="This is an test image"></strong></p><blockquote><p>可以正常得到的返回数据是一个请求头：GET / HTTP/1.1</p><p>Host: 10.0.42.248:9090</p><p>Connection: keep-alive</p><p>Cache-Control: max-age=0</p><p>Upgrade-Insecure-Requests: 1</p><p>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36</p><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9</p><p>Accept-Encoding: gzip, deflate</p><p>Accept-Language: zh-CN,zh;q=0.9</p></blockquote><p>浏览器发送请求头服务器发送响应头，因此需要设置响应头:</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#服务器都是TCP协议</span></span><br><span class="line">server_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">server_socket.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">9090</span>))</span><br><span class="line">server_socket.listen(<span class="number">128</span>)</span><br><span class="line"><span class="comment">#获取到的数据是一个元组</span></span><br><span class="line"><span class="comment">#第0个元素是客户端的socket链接，第一个是客户端的IP地址和端口号</span></span><br><span class="line">client_socket,client_addr = server_socket.accept()</span><br><span class="line"><span class="comment">#从客户端socket里获取数据</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment">#返回内容之前需要设置HTTP响应头</span></span><br><span class="line"><span class="comment">#HTTP/1.1 200 OK 是必须要写的项</span></span><br><span class="line"><span class="comment">#一行设置一个响应头，每行结束加上/n</span></span><br><span class="line">client_socket.send(<span class="string">&#x27;HTTP/1.1 200 OK\n&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="comment">#所有的响应头设置完成之后再换行</span></span><br><span class="line">client_socket.send(<span class="string">&#x27;\n&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="comment">#发送内容</span></span><br><span class="line">client_socket.send(<span class="string">&#x27;hello world&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong><img src="/2021/03/14/Python%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/2.png" class title="This is an test image"></strong></p><p><strong>HTTP请求</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#请求头</span><br><span class="line">#GET /favicon.ico HTTP/1.1    #GET 请求方式，有GET/POST/PUT/DELETE... /表示请求路径</span><br><span class="line">#Host: 10.0.42.248:9090     #请求的地址</span><br><span class="line">#Connection: keep-alive</span><br><span class="line">#User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36     #用户代理就像浏览器一样</span><br><span class="line">#Accept: image/avif,image/webp,image/apng,image/*,*/*;q=0.8</span><br><span class="line">#Referer: http://10.0.42.248:9090/</span><br><span class="line">#Accept-Encoding: gzip, deflate</span><br><span class="line">#Accept-Language: zh-CN,zh;q=0.9</span><br></pre></td></tr></table></figure><h4 id="根据不同的请求响应不同的内容"><a href="#根据不同的请求响应不同的内容" class="headerlink" title="根据不同的请求响应不同的内容"></a>根据不同的请求响应不同的内容</h4><p><strong><img src="/2021/03/14/Python%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/3.png" class title="This is an test image"></strong></p><p>附上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#服务器都是TCP协议</span></span><br><span class="line">server_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">server_socket.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">9090</span>))</span><br><span class="line">server_socket.listen(<span class="number">128</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#获取到的数据是一个元组</span></span><br><span class="line">    <span class="comment">#第0个元素是客户端的socket链接，第一个是客户端的IP地址和端口号</span></span><br><span class="line">    client_socket,client_addr = server_socket.accept()</span><br><span class="line">    <span class="comment">#从客户端socket里获取数据</span></span><br><span class="line">    data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;接收到&#123;&#125;的访问数据：\n&#x27;</span>.<span class="built_in">format</span>(client_addr[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#初始化请求头和响应头</span></span><br><span class="line">    response_head = <span class="string">&#x27;HTTP/1.1 200 OK\n&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    response_body = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">    <span class="comment">#在请求头内通过对字符串的处理方式可以得到不同的请求</span></span><br><span class="line">    first_line = (data.splitlines()[<span class="number">0</span>])</span><br><span class="line">    path = first_line.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        response_body = <span class="string">&#x27;You Are In Login Surface&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> path == <span class="string">&#x27;/register&#x27;</span>:</span><br><span class="line">        response_body = <span class="string">&#x27;You Are In Register Surface&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> path == <span class="string">&#x27;/&#x27;</span> :</span><br><span class="line">        response_body = <span class="string">&#x27;Your IP Is \n\n\n&#x27;</span> + <span class="built_in">repr</span>(client_addr[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        response_head = <span class="string">&#x27;HTTP/1.1 404 Not Found\n&#x27;</span></span><br><span class="line">        response_body = <span class="string">&#x27;404 NOT FOUND&#x27;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">#返回内容之前需要设置HTTP响应头</span></span><br><span class="line">        <span class="comment">#HTTP/1.1 200 OK 是必须要写的项</span></span><br><span class="line">        <span class="comment">#一行设置一个响应头，每行结束加上/n</span></span><br><span class="line">        <span class="comment">#client_socket.send(&#x27;HTTP/1.1 200 OK\n&#x27;.encode(&#x27;utf8&#x27;))</span></span><br><span class="line">        <span class="comment">#所有的响应头设置完成之后再换行</span></span><br><span class="line">        <span class="comment">#client_socket.send(&#x27;\n&#x27;.encode(&#x27;utf8&#x27;))</span></span><br><span class="line">    response_head += <span class="string">&#x27;content-type:text/html\n&#x27;</span></span><br><span class="line">    <span class="comment">#如果需要输入中文可以增加请求头&#x27;charset:utf8\n&#x27;</span></span><br><span class="line">    response_head += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    client_socket.send(response_head.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">   </span><br><span class="line">    <span class="comment">#发送内容,chrome浏览器默认编码是gbk</span></span><br><span class="line">    <span class="comment">#因此如果需要输入中文可以默认编码为gbk或者在请求头添加&#x27;charset:utf8\n&#x27;</span></span><br><span class="line">    client_socket.send(response_body.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="最后一步，就是面向对象的封装咯"><a href="#最后一步，就是面向对象的封装咯" class="headerlink" title="最后一步，就是面向对象的封装咯~;"></a>最后一步，就是面向对象的封装咯~;</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_server</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,IP,port</span>):</span></span><br><span class="line">        self.socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        self.IP = IP</span><br><span class="line">        self.port = port</span><br><span class="line">        self.socket.bind((IP,port))</span><br><span class="line">        self.socket.listen(<span class="number">128</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_server</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket,client_addr = self.socket.accept()</span><br><span class="line">            data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;接收到&#123;&#125;的访问数据&#x27;</span>.<span class="built_in">format</span>(client_addr[<span class="number">0</span>]))</span><br><span class="line">            response_head = <span class="string">&#x27;HTTP/1.1 200 OK\n&#x27;</span></span><br><span class="line">            path = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">            response_body = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">            first_line = (data.splitlines()[<span class="number">0</span>])</span><br><span class="line">            path = first_line.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">                response_body = <span class="string">&#x27;You Are In Login Surface&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> path == <span class="string">&#x27;/register&#x27;</span>:</span><br><span class="line">                response_body = <span class="string">&#x27;You Are In Register Surface&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> path == <span class="string">&#x27;/&#x27;</span> :</span><br><span class="line">                response_body = <span class="string">&#x27;Your IP Is \n\n\n&#x27;</span> + <span class="built_in">repr</span>(client_addr[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                response_head = <span class="string">&#x27;HTTP/1.1 404 Not Found\n&#x27;</span></span><br><span class="line">                response_body = <span class="string">&#x27;404 NOT FOUND&#x27;</span></span><br><span class="line">      </span><br><span class="line">            response_head += <span class="string">&#x27;content-type:text/html\n&#x27;</span></span><br><span class="line">            response_head += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">           </span><br><span class="line">            client_socket.send(response_head.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            client_socket.send(response_body.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">my_server = My_server(<span class="string">&#x27;10.0.42.248&#x27;</span>,<span class="number">9090</span>)</span><br><span class="line">my_server.run_server()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;今天来用Python手动搭建http服务器&quot;&gt;&lt;a href=&quot;#今天来用Python手动搭建http服务器&quot; class=&quot;headerlink&quot; title=&quot;今天来用Python手动搭建http服务器&quot;&gt;&lt;/a&gt;今天来用Python手动搭建http服务器&lt;/</summary>
      
    
    
    
    <category term="python_网络编程" scheme="https://wangyuhang-cmd.github.io/categories/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Python_搭建http服务器" scheme="https://wangyuhang-cmd.github.io/tags/Python-%E6%90%AD%E5%BB%BAhttp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>python_网络编程</title>
    <link href="https://wangyuhang-cmd.github.io/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://wangyuhang-cmd.github.io/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-03-13T08:19:59.000Z</published>
    <updated>2021-08-13T08:34:31.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天来使用python做一个小型在线聊天程序"><a class="markdownIt-Anchor" href="#今天来使用python做一个小型在线聊天程序"></a> 今天来使用python做一个小型在线聊天程序</h3><h5 id="预备知识"><a class="markdownIt-Anchor" href="#预备知识"></a> 预备知识：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网络通信</span><br><span class="line">网线一共八根，白绿白蓝白橙白棕，目前只使用四根，<span class="number">1246</span>根</span><br><span class="line"><span class="number">568</span>A/B线序</span><br><span class="line">ISP:网络服务运营商</span><br><span class="line">IP地址</span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="number">-255.255</span><span class="number">.255</span><span class="number">.255</span></span><br></pre></td></tr></table></figure><p>我的IP地址：222.94.33.63（动态，每次上网会改变）</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1.png" class title="This is an test image"></strong></p><p>不同电脑不同软件之间通信用端口区分，同一电脑用PID区分</p><h4 id="socket简介"><a class="markdownIt-Anchor" href="#socket简介"></a> SOCKET简介</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.socket(AddressFamily,<span class="type">Type</span>)</span><br><span class="line"><span class="comment">#AF 可选： AF_INET（不同主机）    AF_UNIX（同一主机）</span></span><br><span class="line"><span class="comment">#Type 套接字    SOCK_STREAM（TCP）    SOCK_DGRAM（UDP）</span></span><br></pre></td></tr></table></figure><p>步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建socket对象</span></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment">#data发送数据，是二进制数据  address一个元组(IP地址,端口号)</span></span><br><span class="line">s.bind((<span class="string">&#x27;192.168.40.1&#x27;</span>,<span class="number">9090</span>))</span><br><span class="line">s.sendto(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>),(<span class="string">&#x27;192.168.40.1&#x27;</span>,<span class="number">9090</span>))</span><br><span class="line"><span class="comment">#data为二进制数据，addr[0]是IP地址，addr[1]是端口号</span></span><br><span class="line">data,addr = s.recvfrom(<span class="number">1024</span>）</span><br><span class="line"><span class="comment">#关闭通信</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><blockquote><p><strong>端口号0-65536，0-1024系统在用</strong></p><p><strong>netstat -an按回车显示所有已经占用的端口号</strong></p><p><strong>netstat -ano|findstr 端口号来看是否端口号被占用</strong></p><p>在发送完消息之后需要对端口进行监听就能收到消息</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"><span class="comment">#绑定端口号和IP地址</span></span><br><span class="line"></span><br><span class="line">content = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="我的实验"><a class="markdownIt-Anchor" href="#我的实验"></a> 我的实验：</h4><p>接收方：我的电脑</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/2.png" class title="This is an test image"></strong></p><p>发送方：我的Ubuntu虚拟机</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/3.png" class title="This is an test image"></strong></p><p>效果：</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/4.png" class title="This is an test image"></strong></p><p>TCP  面向连接的协议   区分服务器与客户端</p><p><strong>服务器要用bind绑定IP和端口，设置监听listen(n),n表示可排队的最大值，接收信息使用accept，取出数据需要用recv()方的decode(编码)</strong></p><p>服务器端：</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5.png" class title="This is an test image"></strong></p><p><strong>客户端要用connect方法连接到服务器，使用send()方法发送数据的encode(编码)。</strong></p><p>客户端：</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/6.png" class title="This is an test image"></strong></p><p>输出内容是一个双元素元组，第0个是客户端的socket，第一个元素是客户端的ip地址和端口号,第二个元素是客户端的实际发送地址和端口号</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;接收到了<span class="number">192.168</span>.<span class="number">43.207</span>客户端<span class="number">11979</span>端口号发送的数据，内容是&lt;socket.socket fd=<span class="number">736</span>, family=AddressFamily.AF_INET, <span class="built_in">type</span>=SocketKind.SOCK_STREAM, proto=<span class="number">0</span>, laddr=(<span class="string">&#x27;192.168.43.207&#x27;</span>, <span class="number">9090</span>), raddr=(<span class="string">&#x27;192.168.43.207&#x27;</span>, <span class="number">11979</span>)&gt;</span><br></pre></td></tr></table></figure><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7.png" class title="This is an test image"></strong></p><p>文件下载：</p><p>Ubuntu作为客户端，Windows作为服务器，客户端从服务器下载文件</p><p>Windows服务器端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">server_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">server_socket.bind((<span class="string">&#x27;10.0.61.146&#x27;</span>,<span class="number">9090</span>))</span><br><span class="line">server_socket.listen(<span class="number">128</span>)</span><br><span class="line">client_socket,client_addr = server_socket.accept()</span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;接收到了来自&#123;&#125;地址&#123;&#125;端口的数据，内容是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(client_addr[<span class="number">0</span>],client_addr[<span class="number">1</span>],data))</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;读取文件返回给客户端&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(data,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            content = file.read()</span><br><span class="line">            client_socket.send(content.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件不存在&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Ubuntu客户端：</p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8.png" class title="This is an test image"></strong></p><h4 id="最终文件也是下载成功了~"><a class="markdownIt-Anchor" href="#最终文件也是下载成功了~"></a> 最终文件也是下载成功了~</h4><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/9.png" class title="This is an test image"></strong></p><p><strong><img src="/2021/03/13/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/10.png" class title="This is an test image"></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;今天来使用python做一个小型在线聊天程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#今天来使用python做一个小型在线聊天程序&quot;&gt;&lt;/a&gt; 今天来使用python做一个小型在线聊天程序&lt;/h3&gt;
&lt;h5 id=&quot;预备知识&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="python_网络编程" scheme="https://wangyuhang-cmd.github.io/categories/python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Python_socket" scheme="https://wangyuhang-cmd.github.io/tags/Python-socket/"/>
    
  </entry>
  
  <entry>
    <title>Git教程_1</title>
    <link href="https://wangyuhang-cmd.github.io/2021/03/11/Git%E6%95%99%E7%A8%8B-1/"/>
    <id>https://wangyuhang-cmd.github.io/2021/03/11/Git%E6%95%99%E7%A8%8B-1/</id>
    <published>2021-03-11T15:40:20.000Z</published>
    <updated>2021-08-11T15:57:20.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git快速上手"><a class="markdownIt-Anchor" href="#git快速上手"></a> Git快速上手</h2><h6 id="git是一个分布式的版本控制系统类似于多人可共同修改文件的一个平台"><a class="markdownIt-Anchor" href="#git是一个分布式的版本控制系统类似于多人可共同修改文件的一个平台"></a> Git是一个分布式的版本控制系统，类似于多人可共同修改文件的一个平台</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Centos上下载源文件后解压，进入文件夹</span></span><br><span class="line">sudo su</span><br><span class="line">./config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>即安装成功</p><h4 id="配置git"><a class="markdownIt-Anchor" href="#配置git"></a> 配置Git</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个文件夹来作为Git仓库</span></span><br><span class="line">mkdir my_git</span><br><span class="line"><span class="built_in">cd</span> my_git</span><br><span class="line"><span class="comment">#将此目录变成一个Git仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="使用git"><a class="markdownIt-Anchor" href="#使用git"></a> 使用Git</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将在创建好的git目录下的文件添加至仓库</span></span><br><span class="line">git add &lt;filename1&gt; </span><br><span class="line">git add &lt;filename2&gt;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#将此文件提交至仓库</span></span><br><span class="line">git commit <span class="literal">-m</span> “&lt;remarks&gt;”</span><br><span class="line"><span class="comment">#再次对已提交仓库的文件进行修改后提交命令：</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><blockquote><p>$ git status<br>On branch master<br>Changes not staged for commit:<br>(use “git add <file>…” to update what will be committed)<br>(use “git checkout – <file>…” to discard changes in working directory)</file></file></p><p>modified: readme.txt</p><p>no changes added to commit (use “git add” and/or “git commit -a”)</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看修改内容</span></span><br><span class="line">git <span class="built_in">diff</span> &lt;filename&gt;</span><br><span class="line"><span class="comment">#确认好了要提交后重复一开始的添加提交步骤</span></span><br><span class="line"><span class="comment">#添加 git add #提交 git commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每一次commit就相当于保存了一张快照</span></span><br><span class="line"><span class="comment">#查看之间所有修改的快照片</span></span><br><span class="line">git log -[<span class="type">pretty</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;git快速上手&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git快速上手&quot;&gt;&lt;/a&gt; Git快速上手&lt;/h2&gt;
&lt;h6 id=&quot;git是一个分布式的版本控制系统类似于多人可共同修改文件的一个平台&quot;&gt;&lt;a class=&quot;markdow</summary>
      
    
    
    
    <category term="操作系统使用" scheme="https://wangyuhang-cmd.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Git" scheme="https://wangyuhang-cmd.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记_常用命令</title>
    <link href="https://wangyuhang-cmd.github.io/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://wangyuhang-cmd.github.io/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-02-11T15:00:59.000Z</published>
    <updated>2021-08-11T15:57:29.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/1.png" class title="This is an test image"></strong></p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/2.png" class title="This is an test image"></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">linux终端命令格式</span></span><br><span class="line">command [-options] [parameter]</span><br><span class="line"><span class="meta">#</span><span class="bash">[]表示可有可无，<span class="built_in">command</span>是命令名称，-options是选项，parameter是传给的命令，可以一个或者多个</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command --help               #显示command命令的帮助信息</span><br><span class="line">man command            #查询command命令的使用手册 </span><br></pre></td></tr></table></figure><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/3.png" class title="This is an test image"></strong></p><h2 id="ls"><a class="markdownIt-Anchor" href="#ls"></a> ls</h2><p>隐藏文件：通过ls -a查询，以.开头的文件位隐藏文件</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/4.png" class title="This is an test image"></strong></p><p>ls通配符的使用</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/5.png" class title="This is an test image"></strong></p><p>用途：需要把某一目录的文件修改时，文件太多如何快速定位。</p><h2 id="cd命令扩展"><a class="markdownIt-Anchor" href="#cd命令扩展"></a> cd命令扩展</h2><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/6.png" class title="This is an test image"></strong></p><p>相对路径： 相对于当前目录而言的路径，前面没有-和~绝对路径：通过cd给</p><p>绝对路径参数都能进入，即递归型地址</p><h3 id="创建和删除操作"><a class="markdownIt-Anchor" href="#创建和删除操作"></a> 创建和删除操作</h3><p>1.touch如果文件不存，则创建文件如果文件存在，则修改文件的末次修改日期</p><p>2.mkdir创建一个新目录</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/7.png" class title="This is an test image"></strong>   （递归即一层一层创建）</p><p>3.rm删除文件或者目录（注意文件不可恢复！）</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/8.png" class title="This is an test image"></strong></p><h3 id="查看文件内容"><a class="markdownIt-Anchor" href="#查看文件内容"></a> 查看文件内容</h3><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/9.png" class title="This is an test image"></strong></p><p>cat适合显示较少内容较少文件，more适合内容较多文件</p><h4 id="cat命令"><a class="markdownIt-Anchor" href="#cat命令"></a> cat命令</h4><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/10.png" class title="This is an test image"></strong></p><h4 id="more命令"><a class="markdownIt-Anchor" href="#more命令"></a> more命令</h4><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/11.png" class title="This is an test image"></strong></p><h4 id="grep搜索文本文件内容"><a class="markdownIt-Anchor" href="#grep搜索文本文件内容"></a> grep搜索文本文件内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 参数 内容 文本</span><br></pre></td></tr></table></figure><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/12.png" class title="This is an test image"></strong></p><p>当中间有空格时，应该用双引号</p><p>grep模式查找（正则表达式）</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/13.png" class title="This is an test image"></strong></p><p>首^尾$</p><h4 id="拷贝和移动文件"><a class="markdownIt-Anchor" href="#拷贝和移动文件"></a> 拷贝和移动文件</h4><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/14.png" class title="This is an test image"></strong></p><h4 id="tree命令"><a class="markdownIt-Anchor" href="#tree命令"></a> tree命令</h4><p>一树状图形式列出文件</p><h4 id="cp命令"><a class="markdownIt-Anchor" href="#cp命令"></a> cp命令</h4><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/15.png" class title="This is an test image"></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/表示家目录.</span><br><span class="line"></span><br><span class="line">/表示当前文件夹</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mv命令"><a class="markdownIt-Anchor" href="#mv命令"></a> mv命令</h4><p>mv用来移动文件或者目录，也可以给文件和目录重命名</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/16.png" class title="This is an test image"></strong></p><p>重命名即在同一目录下进行移动</p><h4 id="echo命令"><a class="markdownIt-Anchor" href="#echo命令"></a> echo命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo [文字内容]</span><br></pre></td></tr></table></figure><p>会把传递给它的文字内容在终端中重新显示一遍</p><h4 id="重定向和"><a class="markdownIt-Anchor" href="#重定向和"></a> 重定向&gt;和&gt;&gt;</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">表示输出，会覆盖文件的原有内容</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;表示追加，会添加到文件中<span class="built_in">echo</span>一般和重定向一起使用</span></span><br></pre></td></tr></table></figure><h4 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道 : |</h4><p>Linux允许一个米杠零的输出通过管道作为另一个命令的输入</p><p>常用的管道命令有more和grep</p><h4 id="查询系统信息"><a class="markdownIt-Anchor" href="#查询系统信息"></a> 查询系统信息</h4><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/17.png" class title="This is an test image"></strong></p><p>1.时间和日期</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/18.png" class title="This is an test image"></strong></p><p>2.磁盘信息</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/19.png" class title="This is an test image"></strong></p><p>选项**<img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/20.png" class title="This is an test image">**</p><p>进程信息：</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/21.png" class title="This is an test image"></strong></p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/22.png" class title="This is an test image"></strong></p><p>一般使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps autop</span><br></pre></td></tr></table></figure><p>可以显示类似于Windows的任务管理器，按q退出top程序</p><h4 id="查找文件"><a class="markdownIt-Anchor" href="#查找文件"></a> 查找文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which []</span><br><span class="line"><span class="meta">#</span><span class="bash">可以查看文件所在目录 然后配合ls共同使用</span></span><br></pre></td></tr></table></figure><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/23.png" class title="This is an test image"></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find []</span><br></pre></td></tr></table></figure><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/24.png" class title="This is an test image"></strong></p><p>软链接（类似于快捷方式）</p><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/25.png" class title="This is an test image"></strong></p><p>-s不可少！而且尽量选择绝对路径进行描述</p><p>当没有-s时就是硬链接（文件的别名）</p><p>补充：Linux中，文件名和文件数据是分开存储的，只有当文件的文件名全部被删除后，文件才会被删除</p><h4 id="打包压缩"><a class="markdownIt-Anchor" href="#打包压缩"></a> 打包压缩</h4><p>Windows常用rar</p><p>Mac常使用zip</p><p>Linux常使用tar.gz打包tar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打包文件</span></span><br><span class="line">tar -cvf [.tar] [path]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解包文件</span></span><br><span class="line">tar -xvf [.tar]</span><br></pre></td></tr></table></figure><p><strong><img src="/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/26.png" class title="This is an test image"></strong></p><p>注意：f选项必须放在最后，其余随意</p><h4 id="安装文件"><a class="markdownIt-Anchor" href="#安装文件"></a> 安装文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装软件</span></span><br><span class="line">sudo apt install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载软件</span></span><br><span class="line">sudo apt remove</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">更新已安装的包</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用命令&quot;&gt;&lt;/a&gt; 常用命令&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/2021/02/11/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%</summary>
      
    
    
    
    <category term="操作系统使用" scheme="https://wangyuhang-cmd.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Linux" scheme="https://wangyuhang-cmd.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
