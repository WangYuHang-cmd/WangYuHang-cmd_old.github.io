<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perf</title>
  
  
  <link href="https://wangyuhang-cmd.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangyuhang-cmd.github.io/"/>
  <updated>2023-03-16T11:35:23.685Z</updated>
  <id>https://wangyuhang-cmd.github.io/</id>
  
  <author>
    <name>Perf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程编程</title>
    <link href="https://wangyuhang-cmd.github.io/2023/03/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>https://wangyuhang-cmd.github.io/2023/03/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-16T07:37:44.000Z</published>
    <updated>2023-03-16T11:35:23.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多线程编程"><a class="markdownIt-Anchor" href="#多线程编程"></a> 多线程编程</h2><p><img src="/2023/03/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/C:%5CUsers%5CHenry%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230315184531017.png" alt="image-20230315184531017"></p><ul><li>C语言处理时间</li></ul><p><code>long t0 = time(NULL);</code> 获取从1970年1月1日到当前经过的秒数。</p><p><code>sleep(3);</code>休眠3秒</p><p><code>long t1 = t0 + 3;</code> t0时间的3秒后</p><p><code>usleep(3000000);</code> 休眠3000000微秒</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> t0 = std::chrono::steady_clock::<span class="built_in">now</span>(); <span class="comment">//获取当前时间点</span></span><br><span class="line">    <span class="keyword">auto</span> t1 = t0 + std::chrono::<span class="built_in">seconds</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">auto</span> dt = t1 - t0; <span class="comment">//获取两个时间点的时间差</span></span><br><span class="line">    std::<span class="keyword">int64_t</span> sec = std::chrono::duration_cast&lt;std::chrono::seconds&gt;(dt).<span class="built_in">count</span>(); <span class="comment">//时间差的秒数</span></span><br><span class="line">    std :: cout &lt;&lt; <span class="string">&quot;time sep=&quot;</span> &lt;&lt; sec &lt;&lt; <span class="string">&quot;ms\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>time sep=30ms</code></p><ul><li>跨平台的sleep:<ul><li><code>std::this_thread::sleep_for(std::chrono::milliseconds(400));</code></li><li>当前线程休眠400ms</li></ul></li></ul><h4 id="多线程"><a class="markdownIt-Anchor" href="#多线程"></a> 多线程</h4><ul><li>现代C++中的多线程：<code>std::thread</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">([&amp;]&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        download(<span class="string">&quot;hello.zip&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    <span class="built_in">interact</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于<code>std::thread</code>的实现背后是基于<code>pthreads</code>的，而且CMake提供了Threads包：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cpptest LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(cpptest main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Threads REQUIRED)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(cpptest PUBLIC Threads::Threads)</span><br></pre></td></tr></table></figure><ul><li>主线程等待子线程结束<code>t1.join()</code>：会等待t1进程结束</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">download</span><span class="params">(std::string file)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Downloading &quot;</span> &lt;&lt; file </span><br><span class="line">                  &lt;&lt; <span class="string">&quot; (&quot;</span> &lt;&lt; i*<span class="number">10</span> &lt;&lt; <span class="string">&quot;%)...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">300</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Download complete: &quot;</span> &lt;&lt; file &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interact</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Please enter your name: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cin &gt;&gt; name;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hi, &quot;</span> &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">([&amp;]&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        download(<span class="string">&quot;hello.zip&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    <span class="built_in">interact</span>();</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Waiting for child thread ... &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Child thread exited!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Please enter your name: Downloading hello.zip (</span><br><span class="line"><span class="number">0</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">10</span>%)...</span><br><span class="line">wyDownloading hello.zip (<span class="number">20</span>%)...</span><br><span class="line"><span class="built_in">h</span></span><br><span class="line">Hi, wyh</span><br><span class="line">Waiting <span class="keyword">for</span> child thread ...</span><br><span class="line">Downloading hello.zip (<span class="number">30</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">40</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">50</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">60</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">70</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">80</span>%)...</span><br><span class="line">Downloading hello.zip (<span class="number">90</span>%)...</span><br><span class="line">Download complete: hello.zip</span><br><span class="line">Child thread exited!</span><br></pre></td></tr></table></figure><ul><li><p><code>std::thread</code>的析构函数会销毁线程</p><ul><li>遵循三五法则，<code>std::thread</code>同样遵循RAII思想和三五法则，自定义了析构函数，删除了拷贝构造/赋值函数，保留了移动构造/赋值函数</li><li>所以会出现一个函数中某个线程在运行时，函数结束，线程调用其析构函数，会导致正在运行的线程出错</li></ul></li><li><p><code>thread.detach()</code>:分离线程</p><ul><li>线程的声明周期不再由当前<code>std::thread</code>管理，而是在线程退出以后自动销毁</li><li>但是进程结束后线程还是会自动退出的</li></ul></li><li><p>另外一种方法：在某个函数创建线程后用<code>std::move()</code>提交到全局变量<code>vector&lt;std::thread&gt;</code>中，然后在进程结束之前每个都<code>join()</code>一遍。</p></li><li><p>还可以使用单例模式：</p><ul><li><p><strong></strong></p><p><img src="/2023/03/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/E:%5Chexoblog%5Cblog%5Csource_posts%5Ctypora_image%5Cimage-20230316094158213.png" alt="image-20230316094158213"></p></li></ul></li></ul><h4 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h4><p><code>std::async</code>接受一个带返回值的lambda函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    std::function&lt;<span class="keyword">int</span>&gt; fret = std::<span class="built_in">sync</span>([&amp;] &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">download</span>(<span class="string">&quot;hello.zip&quot;</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自身返回一个<code>std::future</code>对象</p><ul><li>lambda的函数体在另一个线程里执行</li><li>最后调用<code>furt.get()</code>方法。如果此时线程没有运行完，会等待线程运行完后获取其返回值。</li></ul><p>显示的等待:<code>futr.wait();</code></p><p><code>std::wait_for(std::chrono::milliseconds(1000));</code></p><ul><li><code>std::mutex</code>互斥锁</li></ul><p><code>std::lock_guard</code> :符合RAII思想的上锁和解锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">    std::mutex mtx;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span> <span class="params">([&amp;]&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;++i)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            std::lock_guard grd(mtx);</span></span></span><br><span class="line"><span class="params"><span class="function">            arr.push_back(i);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">([&amp;]&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;++i)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            std::lock_guard grd(mtx);</span></span></span><br><span class="line"><span class="params"><span class="function">            arr.push_back(i);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>析构函数会调用<code>grd.unlock();</code></li></ul><p>一个自由度更高的锁<code>sdt::unique_lock()</code>接受一个参数<code>std::defer_lock</code>,指定了这个参数之后不会在构造函数中调用<code>mtx.lock()</code>。需要之后自己手动进行<code>grd.lock()</code></p><ul><li><code>mtx.try_lock()</code></li></ul><p>返回<code>true</code>表示上锁成功，否则上锁失败</p><ul><li><code>mtx.try_lock_for(std::chrono::milliseconds());</code></li></ul><p>尝试在一个时间内等待是否上锁成功</p><ul><li><p>在之前已经上过锁的情况下：<code>mtx.lock()</code>可以使用如下参数：<code>std::unique_lock grd(mtx, std::adopt_lock);</code></p></li><li><p><code>std::unique_lock grd(mtx, std::try_to_lock);</code></p></li><li><p>任何具有<code>lock()</code>和<code>unlock()</code>的类都可以作为<code>std::lock_guard</code>类型的参数，例如<code>std::lock_guard grd2(grd1);</code>可以这样嵌套</p><blockquote><p>python中的鸭子类型，C++称为concept</p></blockquote></li></ul><h4 id="死锁解决"><a class="markdownIt-Anchor" href="#死锁解决"></a> 死锁解决</h4><p>AB和BA的上锁会导致死锁问题，C++提供<code>std::lock(mtx1, mtx2)</code>来避免死锁问题。</p><ul><li><code>std::lock</code>的RAII版本<code>std::scoped_lock</code></li></ul><p>同一个线程重复调用<code>lock()</code>也会导致死锁问题。</p><ul><li>解决方法：<code>std::recursive_mutex</code>，会自动进行识别，如果是同一个线程对这个锁进行重复上锁，会计数器+1，解锁后计数器-1.但是会有性能损失。</li></ul><h4 id="数据结构的多线程安全"><a class="markdownIt-Anchor" href="#数据结构的多线程安全"></a> 数据结构的多线程安全</h4><h6 id="互斥量"><a class="markdownIt-Anchor" href="#互斥量"></a> 互斥量</h6><ul><li><code>vector&lt;int&gt;</code>不是多线程安全的容器</li><li>因此需要封装一个多线程安全的<code>MyVector</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyVector</span>&#123;</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; m_arr;</span><br><span class="line">    <span class="keyword">mutable</span> std::mutex m_mtx;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        m_mtx.<span class="built_in">lock</span>();</span><br><span class="line">        m_arr.<span class="built_in">push_back</span>(x);</span><br><span class="line">        m_mtx.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        m_mtx.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">size_t</span> res = m_arr.<span class="built_in">size</span>();</span><br><span class="line">        m_mtx.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyVector arr;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">([&amp;]()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;++i)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            arr.push_back(i);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">([&amp;]()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;++i)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            arr.push_back(i+<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    std::cout&lt;&lt;arr.<span class="built_in">size</span>() &lt;&lt;std::endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如上为代理模式（设计模式）</p></li><li><p>由于size()函数为了与vector保持一致使用了const，但是函数内对锁的内容有修改，因此需要在mtx之前加入<code>mutable</code></p></li><li><p><code>std::shared_mutex</code>读写锁</p><ul><li>对于读操作，使用<code>mtx.lock_shared()</code>，<code>mtx.unlock_shared()</code></li><li>对于写操作，使用<code>mtx.lock()</code>，<code>mtx.unlock()</code></li></ul></li><li><p>符合RAII的<code>lock_shared()</code></p><ul><li><code>std::unique_lock</code>针对<code>lock()</code></li><li><code>std::shared_lock</code>针对<code>lock_shared()</code><ul><li><code>shared_lock()</code>支持参数<code>defer_lock</code>和<code>owns_lock()</code></li></ul></li></ul></li><li><p>符合RAII思想的<code>访问者模式</code></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyVector</span>&#123;</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; m_arr;</span><br><span class="line">    std::mutex m_mtx;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Accessor</span>&#123;</span></span><br><span class="line">        MyVector &amp;m_that;</span><br><span class="line">        std::unique_lock&lt;std::mutex&gt; m_guard;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Accessor</span>(MyVector &amp;that) :</span><br><span class="line">            <span class="built_in">m_that</span>(that),<span class="built_in">m_guard</span>(that.m_mtx) &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">void</span>)(m_that.m_arr.<span class="built_in">push_back</span>(x));</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="function"><span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> m_that.m_arr.<span class="built_in">size</span>();</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Accessor <span class="title">access</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;*<span class="keyword">this</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyVector arr;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">([&amp;]()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">auto</span> tmp = arr.access();</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;++i)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            tmp.push_back(i);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">([&amp;]()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">auto</span> tmp = arr.access();</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;++i)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            tmp.push_back(i+<span class="number">1000</span>);    </span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">    std::cout&lt;&lt;arr.<span class="built_in">access</span>().<span class="built_in">size</span>() &lt;&lt;std::endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分离存储类和访问类，通过存储类的访问类进行访问。</li></ul><h6 id="条件变量"><a class="markdownIt-Anchor" href="#条件变量"></a> 条件变量</h6><ul><li>等待被唤醒</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::condition_variable cv;</span><br><span class="line">    std::mutex mtx;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">([&amp;]&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        std::unique_lock lck(mtx);</span></span></span><br><span class="line"><span class="params"><span class="function">        cv.wait(lck);</span></span></span><br><span class="line"><span class="params"><span class="function">        std::cout&lt;&lt;<span class="string">&quot;t1 is awake&quot;</span>&lt;&lt;std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span>; </span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">400</span>));</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;notifying&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    cv.<span class="built_in">notify_one</span>();</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>notify_all()</code>唤醒全部在等待的锁</li></ul><h4 id="原子操作"><a class="markdownIt-Anchor" href="#原子操作"></a> 原子操作</h4><p>避免多线程使用同一个变量导致的错误：</p><ul><li>上锁：影响效率</li><li><code>std::atomic&lt;T&gt;</code>,对其的操作<code>+=,-= &amp;= |= *= /=</code>会被编译器转换为专门的指令。</li></ul><p><code>std::atomic&lt;int&gt; counter</code></p><ul><li><code>counter.store(0);</code> 赋值的原子操作</li><li><code>counter.fetch_add(1);</code> <code>+=</code>的原子操作，而且还能返回旧值</li><li><code>counter.load();</code>获取值的原子操作；</li><li><code>counter.exchange(x);</code> 读取的同时写入，返回的是旧值</li><li><code>counter.exchange_strong(old, value);</code>读取原子变量的值和old进行比较，如果不相等将old值写入变量，否则将value值写入变量</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多线程编程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多线程编程&quot;&gt;&lt;/a&gt; 多线程编程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/2023/03/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A</summary>
      
    
    
    
    
    <category term="C++" scheme="https://wangyuhang-cmd.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c++模板元编程</title>
    <link href="https://wangyuhang-cmd.github.io/2023/03/13/c-%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    <id>https://wangyuhang-cmd.github.io/2023/03/13/c-%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-13T04:32:20.000Z</published>
    <updated>2023-03-13T04:32:39.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板元编程与函数式编程"><a href="#模板元编程与函数式编程" class="headerlink" title="模板元编程与函数式编程"></a>模板元编程与函数式编程</h2><h4 id="模板元编程"><a href="#模板元编程" class="headerlink" title="模板元编程"></a>模板元编程</h4><ul><li>模板函数：默认参数类型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">two</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_time</span><span class="params">(std::string s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        std::cout&lt;&lt;s&lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>编译器优化案例</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">bool</span> debug)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">res += i;</span><br><span class="line"><span class="keyword">if</span>(debug)</span><br><span class="line">std::cout&lt;&lt;i&lt;&lt;<span class="string">&quot;-th: &quot;</span>&lt;&lt;res&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> debug&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">res += i;</span><br><span class="line"><span class="keyword">if</span>(debug)</span><br><span class="line">std::cout&lt;&lt;i&lt;&lt;<span class="string">&quot;-th: &quot;</span>&lt;&lt;res&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">std::cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">auto</span> st=<span class="built_in">clock</span>();</span><br><span class="line">std::cout&lt;&lt;<span class="built_in">sum</span>(n ,<span class="literal">true</span>)&lt;&lt;std::endl;</span><br><span class="line">std::cout&lt;&lt;<span class="built_in">sum</span>(n,<span class="literal">false</span>)&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">auto</span> ed=<span class="built_in">clock</span>();</span><br><span class="line">std::cout&lt;&lt;ed-st&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">st=ed;</span><br><span class="line">std::cout&lt;&lt;sum&lt;<span class="literal">true</span>&gt;(n)&lt;&lt;std::endl;</span><br><span class="line">std::cout&lt;&lt;sum&lt;<span class="literal">false</span>&gt;(n)&lt;&lt;std::endl;</span><br><span class="line">ed=<span class="built_in">clock</span>();</span><br><span class="line">std::cout&lt;&lt;ed-st&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种sum每次循环的时候都需要做判断，对于性能有影响，而且编译器不好优化。后者(第二种sum)在编译器看来就是 <code>if(false)</code>，显然会被自动优化掉。</p><blockquote><p>更进一步，可以用C++17的<code>if constexpr</code>保证编译器确定的分支。</p></blockquote><ul><li>模板的惰性：延迟编译</li></ul><p>假如有一个函数(有可能是错误的)，暂时未被调用，我们可以采用模板的惰性，只要没有被调用就不会实例化，因此可以加快编译速度。</p><ul><li>懒汉单例模式</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> &amp;<span class="title">product_table</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> std::map&lt;string,<span class="keyword">int</span>&gt; instance;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以通过<code>decltype</code>获取表达式的类型，<code>typeid</code>只有在有虚函数的时候才会起作用。</li></ul><p>对于我想定义一个和之前定义过的函数一样的变量/函数，可以使用</p><p><code>declgtype(auto) p=func();</code></p><p><code>decltype(func()) p=func();</code></p><ul><li><code>using</code><ul><li><code>typedef std::vector&lt;int&gt; VecInt;</code>和<code>using VecInt=std::vector&lt;int&gt;;</code>等价</li><li><code>typedef int (*PFunc)(int);</code>和<code>using PFunc=int(*)(int)</code>等价</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T1,class T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(std::vector&lt;T1&gt; <span class="keyword">const</span>&amp; a, std::vector&lt;T2&gt; <span class="keyword">const</span>&amp; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">using</span> T0=<span class="keyword">decltype</span>(T1&#123;&#125;+T2&#123;&#125;);</span><br><span class="line">std::vector&lt;T0&gt; vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> _=<span class="number">0</span>;_&lt;a.<span class="built_in">size</span>();++_)&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(vec[_]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>type_traits</code></li></ul><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><blockquote><p>函数也可以作为另一个函数的参数</p></blockquote><ul><li>在lambda表达式中<code>[&amp;]</code>用于捕获同一作用域中的变量。(闭包)此外还可以修改同一作用域下的变量</li><li>但是可能会出现如下问题：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) std::cout&lt;&lt;#x&lt;&lt;<span class="meta-string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;std::endl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class Func&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_twice</span><span class="params">(Func <span class="keyword">const</span>&amp; func)</span></span>&#123;</span><br><span class="line"><span class="built_in">debug</span>(<span class="built_in">func</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">debug</span>(<span class="built_in">func</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">debug</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Func));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">make_twice</span><span class="params">(<span class="keyword">int</span> fac)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> [&amp;](<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">return</span> n*fac;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> twice = <span class="built_in">make_twice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">call_twice</span>(twice);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func(0): 0</span><br><span class="line">func(1): 6422040</span><br><span class="line">sizeof(Func): 8</span><br></pre></td></tr></table></figure><p>这是因为<code>make_twice</code>函数在调用之后会对fac进行销毁，但是之前传入的是函数的引用，所在在fac销毁之后其指针会随意指向某处，导致输出很怪。</p><p>小彭老师的建议是对make_twice()函数进行修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">make_twice</span><span class="params">(<span class="keyword">int</span> fac)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> [=](<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">return</span> n*fac;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样输出就没有问题了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">func</span>(<span class="number">0</span>): <span class="number">0</span></span><br><span class="line"><span class="built_in">func</span>(<span class="number">1</span>): <span class="number">2</span></span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(Func): <span class="number">4</span></span><br></pre></td></tr></table></figure><p>此时可以把fac作为一个值存下来，而不是存下fac的指针。</p><p><code>因此，[&amp;]需要保证lambda对象的声明周期不超过其捕获的所有引用的声明周期</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) std::cout&lt;&lt;#x&lt;&lt;<span class="meta-string">&quot;: &quot;</span>&lt;&lt;x&lt;&lt;std::endl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template&lt;class Func&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_twice</span><span class="params">(std::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; <span class="keyword">const</span>&amp; func)</span></span>&#123;</span><br><span class="line"><span class="built_in">debug</span>(<span class="built_in">func</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">debug</span>(<span class="built_in">func</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">debug</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(func));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::function&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>)</span>&gt; <span class="title">make_twice</span><span class="params">(<span class="keyword">int</span> fac)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> [=](<span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">return</span> n*fac;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> twice = <span class="built_in">make_twice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">call_twice</span>(twice);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种形势下<code>function&lt;int(int)&gt;</code>是虚函数，会有额外的开销</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func(0): 0</span><br><span class="line">func(1): 2</span><br><span class="line">sizeof(func): 32</span><br></pre></td></tr></table></figure><ul><li>lambada的用途：yield模式</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class Func&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fetch_data</span><span class="params">(Func <span class="keyword">const</span>&amp; func)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line"><span class="built_in">func</span>(i);</span><br><span class="line"><span class="built_in">func</span>(i+<span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; res_i;</span><br><span class="line">std::vector&lt;<span class="keyword">float</span>&gt; res_f;</span><br><span class="line"><span class="built_in">fetch_data</span>([&amp;] (<span class="keyword">auto</span> <span class="keyword">const</span> &amp;x)&#123;</span><br><span class="line"><span class="keyword">using</span> T = std::<span class="keyword">decay_t</span>&lt;<span class="keyword">decltype</span>(x)&gt;;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in"><span class="keyword">constexpr</span></span> (std::is_same_v&lt;T, <span class="keyword">int</span>&gt;)&#123;</span><br><span class="line">res_i.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in"><span class="keyword">constexpr</span></span> (std::is_same_v&lt;T, <span class="keyword">float</span>&gt;)&#123;</span><br><span class="line">res_f.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>立即求值</p></li><li><p>匿名递归</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; arr=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">std::set&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line"><span class="keyword">auto</span> dfs = [&amp;] (<span class="keyword">auto</span> <span class="keyword">const</span> &amp;dfs, <span class="keyword">int</span> index) -&gt;<span class="keyword">void</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(visited.<span class="built_in">find</span>(index)==visited.<span class="built_in">end</span>())&#123;</span><br><span class="line">visited.<span class="built_in">insert</span>(index);</span><br><span class="line">std::cout&lt;&lt;index&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">int</span> next=arr[index];</span><br><span class="line"><span class="built_in">dfs</span>(dfs, next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dfs</span>(dfs, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常用容器tuple</li></ul><p><code>std::tuple&lt;...&gt;</code>可以讲多个不同类型的值打包成一个。尖括号里填各种类型</p><p>之后可以使用<code>std::get&lt;0&gt;([tuplename])</code>获取对应索引值</p><ol><li>结构化绑定</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> tup = std::<span class="built_in">tuple</span>(<span class="number">3</span>,<span class="number">3.14</span>,<span class="string">&quot;6&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> [x,y,z] = tup;</span><br></pre></td></tr></table></figure><ol><li><code>tuple</code>还可以使用在有多个返回值的函数</li></ol><ul><li>常用容器<code>optional</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::optional&lt;<span class="keyword">float</span>&gt; <span class="title">mysqrt</span><span class="params">(<span class="keyword">float</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=<span class="number">0.f</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">sqrt</span>(x);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> std::nullopt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> res = <span class="built_in">mysqrt</span>(<span class="number">-3.f</span>);</span><br><span class="line"><span class="keyword">if</span>(res.<span class="built_in">has_value</span>())&#123;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;answer: &quot;</span>&lt;&lt;res.<span class="built_in">value</span>()&lt;&lt;std::endl;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;failed&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>optional</code>:<code>operator bool()</code>和<code>has_value()</code>等价,是一个更安全的指针</li></ul><ul><li><code>variant</code>是更安全的<code>union</code>,存储多个不同类型的值</li></ul><p>我的作业:<a href="https://github.com/WangYuHang-cmd/hw03">https://github.com/WangYuHang-cmd/hw03</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模板元编程与函数式编程&quot;&gt;&lt;a href=&quot;#模板元编程与函数式编程&quot; class=&quot;headerlink&quot; title=&quot;模板元编程与函数式编程&quot;&gt;&lt;/a&gt;模板元编程与函数式编程&lt;/h2&gt;&lt;h4 id=&quot;模板元编程&quot;&gt;&lt;a href=&quot;#模板元编程&quot; class</summary>
      
    
    
    
    
    <category term="C++模板元编程与函数式编程" scheme="https://wangyuhang-cmd.github.io/tags/C-%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>RAII与智能指针</title>
    <link href="https://wangyuhang-cmd.github.io/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
    <id>https://wangyuhang-cmd.github.io/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</id>
    <published>2023-03-10T14:21:10.000Z</published>
    <updated>2023-03-10T14:26:22.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RAII与智能指针"><a href="#RAII与智能指针" class="headerlink" title="RAII与智能指针"></a><a href="https://www.bilibili.com/video/BV1LY411H7Gg/?spm_id_from=333.788&amp;vd_source=41650056b9ab0f1929b0b2390258fe85">RAII与智能指针</a></h2><ul><li><code>for_eachdui</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;sum += x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    std::for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), func);</span><br><span class="line">    std::cout&lt;&lt;sum&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引用自algorithm的模板函数，可以套用任何迭代器，引用对应参数调用func函数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    std::for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        sum += x;</span><br><span class="line">    &#125;);</span><br><span class="line">    std::cout&lt;&lt;sum&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引用<code>lambda</code>表达式后，sum为一个局部变量。其中lambda表达式中<code>[&amp;]</code>表示可以引用外部变量</p></blockquote><ul><li>C++20引入区间(ranges)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    std::vector v=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp;vi:v</span><br><span class="line">       | std::views::<span class="built_in">filter</span>([] (<span class="keyword">auto</span> &amp;&amp;x)&#123;<span class="keyword">return</span> x&gt;=<span class="number">0</span>;&#125;)</span><br><span class="line">       | std::views::<span class="built_in">tranform</span>([] (<span class="keyword">auto</span> &amp;&amp;x)&#123;<span class="keyword">return</span> <span class="built_in">sqrtf</span>(x);&#125;)</span><br><span class="line">       )&#123;</span><br><span class="line">    std::cout&lt;&lt;vi&lt;&lt;std::endl;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RAII(异常安全)</p><ul><li>C++标准中保证当异常发生时会嗲用已经创建的析构函数，因此不需要final</li></ul><ul><li><p>初始化表达式的优势</p><ol><li><p>对于成员变量是const的时候，只能够在初始化列表中进行初始化</p></li><li><p>避免重复初始化(否则是先初始化为0再进行赋值，相当于两个操作)</p></li><li>避免了参数有 无参构造函数</li><li>若构造函数只有一个参数，可以使用<code>=</code>进行构造，但是如果要规定显示的构造方法，可以再构造函数前加上<code>explicit</code></li></ol></li></ul><ul><li>{}和()调用构造函数时都是显式类型转换，但是{}不是强制类型转换，从高精度向低精度转换不会报错,但是从高精度向低精度转换则会通过不了编译，而()是强制类型转换。</li></ul><p><strong><img src="/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/1.jpg" class title="This is an test image"></strong></p><p><img src="/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/Users\Henry\AppData\Roaming\Typora\typora-user-images\image-20230303104937987.png" alt="image-20230303104937987"></p><blockquote><p><code>int&#123;3.14f&#125;</code>不可过编译但是<code>float&#123;3&#125;</code>可以</p></blockquote><ul><li>若自己没有写构造函数，编译器默认生成无参构造函数（POD陷阱）<ul><li>POD陷阱：以下类型并不会被初始化为0<ul><li>int,float,double等基础类型</li><li>void<em> Object</em>等指针类习惯</li><li>完全由这些类型组成的类</li></ul></li><li>POD（plain-old-data）会被初始化为系统内存中的随机值，其存在是为了兼容C</li></ul></li><li>解决措施<code>struct&#123;int t&#123;0&#125;;&#125;;</code>或者<code>struct&#123;int t=10;&#125;;</code></li></ul><ul><li>如果自己定义构造函数后还想编译器给你生成构造函数，则需要<code>Class() = default;</code></li></ul><ul><li>自定义拷贝赋值函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Pig</span>(Pig <span class="keyword">const</span> &amp;pegy):<span class="built_in">name</span>(pegy.name), <span class="built_in">weight</span>(pegy.weight)&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong><img src="/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/2.jpg" class title="This is an test image"></strong></p><p><img src="/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/Users\Henry\AppData\Roaming\Typora\typora-user-images\image-20230303195143615.png" alt="image-20230303195143615"></p><ul><li><p>三五法则</p><ol><li>如果一个类定义了析构函数，那么必须同时定义或删除拷贝构造函数和拷贝赋值函数：</li><li>如果一个类定义了拷贝构造函数，那么您必须同时定义或删除拷贝赋值函数，否则出错，删除可导致低效</li><li>如果一个类定义了移动构造函数，那么您必须同时定义或删除移动赋值函数，否则出错，删除可导致低效</li><li>如果一个类定义了拷贝构造函数或拷贝赋值函数，那么最好同时定义移动构造函数或移动赋值函数</li></ol></li></ul><p>  <strong><img src="/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/3.jpg" class title="This is an test image"></strong></p><p><img src="/2023/03/10/RAII%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/Users\Henry\AppData\Roaming\Typora\typora-user-images\image-20230303195116221.png" alt="image-20230303195116221"></p><blockquote><p>因此建议删除默认的拷贝构造函数<code>Vector(Vector const &amp;)=delete;</code>如果不删除则默认是浅拷贝.</p></blockquote><ul><li>拷贝和移动</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_move</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">200</span>)</span></span>;</span><br><span class="line">    v1 = std::<span class="built_in">move</span>(v2);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;v1.size():&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;v2.size():&quot;</span> &lt;&lt; v2.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有的时候需要把一个对象移动到另外一个对象上，然后销毁，有点像浅拷贝，但是并不完全一样(多一个销毁的动作)。因此我们可以靠<code>std::move</code>进行实现。就像上述的例子，v2被移动到v1之后原来的才会被销毁，从而防止双重free。</p><blockquote><p>std::swap()在高性能计算中可以用来实现双缓存（ping-pong buffer）</p><p>交换复杂度是O(1)</p></blockquote><p>作为返回值的时候自动默认为右值引用，即<strong>移动</strong></p><p>三五法则说明不定义移动构造和移动赋值是低效的，但是可以保证不出错。但是最好的方式还是自己定义一个移动构造函数和移动赋值函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Pig</span>(Pig &amp;&amp;other)&#123;</span><br><span class="line">    name=other.name;</span><br><span class="line">    other.name=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    weight=other.weight;</span><br><span class="line">    other.weight=<span class="number">0</span>;</span><br><span class="line">    son=other.son;</span><br><span class="line">    other.son=<span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">Pig &amp;<span class="keyword">operator</span>=(Pig &amp;&amp;other)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;~<span class="built_in">Pig</span>();</span><br><span class="line">    <span class="keyword">new</span> (<span class="keyword">this</span>) <span class="built_in">Pig</span>(std::<span class="built_in">move</span>(other));</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RAII解决内存管理：</p><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p><code>#include&lt;memory&gt;</code></p><p><code>std::unique_ptr&lt;Class&gt; p=std::make_unique&lt;Class&gt;();</code></p><p>在每次return之前会自动调用<code>delete p;</code></p><ul><li>unique_ptr在使用的时候因为删除了拷贝函数，因此无法在函数中调用</li></ul><p>调用方法：</p><ol><li>func()并不需要夺走资源的占有权，只是需要调用某个成员函数而已</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Class * p)</span></span>&#123;</span><br><span class="line">p-&gt;<span class="built_in"><span class="keyword">do</span></span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    <span class="built_in">func</span>(p.<span class="built_in">get</span>()); <span class="comment">//p.get()获取指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>需要夺走资源的占有权，比如需要延长对象生命周期，或者将其加入到某个数据结构中</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;Class&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(std::unique_ptr&lt;Class&gt; p)</span></span>&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    std::unique_ptr&lt;Class&gt; p = std::make_unique&lt;Class&gt;();</span><br><span class="line">    <span class="built_in">func</span>(std::<span class="built_in">move</span>(p)); <span class="comment">//p.get()获取指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是按照上述的方法，在std::move()之后原来的指针的方法就无法调用了，因为被释放掉了。一种解决方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;Class&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(std::unique_ptr&lt;Class&gt; p)</span></span>&#123;</span><br><span class="line">vec.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(p));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    std::unique_ptr&lt;Class&gt; p = std::make_unique&lt;Class&gt;();</span><br><span class="line">    Class *raw_p = p.<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">func</span>(std::<span class="built_in">move</span>(p)); <span class="comment">//p.get()获取指针</span></span><br><span class="line">raw_p -&gt; <span class="built_in"><span class="keyword">do</span></span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是会出现空悬指针的问题。解决方法：shared_ptr</p><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p>利用计数的方式，当一个<code>shred_pre</code>被初始化时，其计数器设为1，当被拷贝时计时器+1，当被析构时计数器-1，减到0时就自动销毁其他指向的对象。</p><p>但是由于非原子性操作，在多线程时会有问题。其次是会产生循环引用的问题。（死锁）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Class</span>&#123;</span></span><br><span class="line">  std::shared_ptr&lt;Class&gt; m_child;</span><br><span class="line">    std::shared_ptr&lt;Class&gt; m_parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    <span class="keyword">auto</span> parent = std::make_shared&lt;Class&gt;();</span><br><span class="line">    <span class="keyword">auto</span> child = std::make_shared&lt;Class&gt;();</span><br><span class="line">    </span><br><span class="line">    parent.m_child = child;</span><br><span class="line">    child.m_parent = parent;</span><br><span class="line">    </span><br><span class="line">    parent = <span class="literal">nullptr</span>; <span class="comment">//不会释放</span></span><br><span class="line">    child = <span class="literal">nullptr</span>;  <span class="comment">//不会释放</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h6><p>将<code>m_parent</code>改成<code>weak_ptr</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Class</span>&#123;</span></span><br><span class="line">  std::shared_ptr&lt;Class&gt; m_child;</span><br><span class="line">    std::weak_ptr&lt;Class&gt; m_parent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">    <span class="keyword">auto</span> parent = std::make_shared&lt;Class&gt;();</span><br><span class="line">    <span class="keyword">auto</span> child = std::make_shared&lt;Class&gt;();</span><br><span class="line">    </span><br><span class="line">    parent.m_child = child;</span><br><span class="line">    child.m_parent = parent;</span><br><span class="line">    </span><br><span class="line">    parent = <span class="literal">nullptr</span>; <span class="comment">//释放</span></span><br><span class="line">    child = <span class="literal">nullptr</span>;  <span class="comment">//释放</span></span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; child.<span class="built_in">expired</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>weak_ptr</code>不会增加<code>shared_ptr</code>的引用计数</li><li>父窗口拥有子窗口天经地义，但是子窗口不能拥有父窗口</li></ul><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p>weak_ptr被设计为与shared_ptr共同工作，可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测权。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加。同样，在weak_ptr析构时也不会导致引用计数的减少，它只是一个静静地观察者。</p><blockquote><p>weak_ptr没有重载operator*和-&gt;，这是特意的，因为它不共享指针，不能操作资源，这是它弱的原因。</p></blockquote><p><strong>但是weak_ptr可以调用lock()函数从被观测的shared_ptr获得一个可用的shared_ptr对象</strong></p><p>当创建一个weak_ptr时，要用一个shared_ptr来初始化它。不能使用weak_ptr直接访问对象，而必须调用lock。</p><p>此函数检查weak_ptr指向的对象是否仍存在。如果存在，lock返回一个指向共享对象的shared_ptr。与任何其它shared_ptr类似，只要此shared_ptr存在，它所指向的底层对象也就会一直存在。</p><ul><li>测试代码</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;weak_ptr.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">// reference: http://en.cppreference.com/w/cpp/memory/weak_ptr</span></span><br><span class="line">std::weak_ptr&lt;<span class="keyword">int</span>&gt; gw;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> spt = gw.<span class="built_in">lock</span>()) &#123; <span class="comment">// Has to be copied into a shared_ptr before usage</span></span><br><span class="line">std::cout &lt;&lt; *spt &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;gw is expired\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_weak_ptr1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> sp = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line">gw = sp;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/</span><br><span class="line"><span class="comment">// reference: http://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_weak_ptr2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// OLD, problem with dangling pointer</span></span><br><span class="line"><span class="comment">// PROBLEM: ref will point to undefined data!</span></span><br><span class="line"><span class="keyword">int</span>* ptr = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span>* ref = ptr;</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// NEW</span></span><br><span class="line"><span class="comment">// SOLUTION: check expired() or lock() to determine if pointer is valid</span></span><br><span class="line"><span class="comment">// empty definition</span></span><br><span class="line">std::shared_ptr&lt;<span class="keyword">int</span>&gt; sptr;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// takes ownership of pointer</span></span><br><span class="line">sptr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="keyword">int</span>);</span><br><span class="line">*sptr = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// get pointer to data without taking ownership</span></span><br><span class="line">std::weak_ptr&lt;<span class="keyword">int</span>&gt; weak1 = sptr;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// deletes managed object, acquires new pointer</span></span><br><span class="line">sptr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="keyword">int</span>);</span><br><span class="line">*sptr = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// get pointer to new data without taking ownership</span></span><br><span class="line">std::weak_ptr&lt;<span class="keyword">int</span>&gt; weak2 = sptr;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// weak1 is expired!</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> tmp = weak1.<span class="built_in">lock</span>())</span><br><span class="line">std::cout &lt;&lt; *tmp &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;weak1 is expired\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// weak2 points to new data (5)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> tmp = weak2.<span class="built_in">lock</span>())</span><br><span class="line">std::cout &lt;&lt; *tmp &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;weak2 is expired\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// reference: https://msdn.microsoft.com/en-us/library/hh279672.aspx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> Num;</span><br><span class="line">std::string Status;</span><br><span class="line">std::vector&lt;std::weak_ptr&lt;Controller&gt;&gt; others;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Controller</span><span class="params">(<span class="keyword">int</span> i)</span> : Num(i), Status(<span class="string">&quot;On&quot;</span>)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Creating Controller&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">~<span class="built_in">Controller</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Destroying Controller&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Demonstrates how to test whether the pointed-to memory still exists or not.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CheckStatuses</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">for_each(others.<span class="built_in">begin</span>(), others.<span class="built_in">end</span>(), [](std::weak_ptr&lt;Controller&gt; wp) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> p = wp.<span class="built_in">lock</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Status of &quot;</span> &lt;&lt; p-&gt;Num &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; p-&gt;Status &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (std::bad_weak_ptr b) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Null object&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;std::shared_ptr&lt;Controller&gt;&gt; v;</span><br><span class="line"> </span><br><span class="line">v.<span class="built_in">push_back</span>(std::shared_ptr&lt;Controller&gt;(<span class="keyword">new</span> <span class="built_in">Controller</span>(<span class="number">0</span>)));</span><br><span class="line">v.<span class="built_in">push_back</span>(std::shared_ptr&lt;Controller&gt;(<span class="keyword">new</span> <span class="built_in">Controller</span>(<span class="number">1</span>)));</span><br><span class="line">v.<span class="built_in">push_back</span>(std::shared_ptr&lt;Controller&gt;(<span class="keyword">new</span> <span class="built_in">Controller</span>(<span class="number">2</span>)));</span><br><span class="line">v.<span class="built_in">push_back</span>(std::shared_ptr&lt;Controller&gt;(<span class="keyword">new</span> <span class="built_in">Controller</span>(<span class="number">3</span>)));</span><br><span class="line">v.<span class="built_in">push_back</span>(std::shared_ptr&lt;Controller&gt;(<span class="keyword">new</span> <span class="built_in">Controller</span>(<span class="number">4</span>)));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Each controller depends on all others not being deleted.</span></span><br><span class="line"><span class="comment">// Give each controller a pointer to all the others. </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [v, i](std::shared_ptr&lt;Controller&gt; p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;Num != i) &#123;</span><br><span class="line">v[i]-&gt;others.<span class="built_in">push_back</span>(std::weak_ptr&lt;Controller&gt;(p));</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;push_back to v[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]: &quot;</span> &lt;&lt; p-&gt;Num &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](std::shared_ptr&lt;Controller&gt;&amp; p) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;use_count = &quot;</span> &lt;&lt; p.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">p-&gt;<span class="built_in">CheckStatuses</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_weak_ptr3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">RunTest</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Press any key&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">std::cin.<span class="built_in">getline</span>(&amp;ch, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// reference: https://oopscenities.net/2014/08/03/c-smart-pointers-part-5-weak_ptr/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Child</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">std::shared_ptr&lt;Child&gt; child;</span><br><span class="line"> </span><br><span class="line">~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Bye Parent&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hi</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;Hello&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Child</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">std::weak_ptr&lt;Parent&gt; parent;</span><br><span class="line"><span class="comment">//std::shared_ptr&lt;Parent&gt; parent; // memory leak</span></span><br><span class="line"> </span><br><span class="line">~<span class="built_in">Child</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Bye Child&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_weak_ptr4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> parent = std::make_shared&lt;Parent&gt;();</span><br><span class="line"><span class="keyword">auto</span> child = std::make_shared&lt;Child&gt;();</span><br><span class="line"> </span><br><span class="line">parent-&gt;child = child;</span><br><span class="line">child-&gt;parent = parent;</span><br><span class="line">child-&gt;parent.<span class="built_in">lock</span>()-&gt;<span class="built_in">hi</span>();</span><br><span class="line"><span class="comment">// child-&gt;parent-&gt;hi();</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/</span><br><span class="line"><span class="comment">// reference: http://thispointer.com/shared_ptr-binary-trees-and-the-problem-of-cyclic-references/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::shared_ptr&lt;Node&gt; leftPtr;</span><br><span class="line">std::shared_ptr&lt;Node&gt; rightPtr;</span><br><span class="line"><span class="comment">// Just Changed the shared_ptr to weak_ptr</span></span><br><span class="line">std::weak_ptr&lt;Node&gt; parentPtr;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> val) : <span class="built_in">value</span>(val)     &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Contructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Node</span>()     &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Destructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_weak_ptr5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::shared_ptr&lt;Node&gt; ptr = std::make_shared&lt;Node&gt;(<span class="number">4</span>);</span><br><span class="line">ptr-&gt;leftPtr = std::make_shared&lt;Node&gt;(<span class="number">2</span>);</span><br><span class="line">ptr-&gt;leftPtr-&gt;parentPtr = ptr;</span><br><span class="line">ptr-&gt;rightPtr = std::make_shared&lt;Node&gt;(<span class="number">5</span>);</span><br><span class="line">ptr-&gt;rightPtr-&gt;parentPtr = ptr;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ptr reference count = &quot;</span> &lt;&lt; ptr.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ptr-&gt;leftPtr reference count = &quot;</span> &lt;&lt; ptr-&gt;leftPtr.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ptr-&gt;rightPtr reference count = &quot;</span> &lt;&lt; ptr-&gt;rightPtr.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ptr-&gt;rightPtr-&gt;parentPtr reference count = &quot;</span> &lt;&lt; ptr-&gt;rightPtr-&gt;parentPtr.<span class="built_in">lock</span>().<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;ptr-&gt;leftPtr-&gt;parentPtr reference count = &quot;</span> &lt;&lt; ptr-&gt;leftPtr-&gt;parentPtr.<span class="built_in">lock</span>().<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免不必要的拷贝</li></ul><p>函数定义参数的时候建议传参<code>void func(Class const&amp; c);</code>在不改变值得情况下。</p><ol><li><p>P-IMPL 模式</p><ul><li>在类中使用Pimpl惯用法，具有如下优点：</li></ul><blockquote><p>降低耦合<br>信息隐藏<br>降低编译依赖，提高编译速度<br>接口与实现分离</p></blockquote><ul><li><code>Code in cppreference</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;experimental/propagate_const&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface (widget.h)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">widget</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">impl</span>;</span></span><br><span class="line">    std::experimental::propagate_const&lt;std::unique_ptr&lt;impl&gt;&gt; pImpl;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// public API that will be forwarded to the implementation</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">shown</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125; <span class="comment">// public API that implementation has to call</span></span><br><span class="line">    <span class="built_in">widget</span>(<span class="keyword">int</span>);</span><br><span class="line">    ~<span class="built_in">widget</span>(); <span class="comment">// defined in the implementation file, where impl is a complete type</span></span><br><span class="line">    <span class="built_in">widget</span>(widget&amp;&amp;) = <span class="keyword">default</span>;  <span class="comment">// Note: calling draw() on moved-from object is UB</span></span><br><span class="line">    <span class="built_in">widget</span>(<span class="keyword">const</span> widget&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    widget&amp; <span class="keyword">operator</span>=(widget&amp;&amp;); <span class="comment">// defined in the implementation file</span></span><br><span class="line">    widget&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> widget&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implementation (widget.cpp)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">widget</span>:</span>:impl &#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="comment">// private data</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">const</span> widget&amp; w)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w.<span class="built_in">shown</span>()) <span class="comment">// this call to public member function requires the back-reference </span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;drawing a const widget &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">const</span> widget&amp; w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w.<span class="built_in">shown</span>())</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;drawing a non-const widget &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">impl</span>(<span class="keyword">int</span> n) : <span class="built_in">n</span>(n) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">widget::draw</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; pImpl-&gt;<span class="built_in">draw</span>(*<span class="keyword">this</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">widget::draw</span><span class="params">()</span> </span>&#123; pImpl-&gt;<span class="built_in">draw</span>(*<span class="keyword">this</span>); &#125;</span><br><span class="line">widget::<span class="built_in">widget</span>(<span class="keyword">int</span> n) : pImpl&#123;std::make_unique&lt;impl&gt;(n)&#125; &#123;&#125;</span><br><span class="line">widget::~<span class="built_in">widget</span>() = <span class="keyword">default</span>;</span><br><span class="line">widget&amp; widget::<span class="keyword">operator</span>=(widget&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user (main.cpp)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">widget <span class="title">w</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> widget <span class="title">w2</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">    w.<span class="built_in">draw</span>();</span><br><span class="line">    w2.<span class="built_in">draw</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个更直观的例子：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Book.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BOOK_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BOOK_H__</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Book</span>();</span><br><span class="line">        ~<span class="built_in">Book</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BookImpl</span>;</span></span><br><span class="line">        BookImpl* pimpl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BookImpl.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BOOKIMPL_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BOOKIMPL_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Book.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span>:BookImpl</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::string content_;</span><br><span class="line">        std::string titil_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Book.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Book.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;BookImpl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Book::<span class="built_in">Book</span>()</span><br><span class="line">&#123;</span><br><span class="line">    pimpl = <span class="keyword">new</span> <span class="built_in">BookImpl</span>();</span><br><span class="line">&#125;</span><br><span class="line">Book::~<span class="built_in">Book</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> pimpl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Book::print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pimpl-&gt;<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Book::BookImpl::<span class="built_in">print</span>()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;print in imple&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Book.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Book book;</span><br><span class="line">    book.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>虚函数与纯虚函数</p><ul><li>虚函数<ul><li>允许基类指针来调用子类的这个函数 (virtual)</li><li>多态的表现</li></ul></li><li>纯虚函数<ul><li><code>virtual void funtion1()=0</code></li><li>目的是规范所有派生类都要实现这个方法</li></ul></li></ul></li><li><p>拷贝如何作为虚函数</p><ul><li>在dynamic_cast被设计之前，C++无法实现从一个虚基类到派生类的强制转换。dynamic_cast就是为解决虚基类到派生类的转换而设计的。</li></ul></li><li><p><code>std::unique_ ptr:release()</code></p><ul><li>相当于<code>std::move()</code>，相当于给予当前控制权并清空自身</li></ul></li><li><p><code>std::enable_shared_from_this</code></p><ul><li><p>```cpp</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <iostream></iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <memory></memory></h1><p>using namespace std;</p><p>class A : public enable_shared_from_this<A><br>{<br>public:</A></p><pre><code>A()&#123;&#125;void set()&#123;    conn = this-&gt;shared_from_this();&#125;int a;weak_ptr&lt;A&gt; conn;</code></pre><p>};<br>int main()<br>{</p><pre><code>std::shared_ptr&lt;A&gt; ptr = std::make_shared&lt;A&gt;();cout &lt;&lt; ptr.use_count() &lt;&lt; endl;  // 1std::shared_ptr&lt;A&gt; ptr1 = ptr-&gt;conn.lock();if (!ptr1)&#123;    std::cout &lt;&lt; &quot;null\n&quot;;        // null&#125;ptr-&gt;set();cout &lt;&lt; ptr.use_count() &lt;&lt; endl;  // 1ptr1 = ptr-&gt;conn.lock();cout &lt;&lt; ptr.use_count() &lt;&lt; endl;  // 2</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 用a.owner_before(b)来举例：如果a与b同为空或者同时指向同一个对象（包含继承关系），就返回false;如果是其它情况，则用指针所指向的对象的地址来比较大小，若a的地址&lt;b的地址，则返回true，若a的地址&gt;b的地址，则返回false。</span><br><span class="line"></span><br><span class="line">6. `dynamic_cast`</span><br><span class="line"></span><br><span class="line">   - 从一个虚基类到派生类的强制转换。dynamic_cast就是为解决虚基类到派生类的转换而设计的。</span><br><span class="line">   - `Artist *a1 =  dynamic_cast&lt;Artist*&gt;(p1);`其中p1的类型是Artist的派生类</span><br><span class="line"></span><br><span class="line">7. `std::dynamic_pointer_cast`</span><br><span class="line"></span><br><span class="line">8. 运算符重载</span><br><span class="line"></span><br><span class="line">9. 右值引用&amp;&amp;</span><br><span class="line"></span><br><span class="line">   - 同`std::move()`</span><br><span class="line"></span><br><span class="line">   - **将亡值**，是C++11为了引入右值引用而提出的概念(因此传统C++中，纯右值和右值是同一个概念)，**也就是即将被销毁、却能够被移动的值**</span><br><span class="line"></span><br><span class="line">   - **要拿到一个将亡值，就需要用到右值引用：T&amp;&amp;，其中T是类型**。**右值引用的声明让这个临时值的生命周期得以延长，只要变量还活着，那么将网址将继续存活**</span><br><span class="line"></span><br><span class="line">   - **&#123;% asset_img 4.jpg This is an test image %&#125;**</span><br><span class="line"></span><br><span class="line">     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20210322132552567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poaXpoZW5nZ3Vhbg==,size_16,color_FFFFFF,t_70)</span><br><span class="line"></span><br><span class="line">10. [`std::shared_ ptr&lt;void&gt;`和 `std::any`](https://www.cnblogs.com/gnivor/p/12793239.html)</span><br><span class="line"></span><br><span class="line">    - `std::shared_ptr&lt;void&gt;`</span><br><span class="line"></span><br><span class="line">      - 使用`shared_ptr&lt;void&gt;`代替`void*`可以解决声明周期管理的问题。(解决了`void*`需要手动进行内存管理的问题)</span><br><span class="line">      - 但是std::shared_ptr和void*一样不能解决类型安全的问题。使用shared_ptr 需要reinterpreting integral 为void *并直接存储它们来避免内存分配；使用shared_ptr强制我们甚至为诸如int之类的微小对象分配内存。</span><br><span class="line"></span><br><span class="line">    - `std::any`</span><br><span class="line"></span><br><span class="line">      - 更智能的(`void*` / `shared_ptr&lt;void&gt;`)</span><br><span class="line"></span><br><span class="line">      - ```cpp</span><br><span class="line">        #include &lt;iostream&gt;</span><br><span class="line">        #include &lt;memory&gt;</span><br><span class="line">        #include &lt;any&gt;</span><br><span class="line">        #include&lt;vector&gt;</span><br><span class="line">        #include&lt;assert.h&gt;</span><br><span class="line">        struct day &#123;</span><br><span class="line">          // ...things...</span><br><span class="line">          std::shared_ptr&lt;void&gt; user_data;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        struct month &#123;</span><br><span class="line">          std::vector&lt;day&gt; days;</span><br><span class="line">          std::shared_ptr&lt;void&gt; user_data;</span><br><span class="line">        &#125;;</span><br><span class="line">        #define debug(x) std::cout&lt;&lt;#x&lt;&lt; &quot; &quot; &lt;&lt; x&lt;&lt;std::endl</span><br><span class="line">        int main()</span><br><span class="line">        &#123;</span><br><span class="line">        std::any a0; </span><br><span class="line">        std::any a1 = 42; </span><br><span class="line">        std::any a3 = a0; // Copies the empty any from the previous snippet</span><br><span class="line">        std::any a4 = a1; // Copies the &quot;int&quot;-containing any</span><br><span class="line">        assert(a4.type() == typeid(int));  // type() returns typeid(int) when empty</span><br><span class="line">        debug(0);</span><br><span class="line">        a4 = a0;          // copy assignment works, and properly destroys the old value</span><br><span class="line">        </span><br><span class="line">        assert(!a0.has_value());            // a0 is still empty</span><br><span class="line">        debug(1);</span><br><span class="line">        assert(a1.type() == typeid(int));</span><br><span class="line">        debug(2);</span><br><span class="line">        assert(a4.type() == typeid(void));  // type() returns typeid(void) when empty</span><br><span class="line">        debug(3);</span><br><span class="line">        assert(a3.type() == typeid(void));  // type() returns typeid(void) when empty</span><br><span class="line">        debug(4);</span><br><span class="line">        return 0;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>POD</p><ul><li>Plain old data structure</li><li>类型是平凡的（trivial），则可以静态初始化、可以用memcpy直接复制数据而不是必须用copy构造函数。其生存期始于它的对象的存储被定义，无须等到构造函数完成。平凡class或结构必须满足：<ul><li>有平凡的缺省构造函数，可用这样的默认语法：(SomeConstructor() = default;)</li><li>有平凡的copy与move构造函数，可用默认语法.</li><li>有平凡的copy与move运算符，可用默认语法.</li><li>有平凡的destructor，不能是虚函数.</li></ul></li><li>如果定义了构造函数，哪怕构造函数中什么也没有，即不是平凡的。</li></ul></li></ol><p>课件：<a href="https://github.com/parallel101/course">https://github.com/parallel101/course</a> </p><p>作业：<a href="https://github.com/parallel101/hw02">https://github.com/parallel101/hw02</a></p><p>我的作业：<a href="https://github.com/WangYuHang-cmd/hw02">https://github.com/WangYuHang-cmd/hw02</a></p><p>参考：<a href="https://blog.csdn.net/fengbingchun/article/details/52203825/">https://blog.csdn.net/fengbingchun/article/details/52203825/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RAII与智能指针&quot;&gt;&lt;a href=&quot;#RAII与智能指针&quot; class=&quot;headerlink&quot; title=&quot;RAII与智能指针&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1LY411H7Gg/?spm_i</summary>
      
    
    
    
    <category term="C++" scheme="https://wangyuhang-cmd.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://wangyuhang-cmd.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>xcpc生涯总结</title>
    <link href="https://wangyuhang-cmd.github.io/2022/12/03/xcpc%E7%94%9F%E6%B6%AF%E6%80%BB%E7%BB%93/"/>
    <id>https://wangyuhang-cmd.github.io/2022/12/03/xcpc%E7%94%9F%E6%B6%AF%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-03T09:27:46.000Z</published>
    <updated>2022-12-04T11:03:58.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XCPC"><a href="#XCPC" class="headerlink" title="XCPC"></a>XCPC</h2><p>​       作为一名大二才接触算法竞赛，打了一年就退役的选手，我的XCPC生涯是如此短暂….</p><p>​        由于一开始是大数据专业的，首先掌握的语言也是Python而不是C语言。因此在大一下学期我萌生了转专业的想法之后，我开始去自学C语言，看的是北大郭炜老师的课程：</p><p><a href="https://www.icourse163.org/course/PKU-1001553023">程序设计与算法（一）C语言程序设计</a></p><p><a href="https://www.icourse163.org/learn/PKU-1001894005?tid=1463180448">程序设计与算法（二）算法基础</a></p><p><a href="https://www.icourse163.org/learn/PKU-1002029030?tid=1463187446#/learn/announce">程序设计与算法（三）C++面向对象程序设计</a></p><p>同时,他配套的POJ(Peking University Online Judge)上面的习题我也带着写完了，同时我也上了郭炜老师的Python的相关课程。这也使得我从一位编程小白变成了一位会写简单分支循环语句的新生，同时也以优秀的等级通过了计算机二级考试。</p><p>然后就到了五月，我感觉这个写编程题还蛮有意思的，我就去洛谷上买了一本《深入浅出程序设计竞赛》平时带着写一写，恰好五月底我校正好举办了NUISTCPC(校程序设计竞赛)，我当时报着刚学完C语言和刷完深基搜索后的去试一试的心态，结果在迅速签完到之后三个小时罚坐后搞出来了一道贪心题，打了一个二十多的好成绩，这也让身为菜鸟的我感到惊奇。也正好在之后一次偶然的讲座中我听到了来自SYF学长关于ACM-ICPC的介绍后，产生了浓厚的兴趣。</p><p>在经历过一个多月的期末月，即2021.7.12考完最后一门后，我发现我已经把GPA刷到了足以使我成功转专业的分数，我尝试开始在网上找ACM-ICPC的入门路线。当然这过程中也走了很多弯弯绕绕的路，知道我在学习基础动态规划模型时在搜“背包九讲”时在Bilibili上面搜到了北大闫学灿老师的视频，我了解到了Acwing，并一口气报名了算法基础课和算法提高课。那个暑假我也留校开始学习。由于之前刷完过一本洛谷的《深基》,所以我很快就刷完了基础课(没记错的话好像是两周不到)，然后感觉蛮简单的，我就开始刷提高课了。</p><p>刷提高课的收获还是非常多的，各种之前并没有真正掌握的算法随着刷题的进行，开始逐渐熟悉了起来。大概是刷了一个半月我把提高可百分之九十的算法都掌握了。刷提高课的同时，我还进入了Acwing比较有名的提高二群，在里面认识了来自各个学校的Acmer,有：</p><blockquote><p>现在在重邮的<a href="736237881@qq.com">光头哥</a>，<a href="979451229">Bsqaq</a>，安徽工程的<a href="736237881@qq.com">啾啾</a>，武昌理工的银牌佬<a href="1293391499@qq.com">Duck_沙烬</a>，新疆大学的<a href="1293391499@qq.com">临渊</a>，来自哥大，打进WF的<a href="979451229@qq.com">然然</a>，齐鲁工业大学的<a href="942845546@qq.com">L神</a>，来自广西的OI爷<a href="3342880042@qq.com">爽gai</a>，山东理工的那个队名巨长的队伍的ACMer<a href="3342880042@qq.com">凌乱之风</a>，还有<a href="766703001@qq.com">酸菜鱼佬</a>，湖南理工<a href="766703001@qq.com">长途</a>，河南大学的<a href="972937940@qq.com">程佬</a>，深圳大学<a href="766703001@qq.com">喵喵子</a>，湖南科技<a href="766703001@qq.com">黄宇轩</a>，南昌理工的<a href="766703001@qq.com">lqgg</a>，<a href="766703001@qq.com">lqmm</a>，吉林大学的<a href="1062708758@qq.com">速RitszZ</a>……</p></blockquote><p>虽然大家刚进群都是菜菜的(除了个别佬)，但是经过了一年的训练也都拿到了牌子。</p><p>也是在暑假里我开始接触到了<a href="atcoder.com">Atcoder</a>和<a href="codeforces.com">Codeforces</a>这两个竞争性编程训练平台，加上之后接触到的出题偏构造和DP的<a href="codechef.com">Codechef</a>，我主要的线上比赛网站就是这些。</p><p>我有一个非常不好的习惯，那就是喜欢开小号。一旦感觉自己状态有点不太对(比如有点困)，我就会去打小号，但事实证明这样子并不好，不仅严重拖慢了上分速度(以至于我现在只有紫名)，也会拖慢比赛适应能力。</p><p><a href="https://codeforces.com/ratings/organization/35633">我的所有CF号</a></p><p><strong><img src="/2022/12/03/xcpc%E7%94%9F%E6%B6%AF%E6%80%BB%E7%BB%93/1.png" class title="This is an test image"></strong></p><p>总之，对于掌握了知识点后如何快速得提升自己的代码运用水平并提升自己得思维能力，多多刷Atcoder和Codeforces是一个非常高效得做法。</p><p>在大一升大二暑假之后，我发现常常自己CF只能做到C题，D难出。学的算法也并不足够满足所有的XCPC知识，于是九月份我接触到了牛客算法平台以及牛客的课程。因此大二上学期，还没有进队，没有比赛打的我的主要任务就是刷完牛客竞赛的课程和配套习题。这一段时间对于我处理常见模型，常规算法题的能力提升是最明显的，也多亏了雨巨的清晰的讲述，对于小白来说非常的友好。在这之后我就基本告别Acwing这个入门级平台，开始使用牛客这个更加专业的竞赛平台了。刷题量也随着陡增，大概是两个月600+的题目。主要集中在中档题。<a href="https://ac.nowcoder.com/acm/contest/profile/156290750">MyNowcoder</a>.在处理完这些常见算法模型之后我的CF到了蓝名1700左右的水平，能保证我在30~50分钟内快速出完CF的ABC题，偶尔能写出来CF的D题。紧接着就是寒假的CF训练，那段时间我也找到了我的队友<a href="https://codeforces.com/profile/Nuist_wzy">WZY</a>和<a href="https://codeforces.com/profile/Bamboowind">GRD</a>，寒假结束之后我们也开始逐渐合练区域赛。此时的我CF大概是1700-1800左右徘徊。反思了一下应该是我学习不够深入导致的。因为比别人晚一年接触XCPC，所以相应的知识点的学习我给自己设置的时间要短很多，这样才能保证快速覆盖一定量的面，但是深度还是不够的。因此大二下学期，在尽量满足课内需求的同时我还需要加深各个算法的应用——VP区域赛就是一个很好的方法，同时我也开始Virtual Participate CF之前的场次。终于到了快要放暑假的啥时候我的CF成功到达了紫名。紧接着就是更多紫名的小号了…（非常不建议开小号）</p><p>大二下学期我也开始有比赛打了。一个是昆明区域赛，这个在我之前的<a href="https://wangyuhang-cmd.github.io/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/">博客中有提到</a>，也是之前多出来的名额，但是我打的并不好，最后我们队的模拟题没写出来也导致铁首。这让我感觉到之后的重重困难。紧接着就是JSCPC(CCPC 江苏省省赛)。江苏省省赛是我认为的全中国各个赛区难度相对最大的省赛了.还好上一场打铁并没有怎么影响我们，省赛打了一个银首，差一点金，也结束了这个赛季。</p><p>紧接着就是期末月后的多校联赛。多校我们打的一般般，排名也在200左右。大致是保铜争银的定位。我暑假出现的一个失误点在于我去学习了一些字符串进阶算法和计算几何算法，但是实际上这些知识点对我们队伍来说用处并不大。不过就当作知识点学习了。</p><p>2022-2023新赛季的时间特别短暂，我们队伍一共有三场比赛任务，队长特地选在了比较靠前，三周连续的，以便我们能够快速打完后准备期末。所以11.26号我就打完了所有比赛，比赛后的小作文我一律没写，因为大部分比赛都是差强人意，仅仅比预估的最坏结果要好一点。由于CCPC广州的卡题，到了三个小时我才把博弈论给想出来，因为我们又铁了。不过此时倒也没有什么心理压力了，因此紧接着下一周的ICPC合肥站我们还是比较轻松的，最终由于J题奇幻的错误勘误卡了我们半个多小时，最后没有调出来J，导致我们距离银牌线只有几名，遗憾拿铜。ICPC济南站也是同样的，做出来五题，但是因为罚时不占优势，在铜首区拿了一块铜牌。</p><p>我觉得如果我大一就接触ACM的话应该通过两年的时间拿到银牌不成问题。但是也最后两场比赛没有抓住机会+运气不好只拿到了铜牌。不过也算是我曾经参加算法竞赛的凭证了吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;XCPC&quot;&gt;&lt;a href=&quot;#XCPC&quot; class=&quot;headerlink&quot; title=&quot;XCPC&quot;&gt;&lt;/a&gt;XCPC&lt;/h2&gt;&lt;p&gt;​       作为一名大二才接触算法竞赛，打了一年就退役的选手，我的XCPC生涯是如此短暂….&lt;/p&gt;
&lt;p&gt;​     </summary>
      
    
    
    
    
    <category term="xcpclife" scheme="https://wangyuhang-cmd.github.io/tags/xcpclife/"/>
    
  </entry>
  
  <entry>
    <title>随机算法实验二_哈希表的设计</title>
    <link href="https://wangyuhang-cmd.github.io/2022/11/29/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>https://wangyuhang-cmd.github.io/2022/11/29/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-11-29T04:34:21.000Z</published>
    <updated>2022-11-29T04:51:26.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验二-哈希表的设计"><a href="#实验二-哈希表的设计" class="headerlink" title="实验二 哈希表的设计"></a>实验二 哈希表的设计</h2><h4 id="哈希表简介："><a href="#哈希表简介：" class="headerlink" title="哈希表简介："></a>哈希表简介：</h4><p><strong><img src="/2022/11/29/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/1.jpg" class title="This is an test image"></strong></p><h4 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h4><blockquote><p>1.编写属于2-通用簇的某个哈希函数代码（30 分）</p><p>•输入：键值</p><p>•输出：哈希值</p><p>2.给定一个较大的m值，例如10^9，和一个较小的n值，例如1000，通过实验观察多次插入操作后链表的平均长度（键值随机采样），并与理论结果进行对比分析（40 分）</p><p>3.对于（2）的结果，使用 2-通用哈希函数簇中不同的哈希函数，观察并分析结果的差异（30 分）</p></blockquote><h5 id="第一问："><a href="#第一问：" class="headerlink" title="第一问："></a>第一问：</h5><p>一下是我编写的两个哈希函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get_hash1</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(mod&gt;<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ((((<span class="keyword">long</span> <span class="keyword">long</span>)x&lt;&lt;<span class="number">1</span>)%mod*(<span class="keyword">long</span> <span class="keyword">long</span>)x%mod)+x)%mod;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get_hash2</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(mod&gt;<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> x%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二问："><a href="#第二问：" class="headerlink" title="第二问："></a>第二问：</h5><p><strong><img src="/2022/11/29/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/2.jpg" class title="This is an test image"></strong></p><p>经过实验发现在m较大，n较小的情况下，平均长度趋于1.0，与理论结果相近</p><p>在m，n较为接近的情况下，平均长度因哈希函数而异。</p><h5 id="第三问："><a href="#第三问：" class="headerlink" title="第三问："></a>第三问：</h5><p>如图是哈希函数1的实验结果：</p><p><strong><img src="/2022/11/29/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/4.jpg" class title="This is an test image"></strong></p><p>如图是哈希函数2的实验结果：</p><p><strong><img src="/2022/11/29/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%E8%AE%BE%E8%AE%A1/3.jpg" class title="This is an test image"></strong></p><p>经过对比可以发现不论是大模数小数据抑或是大模数大数据哈希函数2的表现要优于哈希函数1.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"><span class="comment">// using long long = long long;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="function">std::mt19937 <span class="title">rnd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="keyword">namespace</span> MyHash&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mod,idx,hash_number;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="built_in">Node</span>(<span class="keyword">long</span> <span class="keyword">long</span> _key,<span class="keyword">long</span> <span class="keyword">long</span> _val,<span class="keyword">long</span> <span class="keyword">long</span> _next):<span class="built_in">key</span>(_key),<span class="built_in">val</span>(_val),<span class="built_in">next</span>(_next)&#123;&#125;;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> key,val,next;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;Node&gt; node; </span><br><span class="line">    std::vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; head;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> _mod)</span></span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(_mod!=<span class="number">0</span>);</span><br><span class="line">        hash_number=idx=<span class="number">0</span>,mod=_mod;</span><br><span class="line">        node.<span class="built_in">clear</span>();</span><br><span class="line">        head.<span class="built_in">resize</span>(mod, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get_hash1</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(mod&gt;<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ((((<span class="keyword">long</span> <span class="keyword">long</span>)x&lt;&lt;<span class="number">1</span>)%mod*(<span class="keyword">long</span> <span class="keyword">long</span>)x%mod)+x)%mod;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get_hash2</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(mod&gt;<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">get_node</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> key,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>&#123;</span><br><span class="line">        Node now=<span class="built_in">Node</span>(key,val,<span class="number">-1</span>);</span><br><span class="line">        node.<span class="built_in">push_back</span>(now);</span><br><span class="line">        <span class="keyword">return</span> idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> key, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> _hash = <span class="built_in">get_hash1</span>(key);</span><br><span class="line">        <span class="comment">// long long _hash = get_hash2(key);</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> now = <span class="built_in">get_node</span>(key, val);</span><br><span class="line">        <span class="keyword">if</span>(head[_hash] == <span class="number">-1</span>) hash_number ++;</span><br><span class="line">        node[now].next = head[_hash];</span><br><span class="line">        head[_hash]=now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">average_len</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!hash_number) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">assert</span>(hash_number);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)idx/hash_number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入n(哈希实验个数) m(模数):&quot;</span> &lt;&lt; std::endl;;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    MyHash::<span class="built_in">init</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">auto</span> key = <span class="built_in">rnd</span>(),val = <span class="built_in">rnd</span>();</span><br><span class="line">        MyHash::<span class="built_in">insert</span>(key, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> ans = MyHash::<span class="built_in">average_len</span>();</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;<span class="number">1e-9</span>) std :: cout &lt;&lt; <span class="string">&quot;哈希表为空&quot;</span> &lt;&lt; std :: endl;</span><br><span class="line">    <span class="keyword">else</span> std::cout &lt;&lt; ans &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验二-哈希表的设计&quot;&gt;&lt;a href=&quot;#实验二-哈希表的设计&quot; class=&quot;headerlink&quot; title=&quot;实验二 哈希表的设计&quot;&gt;&lt;/a&gt;实验二 哈希表的设计&lt;/h2&gt;&lt;h4 id=&quot;哈希表简介：&quot;&gt;&lt;a href=&quot;#哈希表简介：&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="随机算法" scheme="https://wangyuhang-cmd.github.io/tags/%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ODT浅学</title>
    <link href="https://wangyuhang-cmd.github.io/2022/11/08/ODT%E6%B5%85%E5%AD%A6/"/>
    <id>https://wangyuhang-cmd.github.io/2022/11/08/ODT%E6%B5%85%E5%AD%A6/</id>
    <published>2022-11-08T11:33:33.000Z</published>
    <updated>2022-11-08T11:35:48.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="珂朵莉树ODT"><a href="#珂朵莉树ODT" class="headerlink" title="珂朵莉树ODT"></a>珂朵莉树ODT</h2><p>可以较快地实现：</p><ul><li>区间加</li><li>区间赋值</li><li>求区间第k大值</li><li>求区间n次方和</li></ul><blockquote><p>珂朵莉树的思想在于随机数据下的区间赋值操作很可能让大量元素变为同一个数。所以我们以三元组<l,r,v>的形式保存数据（区间 [l,r] 中的元素的值都是v）</l,r,v></p></blockquote><p>存储形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v):<span class="built_in">l</span>(l),<span class="built_in">r</span>(r),<span class="built_in">v</span>(v)&#123;&#125;;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; W)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;W.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; ds;</span><br></pre></td></tr></table></figure><p>1.split操作，区间分裂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//断开”的操作，把&lt;l,r,v&gt;断成&lt;l,pos-1,v&gt;和&lt;pos,r,v&gt;：</span></span><br><span class="line">set&lt;Node&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> now=ds.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(pos,<span class="number">0</span>,<span class="number">0</span>));<span class="comment">// 寻找左端点大于等于pos的第一个节点</span></span><br><span class="line">    <span class="keyword">if</span>(now!=ds.<span class="built_in">end</span>()&amp;&amp;now-&gt;l == pos)</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">   now --; <span class="comment">//往前数一个节点</span></span><br><span class="line">    <span class="keyword">int</span> l=now-&gt;l,r=now-&gt;r,v=now-&gt;v;</span><br><span class="line">    ds.<span class="built_in">erase</span>(now);</span><br><span class="line">    ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l, pos<span class="number">-1</span>, v));</span><br><span class="line">    <span class="keyword">return</span> ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos,r,v)).x; <span class="comment">//nsert默认返回值是一个pair，第一个成员是以pos开头的那个节点的迭代器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.assign操作，区间赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(LL l,LL r,LL v)</span></span>&#123; <span class="comment">//将[l,r]赋值为v</span></span><br><span class="line">    <span class="keyword">auto</span> end=<span class="built_in">split</span>(r+<span class="number">1</span>),begin=<span class="built_in">split</span>(l);</span><br><span class="line">ds.<span class="built_in">erase</span>(begin, end);</span><br><span class="line">    ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：<a href="https://codeforces.com/problemset/problem/915/E">https://codeforces.com/problemset/problem/915/E</a></p><blockquote><p>从现在到学期结束还有 n 天(从 1 到 n 编号)，他们一开始都是工作日。接下来学校的工作人员会<strong>依次</strong>发出 q 个指令，每个指令可以用三个参数 l,r,k 描述：<br>如果 k=1 ，那么从 l 到 r （包含端点）的所有日子都变成<strong>非</strong>工作日。<br>如果 k=2 ，那么从 l 到 r （包含端点）的所有日子都变成<strong>工作日</strong>。</p></blockquote><p>将assign()修改一下，暴力统计即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> end=<span class="built_in">split</span>(r+<span class="number">1</span>),begin=<span class="built_in">split</span>(l),now=begin;</span><br><span class="line"><span class="keyword">for</span>(;now!=end;now++)&#123;</span><br><span class="line">tot += (now-&gt;v)*(now-&gt;r-now-&gt;l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ds.<span class="built_in">erase</span>(begin, end);</span><br><span class="line">    ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">sum -= tot;</span><br><span class="line">sum += (r - l + <span class="number">1</span>) * v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.add()区间加</p><p>直接暴力加法即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> begin=<span class="built_in">split</span>(l),end=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;begin!=end;begin++)</span><br><span class="line">        begin-&gt;v += v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.rank()区间第k小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; tmp;</span><br><span class="line">    <span class="keyword">auto</span> begin=<span class="built_in">split</span>(l),end=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;begin!=end;begin++)</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(&#123;begin-&gt;v, begin-&gt;r-begin-&gt;l+<span class="number">1</span>&#125;);</span><br><span class="line"><span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u:tmp)&#123;</span><br><span class="line">        k -= u.y;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">return</span> u.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.sum_of_pow()区间n次方的和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_of_pow</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> begin=<span class="built_in">split</span>(l),end=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(;begin!=end;begin++)&#123;</span><br><span class="line">tot = (tot + <span class="built_in">fpower</span>(begin-&gt;v, x, y) * (begin-&gt;r-begin-&gt;l+<span class="number">1</span>) % y)%y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ODT经典题：<a href="https://codeforces.com/problemset/problem/896/C">https://codeforces.com/problemset/problem/896/C</a></p><ul><li>区间加</li><li>区间赋值</li><li>求区间第k大值</li><li>求区间n次方和</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">int</span> v;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> _l,<span class="keyword">int</span> _r,<span class="keyword">int</span> _v):<span class="built_in">l</span>(_l),<span class="built_in">r</span>(_r),<span class="built_in">v</span>(_v)&#123;&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;W)<span class="keyword">const</span>&#123;<span class="keyword">return</span> l&lt;W.l;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;Node&gt; ds;</span><br><span class="line"><span class="keyword">int</span> n,m,seed,vmx;</span><br><span class="line"><span class="keyword">int</span> sum=n;</span><br><span class="line"></span><br><span class="line">set&lt;Node&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> now=ds.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(pos,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">if</span>(now!=ds.<span class="built_in">end</span>() &amp;&amp; now-&gt;l == pos)</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">now --;</span><br><span class="line"><span class="keyword">int</span> l=now-&gt;l,r=now-&gt;r,v=now-&gt;v;;</span><br><span class="line">ds.<span class="built_in">erase</span>(now);</span><br><span class="line">ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,pos<span class="number">-1</span>,v));</span><br><span class="line"><span class="keyword">return</span> ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(pos, r, v)).x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> end=<span class="built_in">split</span>(r+<span class="number">1</span>),begin=<span class="built_in">split</span>(l);</span><br><span class="line">ds.<span class="built_in">erase</span>(begin, end);</span><br><span class="line">    ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(l,r,v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> begin=<span class="built_in">split</span>(l),end=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;begin!=end;begin++)</span><br><span class="line">        begin-&gt;v += v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; tmp;</span><br><span class="line">    <span class="keyword">auto</span> begin=<span class="built_in">split</span>(l),end=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;begin!=end;begin++)</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(&#123;begin-&gt;v, begin-&gt;r-begin-&gt;l+<span class="number">1</span>&#125;);</span><br><span class="line"><span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u:tmp)&#123;</span><br><span class="line">        k -= u.y;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">return</span> u.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum_of_pow</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> begin=<span class="built_in">split</span>(l),end=<span class="built_in">split</span>(r+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(;begin!=end;begin++)&#123;</span><br><span class="line">tot = (tot + <span class="built_in">fpower</span>(begin-&gt;v, x, y) * (begin-&gt;r-begin-&gt;l+<span class="number">1</span>) % y)%y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">rnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret = seed;</span><br><span class="line">    seed = (seed * <span class="number">7</span> + <span class="number">13</span>) % <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),seed=<span class="built_in">read</span>(),vmx=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> r=<span class="built_in">rnd</span>();</span><br><span class="line">ds.<span class="built_in">insert</span>(<span class="built_in">Node</span>(i, i, r%vmx+<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="comment">//input</span></span><br><span class="line">LL ty=<span class="built_in">rnd</span>()%<span class="number">4</span>+<span class="number">1</span>,l=<span class="built_in">rnd</span>()%n+<span class="number">1</span>,r=<span class="built_in">rnd</span>()%n+<span class="number">1</span>,x,y;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="built_in">swap</span>(l,r);</span><br><span class="line"><span class="keyword">if</span>(ty==<span class="number">3</span>) x=<span class="built_in">rnd</span>()%(r-l+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> x=<span class="built_in">rnd</span>()%vmx+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ty==<span class="number">4</span>) y=<span class="built_in">rnd</span>()%vmx+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ty==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(l,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ty==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">assign</span>(l,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ty==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">kth</span>(l, r, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum_of_pow</span>(l ,r, x, y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;珂朵莉树ODT&quot;&gt;&lt;a href=&quot;#珂朵莉树ODT&quot; class=&quot;headerlink&quot; title=&quot;珂朵莉树ODT&quot;&gt;&lt;/a&gt;珂朵莉树ODT&lt;/h2&gt;&lt;p&gt;可以较快地实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区间加&lt;/li&gt;
&lt;li&gt;区间赋值&lt;/li&gt;
&lt;li&gt;求</summary>
      
    
    
    
    <category term="数据结构" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="珂朵莉树" scheme="https://wangyuhang-cmd.github.io/tags/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>积性函数</title>
    <link href="https://wangyuhang-cmd.github.io/2022/08/12/%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    <id>https://wangyuhang-cmd.github.io/2022/08/12/%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0/</id>
    <published>2022-08-12T11:01:33.000Z</published>
    <updated>2022-08-12T11:07:22.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h2><p>定义：</p><p>如果函数$f:N \to R$满足于任意一对互质的正整数p,q.都有$f(pq)=f(p)f(q)$则称f为积性函数</p><p>命题：</p><p>如果$f(n)$坏人$g(n)$为积性函数，则$h(n)=f(n)g(n)$也为积性函数</p><p>设f为积性函数，假设$n=p_1^{q_1}…p_k^{q_k}$,$f(n)=f(p_1^{q_1})…f(p_k^{q_k})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">not</span> prime[i]) p[++tot] = i, cnt[i] = <span class="number">1</span>, f[i] = <span class="built_in">calc_f</span>(i, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * p[j] &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">not</span> prime[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        cnt[i * p[j]] = cnt[i] + <span class="number">1</span>;</span><br><span class="line">        f[i * p[j]] = f[i]/<span class="built_in">calc_f</span>(p[j], cnt[i])*<span class="built_in">calc_f</span>(p[j], cnt[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[i * p[j]] = <span class="number">1</span></span><br><span class="line">        f[i * p[j]] = f[i] * <span class="built_in">calc_f</span>(p[j], <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性筛求n个数的正因子个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10000010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">LL Cnt[N],d[N];</span><br><span class="line"><span class="keyword">bool</span> numlist[N];</span><br><span class="line"><span class="keyword">int</span> prime[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eular</span><span class="params">(<span class="keyword">int</span> n=<span class="number">10000000</span>)</span></span>&#123;</span><br><span class="line">    Cnt[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!numlist[i])&#123;</span><br><span class="line">            prime[++cnt]=i;</span><br><span class="line">            Cnt[i]=<span class="number">2</span>;</span><br><span class="line">            d[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;prime[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            numlist[i*prime[j]] =<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                Cnt[i*prime[j]]=Cnt[i]/(d[i]+<span class="number">1</span>)*(d[i]+<span class="number">2</span>);</span><br><span class="line">                d[i*prime[j]]=d[i]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            d[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            Cnt[i*prime[j]]=Cnt[i]*Cnt[prime[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://codeforces.com/contest/757/problem/E">E. Bash Plays with Functions</a></p><p>很容易观察出$f(x)$是积性函数，因此我们先预处理出所有的$f_r(1-20)$因为1e6以内分解质因数后最多的质数的指数为20.然后logn内分解并可以乘得答案。</p><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><p>作用：</p><p>已知$g(n)$的因数和$f(n)=\sum_{d|n}g(d)$,通过f反求g</p><p>实际上只要记住如果能够推到成如$f(n)=\sum_{d|n}g(d)$形式后都能通过反演得到:</p><script type="math/tex; mode=display">g(n)=\sum_{d|n} \mu (n/d)f(d)</script><p>其中$\mu()$为莫比乌斯函数。</p><h4 id="例子-环计数问题"><a href="#例子-环计数问题" class="headerlink" title="例子 环计数问题"></a>例子 环计数问题</h4><p>假设 <em>n</em> 个元组成一个环，每个元都是 1<em>,</em> 2<em>, …,**r</em> 中的一个数，两个环是不同的环当且仅当它们不能通过旋转使得两个环中对应的每个元素都相等。求有多少个这样的环。</p><p>首先我们构造一个无限长的序列，假设此序列的周期为d，其中d为n的因子。有$r^n=\sum_{d|n}d*f(d)$,因此由反演得$f(n)=\frac{1}{n}\sum_{d|n}\mu(\frac{n}{d})r^d$</p><h3 id="反演2"><a href="#反演2" class="headerlink" title="反演2"></a>反演2</h3><p>设$f:N \to R$，$g:N \to R$ 是两个函数，且存在正整数N，对于所有n&gt;N, f(n)=g(n)=0,则:</p><p>$f(n)=\sum_{n|m}g(m)$等价于$g(n)=\sum_{n|m}\mu (\frac{m}{n} )f(m)$当$m \le N$</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p>两个长度为 n 的序列 a, b，求满足 $gcd(x, y) = 1$ 且有$a_{b_x} = b_{a_y}$的对 (x, y) 的数量。$(1 ≤ n ≤ 10^5, 1 ≤ a_i, b_i ≤ n)$</p><p>令$f(d)=\sum_{1\le x,y \le n}[a_{b_x}=b_{a_y}][gcd(x,y)=d]$ , $g(d)=\sum_{d|x,d|y}[a_{b_x}=b_{a_y}]$</p><p>由反演2得:$f(d)=\sum_{d|d’}g(d’)\mu (\frac{d’}{d})$，因此答案为$f(1)=\sum_{d=1}^ng(d)\mu (d)$</p><p>其中g(d)是可以轻松算出来的，总时间复杂度为$O(nlogn)$</p><h2 id="迪利克雷卷积"><a href="#迪利克雷卷积" class="headerlink" title="迪利克雷卷积"></a>迪利克雷卷积</h2><p>定理：</p><p>设$f:N \to R$,$g: N\to R$是两个函数，则它们的迪利克雷卷积为$(f*g)(n)=\sum_{d|n}f(d)g(\frac{n}{d})$</p><p>通过迪利克雷卷积可以将莫比乌斯反演写成：</p><p>$f=g<em>1$ &lt;==&gt; $g = f</em>\mu$</p><blockquote><p>一些公式</p><p>$\frac{\phi(n)}{n}=\sum_{d|n}\mu(d)\frac{n}{d}$</p><p>应用：快速求$M(n)=\sum_{i=1}^{n}\mu(i)$，其中$n \le 10^{11}$ (杜教筛)</p><p>$M(n)=1-\sum_{i=2}^{n}M(\lfloor \frac{n}{i} \rfloor)$,使用整除分块</p></blockquote><h2 id="广义莫比乌斯反演"><a href="#广义莫比乌斯反演" class="headerlink" title="广义莫比乌斯反演"></a>广义莫比乌斯反演</h2><p>设$(X, \le)$是下有限的偏序集，$f,g:X \to R$则$f(x)=\sum_{y \le x}g(y)$等价于$g(x)=\sum_{y \le x}\mu(y,x)f(y)$</p><p>其中$\mu(x.y)$满足</p><script type="math/tex; mode=display">f(x)=\left\{\begin{aligned}1  \qquad  x=y\\-\sum_{x\le z\lt y} \mu(x,y) \qquad  x!=y\\\end{aligned}\right.</script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;积性函数&quot;&gt;&lt;a href=&quot;#积性函数&quot; class=&quot;headerlink&quot; title=&quot;积性函数&quot;&gt;&lt;/a&gt;积性函数&lt;/h2&gt;&lt;p&gt;定义：&lt;/p&gt;
&lt;p&gt;如果函数$f:N \to R$满足于任意一对互质的正整数p,q.都有$f(pq)=f(p)f(q)$则</summary>
      
    
    
    
    <category term="数学" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="积性函数" scheme="https://wangyuhang-cmd.github.io/tags/%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Codecherf START51 Div4 Chef &amp; Cook Game</title>
    <link href="https://wangyuhang-cmd.github.io/2022/08/11/Codecherf-START51-Div4-Chef-Cook-Game/"/>
    <id>https://wangyuhang-cmd.github.io/2022/08/11/Codecherf-START51-Div4-Chef-Cook-Game/</id>
    <published>2022-08-11T03:45:48.000Z</published>
    <updated>2022-08-11T03:46:26.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codecherf-START51-Div4-Chef-amp-Cook-Game"><a href="#Codecherf-START51-Div4-Chef-amp-Cook-Game" class="headerlink" title="Codecherf  START51 Div4 Chef &amp; Cook Game"></a>Codecherf  START51 Div4 Chef &amp; Cook Game</h2><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>There is a non-negative integer array A<em>A</em> of length N<em>N</em>. Chef and Cook will play a game on the array with Chef starting first.</p><p>In one turn the player will perform the following operation:</p><ul><li>Choose two indices i,j such that $1 \le i \lt j \le N$ and $A_i \gt 0$.</li><li>Set $A_i \gets A_i-1$ and $A_j \gets A_j+1$,subtract 1 from $A_i$ and add 1 to $A_j$</li></ul><p>The player who is unable to perform the operation loses. If both Chef and Cook play optimally, who will win?</p><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>首先，对于a[i]是偶数的位置，我们很容易想出来对照操作:只要你选了这个位置，我也选，因此对于偶数的位置我们不需要考虑。因此单独考虑a[i]为奇数的位置，我们可以将其转化为Nim游戏，对于i位置，可以移动到大于i的任意位置，因此可以看作可以取1~N-i个石子,所以我们把奇数位置的所有N-i异或起来，如果异或和不为0，则为先手必胜，否则先手必败。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cook\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">LL sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>) sum^=(n-i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (sum?<span class="string">&quot;Chef&quot;</span>:<span class="string">&quot;Cook&quot;</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Codecherf-START51-Div4-Chef-amp-Cook-Game&quot;&gt;&lt;a href=&quot;#Codecherf-START51-Div4-Chef-amp-Cook-Game&quot; class=&quot;headerlink&quot; title=&quot;Codecherf </summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>数据结构维护序列_插入首部与维护位置</title>
    <link href="https://wangyuhang-cmd.github.io/2022/07/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%B4%E6%8A%A4%E5%BA%8F%E5%88%97-%E6%8F%92%E5%85%A5%E9%A6%96%E9%83%A8%E4%B8%8E%E7%BB%B4%E6%8A%A4%E4%BD%8D%E7%BD%AE/"/>
    <id>https://wangyuhang-cmd.github.io/2022/07/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%B4%E6%8A%A4%E5%BA%8F%E5%88%97-%E6%8F%92%E5%85%A5%E9%A6%96%E9%83%A8%E4%B8%8E%E7%BB%B4%E6%8A%A4%E4%BD%8D%E7%BD%AE/</id>
    <published>2022-07-27T18:30:25.000Z</published>
    <updated>2022-07-27T18:30:49.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="维护序列-插入首部问题"><a href="#维护序列-插入首部问题" class="headerlink" title="维护序列:插入首部问题"></a>维护序列:插入首部问题</h2><p>经常能做到一些数据结构维护的，将一个序列中的某个位置的东西插入首部的问题。有些只需要简单用set或者其他基本的数据结构维护一下信息就行了，但是有些需要经过一些变化，一般需要树状数组或者线段树在变换后的基础上进行维护。</p><p>例如：</p><p><a href="https://codeforces.com/contest/1288/problem/E">E. Messenger Simulator</a></p><p>大意就是一个n排列，m次操作把排列中的某个数字放到开头，你要维护每一个数字在序列中出现过的最左端和最右端。</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><p>预先留出n+m个空，n排列初始化到n+m最后n个位置。然后用BIT维护每个位置上是否有东西。每次更新的时候只需要修改左端点并查询当前位置前面有数的个数和右端点取max即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">600010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],l[N],r[N],pos[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-x))</span></span><br><span class="line"><span class="keyword">int</span> tr[N],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;n=_n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;<span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) tr[x]+=d;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">int</span> ans=<span class="number">0</span>;<span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) ans+=tr[x];<span class="keyword">return</span> ans;&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) l[i]=r[i]=i,pos[i]=m+i;</span><br><span class="line">T.<span class="built_in">resize</span>(n+m+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) T.<span class="built_in">add</span>(i+m,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;--i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">l[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pl=pos[x];</span><br><span class="line"><span class="keyword">int</span> num=T.<span class="built_in">ask</span>(pl);</span><br><span class="line">r[x]=<span class="built_in">max</span>(r[x], num);</span><br><span class="line">T.<span class="built_in">add</span>(pl,<span class="number">-1</span>);</span><br><span class="line">pos[x]=i;</span><br><span class="line">T.<span class="built_in">add</span>(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> pl=pos[i];</span><br><span class="line"><span class="keyword">int</span> num=T.<span class="built_in">ask</span>(pl);</span><br><span class="line">r[i]=<span class="built_in">max</span>(r[i], num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,l[i],r[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;维护序列-插入首部问题&quot;&gt;&lt;a href=&quot;#维护序列-插入首部问题&quot; class=&quot;headerlink&quot; title=&quot;维护序列:插入首部问题&quot;&gt;&lt;/a&gt;维护序列:插入首部问题&lt;/h2&gt;&lt;p&gt;经常能做到一些数据结构维护的，将一个序列中的某个位置的东西插入首部的</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>杭电多校第一场</title>
    <link href="https://wangyuhang-cmd.github.io/2022/07/26/%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>https://wangyuhang-cmd.github.io/2022/07/26/%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</id>
    <published>2022-07-26T03:39:23.000Z</published>
    <updated>2022-07-26T03:40:59.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="杭电多校第一场"><a href="#杭电多校第一场" class="headerlink" title="杭电多校第一场"></a>杭电多校第一场</h2><h3 id="A-string"><a href="#A-string" class="headerlink" title="A.string"></a>A.string</h3><blockquote><p>We define F_G as the number of positive integers x that satisfy the following conditions:</p><p>$1≤x≤G$</p><p>$G[1,x]=G[Glen−x+1,Glen]$</p><p>The length of the common part of the intervals $[1,x]$and $[G_{len}-x+1,G_{len}]$is greater than 0 and is divisible by k. </p></blockquote><p>做法：</p><p>首先我们用exkmp处理出z[i]数组，表示[1,n]和[i,n]的LCP，然后如果这个LCP的长度满足大于等于i的时候,就会对[1, n*(i-1)+k]….会产生贡献.因此做一个前缀和就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>,M=N*<span class="number">2</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],z[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exkmp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,l=<span class="number">0</span>,r=<span class="number">0</span>; i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;l+z[l]) z[i]=<span class="built_in">min</span>(z[i-l+<span class="number">1</span>],l+z[l]-i);</span><br><span class="line"><span class="keyword">while</span>(i+z[i]&lt;=n&amp;&amp;s[z[i]+<span class="number">1</span>]==s[i+z[i]])z[i]++;</span><br><span class="line"><span class="keyword">if</span>(i+z[i]&gt;l+z[l])l=i;</span><br><span class="line">&#125;</span><br><span class="line">z[<span class="number">1</span>]=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">k=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">exkmp</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> len=z[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(len&gt;=i+k)&#123;</span><br><span class="line">len = ((len-i)/k)*k;;</span><br><span class="line">a[<span class="number">2</span>*i+k] ++;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*i+len+k&lt;=n) a[<span class="number">2</span>*i+len+k] --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i+k&lt;=n)a[i+k]+=a[i]; </span><br><span class="line">ans=ans*(a[i]+<span class="number">1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) z[i]=a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;杭电多校第一场&quot;&gt;&lt;a href=&quot;#杭电多校第一场&quot; class=&quot;headerlink&quot; title=&quot;杭电多校第一场&quot;&gt;&lt;/a&gt;杭电多校第一场&lt;/h2&gt;&lt;h3 id=&quot;A-string&quot;&gt;&lt;a href=&quot;#A-string&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>16届东北四省赛题解</title>
    <link href="https://wangyuhang-cmd.github.io/2022/07/25/16%E5%B1%8A%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    <id>https://wangyuhang-cmd.github.io/2022/07/25/16%E5%B1%8A%E4%B8%9C%E5%8C%97%E5%9B%9B%E7%9C%81%E8%B5%9B%E9%A2%98%E8%A7%A3/</id>
    <published>2022-07-25T08:46:21.000Z</published>
    <updated>2022-07-25T08:46:57.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022东北四省赛题解"><a href="#2022东北四省赛题解" class="headerlink" title="2022东北四省赛题解"></a>2022东北四省赛题解</h2><p><a href="https://ac.nowcoder.com/acm/contest/35371/A">A. Encryption</a></p><p>SA+二分</p><p>B. <a href="https://ac.nowcoder.com/acm/contest/35371/B">Capital Program</a></p><p>贪心+树形+二分</p><blockquote><p>在一棵树上选择k个相连的点，要求最小化离这k个城市最远的城市的距离</p></blockquote><p>首先我们贪心的想，当这棵树的根节点是直径中点的时候，一定有其他所有城市离根开始延申的城市的距离最小。</p><p>然后就是做一遍树型DP求出来每个点往下延申的最长深度，接着二分答案最小化的城市距离，一遍dfs，如果当前点到往下延伸的点的距离大于k意味着当前点也需要被选上，check最终选的点的数量是否&lt;=k即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line"><span class="keyword">int</span> n,m,dep[N],color[N],depth,f[N],poi=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre, <span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">    color[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==pre) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(v,u,depth)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]==depth) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">color[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">f[u]=<span class="built_in">max</span>(dep[u],f[u]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==pre) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs_init</span>(v, u);</span><br><span class="line">f[u]=<span class="built_in">max</span>(f[u], f[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth&lt;x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==poi) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i]-dep[i]&gt;=x) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    poi=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[i]&gt;dep[poi]) poi=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line">    <span class="built_in">dfs</span>(poi, <span class="number">0</span>);</span><br><span class="line">    depth=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        depth=<span class="built_in">max</span>(depth, dep[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">find</span>(poi,<span class="number">0</span>,depth);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(color[i]&amp;&amp;dep[i]==(<span class="number">1</span>+depth)/<span class="number">2</span>) poi=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span> dep);</span><br><span class="line"><span class="built_in">dfs</span>(poi, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs_init</span>(poi,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=depth;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/35371/C">C. Segment Tree</a></p><p>找规律题。手动模拟下线段树叶子节点的增加情况可以发现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    n=<span class="built_in">read</span>(),q=<span class="built_in">read</span>();</span><br><span class="line">    q=<span class="built_in">min</span>(q, n);</span><br><span class="line">    <span class="keyword">int</span> h = (<span class="keyword">int</span>)(<span class="built_in">log2</span>(n)), k = (<span class="keyword">int</span>)(<span class="built_in">log2</span>(q));</span><br><span class="line">    <span class="keyword">if</span> (q &lt;= n-(<span class="number">1ll</span>&lt;&lt;h)) &#123;</span><br><span class="line">        ans = (<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>)) - <span class="number">1</span> + (h - k + <span class="number">1</span>) * q;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (q &lt;= (<span class="number">1</span> &lt;&lt; h)) &#123;</span><br><span class="line">        ans=(<span class="number">1ll</span>&lt;&lt;(k + <span class="number">1</span>))-(<span class="number">1ll</span>&lt;&lt;h)<span class="number">-1</span>+(h-k)*q+n;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ans=n+q<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/35371/D">D. Game</a></p><p>随机化/莫队</p><p>我们很容易发现如果[l,r]中出现的个数都是偶数个则先手必败。正常做可以使用莫队，但是VP的时候我们是用随机化过的，因为给每个数随机出一个比较大的数可以防止出现a^b^c=0的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,a[N],s[N],rd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),q=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;++i) rd[i]=<span class="built_in">rand</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) s[i]=s[i<span class="number">-1</span>]^rd[a[i]];</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> x=s[r]^s[l<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>((x)==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/35371/E">E. Plus</a></p><p>签到+诈骗+打表</p><p>VP的时候先猜了一个结论：这个解很少，然后打了一个表发现只有p=2,q=3为解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N];</span><br><span class="line">string p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="built_in">print</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2 3\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/35371/G">G. Hot Water Pipe</a></p><p>这是一道复杂度分析题，通过分析每一次操作我们可以发现这道题完全可以暴力。我们只需要暴力维护每一段即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N];</span><br><span class="line"><span class="keyword">int</span> tmn,tmx;</span><br><span class="line">deque&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=(tmx-tmn+<span class="number">1</span>);</span><br><span class="line">    x-=tmn;</span><br><span class="line">    <span class="keyword">return</span> (x%len+len)%len+tmn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),tmn=<span class="built_in">read</span>(),tmx=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        a[i]=<span class="built_in">read</span>();</span><br><span class="line">        q.<span class="built_in">push_front</span>(&#123;a[i], <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> delta=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        LL ans =<span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">read</span>(),k=<span class="built_in">read</span>();</span><br><span class="line">        delta += t;</span><br><span class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(now == k) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">auto</span> u=q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">if</span>(u.y+now&lt;=k)&#123;</span><br><span class="line">                ans += <span class="number">1ll</span>*u.y*<span class="built_in">get</span>(u.x-delta);</span><br><span class="line">                now += u.y ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans += <span class="number">1ll</span>*(k-now)*<span class="built_in">get</span>(u.x-delta);</span><br><span class="line">                u.y -= k-now;</span><br><span class="line">                q.<span class="built_in">push_front</span>(u);</span><br><span class="line">                now = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(now!=k) ans += <span class="number">1ll</span>*(k-now)*tmx;</span><br><span class="line">        q.<span class="built_in">push_back</span>(&#123;<span class="built_in">get</span>(tmx+delta), <span class="built_in">min</span>(n,k)&#125;);</span><br><span class="line">        <span class="built_in">print</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/35371/I">I. Generator</a></p><p>签到题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> t = <span class="number">0.57721566490153287</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1000000</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans += <span class="number">1.0</span> / (i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans = <span class="number">1</span> + <span class="built_in">log</span>(n) + <span class="number">1.0</span> / (<span class="number">2</span> * n) + t;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>K.<a href="https://ac.nowcoder.com/acm/contest/35371/K">Maze</a></p><p>分层图BFS，签到题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z,p,o;</span><br><span class="line">&#125;;</span><br><span class="line">Node q[N*N*N];</span><br><span class="line"><span class="keyword">int</span> hh,tt;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="keyword">int</span> g[N][N],st[N][N][N][<span class="number">4</span>]; <span class="comment">//0表示向下 1表示向右 2表示向上 3表示向左</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">rep</span>(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">            g[i][j]=(str[j]==<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    hh=<span class="number">0</span>,tt=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[<span class="number">1</span>][<span class="number">2</span>]) q[++tt]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,st[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[<span class="number">2</span>][<span class="number">1</span>]) q[++tt]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,st[<span class="number">2</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(hh&lt;=tt)&#123;</span><br><span class="line">        <span class="keyword">auto</span> u=q[hh++];</span><br><span class="line">        <span class="keyword">int</span> x=u.x,y=u.y,z=u.z,p=u.p,o=u.o;</span><br><span class="line">        <span class="keyword">if</span>(x==n&amp;&amp;y==n) &#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> xx=x+mov[i][<span class="number">0</span>],yy=y+mov[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(xx&lt;<span class="number">1</span>||xx&gt;n||yy&lt;<span class="number">1</span>||yy&gt;n||g[xx][yy]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==o)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p+<span class="number">1</span>&gt;m||st[xx][yy][p+<span class="number">1</span>][o]) <span class="keyword">continue</span>;</span><br><span class="line">                st[xx][yy][p+<span class="number">1</span>][o]=<span class="number">1</span>;</span><br><span class="line">                q[++tt]=&#123;xx,yy,z+<span class="number">1</span>,p+<span class="number">1</span>,o&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(st[xx][yy][<span class="number">1</span>][i]) <span class="keyword">continue</span>;</span><br><span class="line">                st[xx][yy][<span class="number">1</span>][i]=<span class="number">1</span>;</span><br><span class="line">                q[++tt]=&#123;xx,yy,z+<span class="number">1</span>,<span class="number">1</span>,i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">0x3f3f3f3f</span>) <span class="built_in">print</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">print</span>(ans);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="built_in">rep</span>(k,<span class="number">1</span>,m) st[i][j][k][<span class="number">0</span>]=st[i][j][k][<span class="number">1</span>]=st[i][j][k][<span class="number">2</span>]=st[i][j][k][<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>L. <a href="https://ac.nowcoder.com/acm/contest/35371/L">Polygon</a></p><p>签到题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx = *<span class="built_in">max_element</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">if</span> (sum - mx &gt; mx) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022东北四省赛题解&quot;&gt;&lt;a href=&quot;#2022东北四省赛题解&quot; class=&quot;headerlink&quot; title=&quot;2022东北四省赛题解&quot;&gt;&lt;/a&gt;2022东北四省赛题解&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/a</summary>
      
    
    
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>牛客多校第一场</title>
    <link href="https://wangyuhang-cmd.github.io/2022/07/25/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>https://wangyuhang-cmd.github.io/2022/07/25/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</id>
    <published>2022-07-25T08:43:23.000Z</published>
    <updated>2022-07-25T08:48:51.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多校牛客第一场-amp-杭电第一场"><a href="#多校牛客第一场-amp-杭电第一场" class="headerlink" title="多校牛客第一场&amp;杭电第一场"></a>多校牛客第一场&amp;杭电第一场</h2><h3 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h3><h4 id="I-Chiitoitsu"><a href="#I-Chiitoitsu" class="headerlink" title="I.Chiitoitsu"></a><a href="https://ac.nowcoder.com/acm/contest/33186/I">I.Chiitoitsu</a></h4><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>首先第一步我们应该要想到一个贪心策略，那就是一定是还原原来在手上的那副牌。因为交换手中没有成双的单牌一定会使得期望大。</p><p>因此倒着写一个期望DP即可，期望DP表示<code>dp[i][j]</code>牌堆还剩i张牌手上有j个对子的摸到7个对子的期望步数。</p><p>$dp[i][j]=\frac{(13-2<em>j)\cdot 3}{i}d[i+1][j+1]+\frac{i-(13-2</em>j)\cdot3}{i}dp[i+1][j+1]$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N],inv[N];</span><br><span class="line">LL f[<span class="number">34</span>*<span class="number">4</span>+<span class="number">1</span>][<span class="number">9</span>];</span><br><span class="line">string p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">34</span>*<span class="number">4</span>;++i)</span><br><span class="line">inv[i]=<span class="built_in">fpower</span>(i,mod<span class="number">-2</span>,mod);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">3</span>][<span class="number">6</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=<span class="number">123</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">5</span>;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">7</span>-j)*<span class="number">3</span>&gt;i) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> p=(<span class="number">13</span><span class="number">-2ll</span>*j)*<span class="number">3ll</span>*inv[i]%mod;</span><br><span class="line">            f[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(f[i<span class="number">-1</span>][j+<span class="number">1</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                f[i][j]+=(f[i<span class="number">-1</span>][j+<span class="number">1</span>]+<span class="number">1</span>)*p%mod;</span><br><span class="line">                f[i][j]%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f[i<span class="number">-1</span>][j]!=<span class="number">-1</span>)&#123;</span><br><span class="line">                f[i][j]+=(f[i<span class="number">-1</span>][j]+<span class="number">1</span>)*(<span class="number">1</span>-p+mod)%mod;</span><br><span class="line">                f[i][j]%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[i][<span class="number">6</span>]=<span class="number">3</span>*inv[i]%mod;</span><br><span class="line">        <span class="keyword">if</span>(f[i<span class="number">-1</span>][<span class="number">6</span>]!=<span class="number">-1</span>)&#123;</span><br><span class="line">            f[i][<span class="number">6</span>]+=(f[i<span class="number">-1</span>][<span class="number">6</span>]+<span class="number">1</span>)*((<span class="number">1</span><span class="number">-3</span>*inv[i])%mod+mod)%mod;</span><br><span class="line">            f[i][<span class="number">6</span>]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> Case)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; Case &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; p;</span><br><span class="line">    map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); i += <span class="number">2</span>) &#123;</span><br><span class="line">        string q = p.<span class="built_in">substr</span>(i, <span class="number">2</span>);</span><br><span class="line">        mp[q]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : mp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u.y == <span class="number">1</span>) c1++;</span><br><span class="line">        <span class="keyword">else</span>   c2++;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; f[<span class="number">123</span>][c2] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="E-LTCS"><a href="#E-LTCS" class="headerlink" title="E. LTCS"></a><a href="https://ac.nowcoder.com/acm/contest/33186/E">E. LTCS</a></h4><blockquote><p>首先给出了一个定义：一颗有根树Ta是Tb的子序列当且仅当存在单身F()使得$u \in T_a$ 有 $F(u) \in T_b$且$u$和$F(u)$在两棵树内分别保持同祖同子孙的关系。</p></blockquote><h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>然后我们定义DP状态：</p><p><code>f[u][v][1]</code>表示分别以u和v为根节点的两棵树的最长公共子序列的大小，且公共子序列中包含了u和v点有<code>t1[u]=t2[v]</code></p><p><code>f[u][v][0]</code>表示了涵盖了第一种情况下的，即以u为根和以v为根的最大公共子序列。</p><p>有转移<code>f[u][v][0]=max&#123;f[u1][v1][1]&#125;</code>，其中$u1 \in {son_of_u_and_u}$，$v1 \in {son_of_v_and_v}$</p><p>对于<code>f[u][v][1]</code>的处理我们可以发现相当于在<code>t1[u]==t2[v]</code>的条件下做一个二分图最优匹配：</p><blockquote><p>$T_a$中的某个点可以映射向$T_b$中的某些点，每两个点对之间都有一定的权值，表示匹配之后的最大公共节点个数。要求求整个的最大公共个数。</p></blockquote><p>因此我们对于每一层的节点直接用KM进行转移就行了。</p><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><p>我枚举两个节点是$O(n^2)$的，然后在枚举的时候可以顺便把图给建出来，KM复杂度是$O(n^3)$,但是总的时间复杂度并不是$O(n^5)$,因为每次做KM的时候实际上并不是对n个点做，KM实际上可以在上一次的基础上进行增广，每次增广较小的那一坨点，因此我们可以用一个类似于启发式的合并方式每次增广较小的子树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #define int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">510</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N];</span><br><span class="line"><span class="keyword">int</span> f[N][N][<span class="number">2</span>];  <span class="comment">//f[i][j][0/1] 第一棵树以i为根第二棵树以j为根u和v不/一定匹配的答案</span></span><br><span class="line"><span class="keyword">int</span> t1[N],t2[N]; <span class="comment">//点权</span></span><br><span class="line"><span class="keyword">bool</span> vis[N][N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge1[N],edge2[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; son1,son2; <span class="comment">//每次小的往大的合并</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> match[N], pre[N];</span><br><span class="line">LL mp[N][N], ex[N], ey[N], slack[N]; </span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//KM板子=======================</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span></span>;  <span class="function">LL <span class="title">KM</span><span class="params">()</span></span>;<span class="comment">//=</span></span><br><span class="line"><span class="comment">//=============================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa1,<span class="keyword">int</span> v,<span class="keyword">int</span> fa2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u][v]) <span class="keyword">return</span> ; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u1:edge1[u]) <span class="keyword">if</span>(u1!=fa1) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v1:edge2[v]) <span class="keyword">if</span>(v1!=fa2) </span><br><span class="line">            <span class="keyword">if</span>(!vis[u1][v1]) </span><br><span class="line"><span class="built_in">dfs</span>(u1, u, v1, v);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u1:edge1[u]) <span class="keyword">if</span>(u1!=fa1&amp;&amp;!vis[u1][v]) <span class="built_in">dfs</span>(u1, u, v, fa2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v1:edge2[v]) <span class="keyword">if</span>(v1!=fa2&amp;&amp;!vis[u][v1]) <span class="built_in">dfs</span>(u, fa1, v1, v);</span><br><span class="line"></span><br><span class="line">son1.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u1:edge1[u])</span><br><span class="line"><span class="keyword">if</span>(u1!=fa1)</span><br><span class="line">son1.<span class="built_in">push_back</span>(u1),f[u][v][<span class="number">0</span>]=<span class="built_in">max</span>(f[u][v][<span class="number">0</span>], f[u1][v][<span class="number">0</span>]);</span><br><span class="line">son2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v1:edge2[v])</span><br><span class="line"><span class="keyword">if</span>(v1!=fa2)</span><br><span class="line">son2.<span class="built_in">push_back</span>(v1),f[u][v][<span class="number">0</span>]=<span class="built_in">max</span>(f[u][v][<span class="number">0</span>], f[u][v1][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(son1.<span class="built_in">size</span>()&gt;son2.<span class="built_in">size</span>()) son1.<span class="built_in">swap</span>(son2),flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u1:edge1[u]) <span class="keyword">if</span>(u1!=fa1)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v1:edge2[v]) <span class="keyword">if</span>(v1!=fa2) </span><br><span class="line">flag?mp[v1][u1]=f[u1][v1][<span class="number">0</span>]:mp[u1][v1]=f[u1][v1][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vis[u][v]=<span class="number">1</span>;</span><br><span class="line">f[u][v][<span class="number">1</span>]=t1[u]==t2[v]?<span class="built_in">KM</span>()+<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">f[u][v][<span class="number">0</span>]=<span class="built_in">max</span>(f[u][v][<span class="number">0</span>], f[u][v][<span class="number">1</span>]); <span class="comment">//不一定匹配包含了匹配</span></span><br><span class="line"><span class="comment">//清空这一层的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u1:edge1[u]) <span class="keyword">if</span>(u1!=fa1)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v1:edge2[v]) <span class="keyword">if</span>(u1!=fa2)</span><br><span class="line">flag?mp[v1][u1]=<span class="number">0</span>:mp[u1][v1]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) t1[i]=<span class="built_in">read</span>(); <span class="built_in">rep</span>(i,<span class="number">1</span>,m) t2[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">edge1[u].<span class="built_in">push_back</span>(v),edge1[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">edge2[u].<span class="built_in">push_back</span>(v),edge2[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);  <span class="comment">//记忆化</span></span><br><span class="line"><span class="built_in">print</span>(f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">LL x, y = <span class="number">0</span>, yy = <span class="number">0</span>, delta;</span><br><span class="line">pre[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: son2) pre[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: son2) slack[i] = INF;</span><br><span class="line">    match[y] = u;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        x = match[y], delta = INF, st[y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i: son2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st[i])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(slack[i] &gt; ex[x] + ey[i] - mp[x][i])&#123;</span><br><span class="line">                slack[i] = ex[x] + ey[i] - mp[x][i];</span><br><span class="line">                pre[i] = y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(slack[i] &lt; delta) &#123;delta = slack[i];yy = i;&#125;</span><br><span class="line">        &#125;<span class="keyword">if</span>(st[<span class="number">0</span>]) ex[match[<span class="number">0</span>]] -= delta, ey[<span class="number">0</span>] += delta;</span><br><span class="line">            <span class="keyword">else</span> slack[<span class="number">0</span>] -= delta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i: son2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st[i]) ex[match[i]] -= delta, ey[i] += delta;</span><br><span class="line">            <span class="keyword">else</span> slack[i] -= delta;</span><br><span class="line">        &#125;</span><br><span class="line">        y = yy;</span><br><span class="line">        <span class="keyword">if</span>(match[y]==<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;match[y] = match[pre[y]];y = pre[y];&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">KM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i: son2) match[i] = <span class="number">-1</span>;</span><br><span class="line">match[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: son1) ex[i] = ey[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: son2) ex[i] = ey[i] = <span class="number">0</span>;</span><br><span class="line">    ex[<span class="number">0</span>] = ey[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: son1)&#123;</span><br><span class="line">st[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j: son2) st[j] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">check</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: son2)</span><br><span class="line">        <span class="keyword">if</span>(match[i] != <span class="number">-1</span>) res += mp[match[i]][i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多校牛客第一场-amp-杭电第一场&quot;&gt;&lt;a href=&quot;#多校牛客第一场-amp-杭电第一场&quot; class=&quot;headerlink&quot; title=&quot;多校牛客第一场&amp;amp;杭电第一场&quot;&gt;&lt;/a&gt;多校牛客第一场&amp;amp;杭电第一场&lt;/h2&gt;&lt;h3 id=&quot;牛客&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>2022jscpc题解</title>
    <link href="https://wangyuhang-cmd.github.io/2022/05/30/2022jscpc%E9%A2%98%E8%A7%A3/"/>
    <id>https://wangyuhang-cmd.github.io/2022/05/30/2022jscpc%E9%A2%98%E8%A7%A3/</id>
    <published>2022-05-30T06:28:46.000Z</published>
    <updated>2022-06-01T06:43:00.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-PENTA-KILL"><a href="#A-PENTA-KILL" class="headerlink" title="A. PENTA KILL!"></a>A. PENTA KILL!</h3><p>签到题，直接O($n^2$)遍历每一个五杀的开始点然后计算是否符合规则即可。规则就是一个人必须连续杀死五个不同的敌人，这个五杀者可在此过程中死亡。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">F</span>&#123;</span></span><br><span class="line">string p,q;</span><br><span class="line">&#125;v[N];</span><br><span class="line">map&lt;string,set&lt;string&gt;&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">cin &gt;&gt; v[i].p &gt;&gt; v[i].q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">string p=v[i].p,q=v[i].q;</span><br><span class="line">mp[p].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(v[j].p==p)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[p].<span class="built_in">count</span>(v[j].q)) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">mp[p].<span class="built_in">insert</span>(v[j].q);</span><br><span class="line"><span class="keyword">if</span>(mp[p].<span class="built_in">size</span>()==<span class="number">5</span>) &#123;ok=<span class="literal">true</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ok) cout &lt;&lt; <span class="string">&quot;PENTA KILL!\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;SAD:(\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Prime-Ring-Plus"><a href="#B-Prime-Ring-Plus" class="headerlink" title="B. Prime Ring Plus"></a>B. Prime Ring Plus</h3><p>大意：给定1~n，n个数，让你构造k个环是的环上相邻数字和为质数。</p><p>这道题在赛场上我是先看的题目，想了一遍常规方法发现并不是很好解决。不知道是不是比赛的时候把数据范围给看错了，赛后刷了知乎后又看了遍题目，才发现这道二分图还是蛮明显的。</p><p>建图方式：</p><blockquote><p>1.建立源点S和汇点T，将n个数分成奇数和偶数</p><p>2.从S向所有奇数连容量为2的边，从所有偶数向T连容量为2的边，然后奇数向所有与之和为质数的偶数连容量为1的边（因为每个点在环上都相当于和两个数相连接，因此当两数之间满流的时候说明两数存在一个环内）</p><p>3.遍历所有中间容量为1的正向边，如果满流则说明当前跑出来的可行解中这两个点在一个环内，我在这里先根据所有点的度数判断解存不存在，然后dfs出最终答案。</p></blockquote><p>Code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>,INF=<span class="number">0x3f3f3f3f</span>, M = <span class="number">5000</span>*<span class="number">2500</span>*<span class="number">2</span>+<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">bool</span> numlist[N];</span><br><span class="line"><span class="keyword">int</span> prime[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eular</span><span class="params">(<span class="keyword">int</span> n=<span class="number">20000</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!numlist[i])</span><br><span class="line">            prime[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;prime[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            numlist[i*prime[j]] =<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,F,D,S,T;</span><br><span class="line"><span class="keyword">int</span> e[M],ne[M],h[N],f[M],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur[M],q[N],d[N];</span><br><span class="line"><span class="keyword">int</span> du[N],vis[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans[N];</span><br><span class="line"><span class="keyword">int</span> dx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    e[idx] = b, f[idx] = c, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">    e[idx] = a, f[idx] = <span class="number">0</span>, ne[idx] = h[b], h[b] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == T) <span class="keyword">return</span> limit;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cur[u];~i &amp;&amp; flow &lt; limit ;i=ne[i])&#123;</span><br><span class="line">        cur[u] = i;</span><br><span class="line">        <span class="keyword">int</span> ver = e[i];</span><br><span class="line">        <span class="keyword">if</span>(d[ver] == d[u] + <span class="number">1</span> &amp;&amp; f[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="built_in">find</span>(ver,<span class="built_in">min</span>(f[i],limit - flow));</span><br><span class="line">            <span class="keyword">if</span>(!t ) d[ver] = <span class="number">-1</span>;</span><br><span class="line">            f[i] -= t, f[i^<span class="number">1</span>] += t, flow += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = S, cur[S] = h[S], d[S] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[hh ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> ver = e[i];</span><br><span class="line">            <span class="keyword">if</span>(d[ver] == <span class="number">-1</span> &amp;&amp; f[i])&#123;</span><br><span class="line">                d[ver] = d[u] + <span class="number">1</span>;</span><br><span class="line">                cur[ver] = h[ver];</span><br><span class="line">                <span class="keyword">if</span>(ver == T) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q[++ tt] = ver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>()) <span class="keyword">while</span>(flow = <span class="built_in">find</span>(S,INF)) ans += flow;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line">ans[dx].<span class="built_in">push_back</span>(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line">S=<span class="number">0</span>,T=n+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) <span class="built_in">add</span>(S, i, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(i, T, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n/<span class="number">2</span>;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(!numlist[i+<span class="number">2</span>*j])&#123;</span><br><span class="line"><span class="built_in">add</span>(i, <span class="number">2</span>*j, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dinic</span>();</span><br><span class="line"><span class="comment">// int cc=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;idx;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i]!=T&amp;&amp;e[i^<span class="number">1</span>]!=S&amp;&amp;!f[i])&#123;</span><br><span class="line"><span class="keyword">int</span> a=e[i^<span class="number">1</span>],b=e[i];</span><br><span class="line"><span class="comment">// printf(&quot;%d----&gt;%d:%d\n&quot;,e[i^1],e[i],f[i]);</span></span><br><span class="line">du[a]++,du[b]++;</span><br><span class="line"><span class="comment">// cc++;</span></span><br><span class="line">edge[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">edge[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// debug(cc);</span></span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(du[i]!=<span class="number">2</span>) &#123;</span><br><span class="line">ok=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok)&#123;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">++dx;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(dx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dx;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i].<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:ans[i])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,u);</span><br><span class="line"><span class="keyword">if</span>(u!=ans[i].<span class="built_in">back</span>()) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>倒是补题中途被欧拉筛坑了几下，最大的可能出现的质数应该是2e4以内，我一开始开小了…</p><h3 id="C-Jump-and-Treasure"><a href="#C-Jump-and-Treasure" class="headerlink" title="C. Jump and Treasure"></a>C. Jump and Treasure</h3><p>C题的DP式子很简单，就是令f[i]表示在i位置的最大值，有$f[i]=max\{f[i-k\cdot j]\} (k\cdot j \le p)$,其中j表示当且为<code>j</code>level.</p><p>然后我的第一反应是写线段树，当时计算了一下发现3e8感觉有点悬。然后队友说这有点向单调队列优化的背包（模数优化），然后我反应过来确实单调队列可以行，然后就正常写即可，复杂度为$O(nlogn)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">1e17</span>;</span><br><span class="line">LL n,m,p,a[N],ans[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; qry[N];</span><br><span class="line">vector&lt;LL&gt; vec;</span><br><span class="line"><span class="keyword">int</span> q[N],hh,tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),p=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(x&gt;p) ans[i]=-INF;</span><br><span class="line"><span class="keyword">else</span> qry[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(qry[i].<span class="built_in">size</span>())&#123;</span><br><span class="line">vec.<span class="built_in">clear</span>();</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=i)</span><br><span class="line">vec.<span class="built_in">push_back</span>(j);</span><br><span class="line">vec.<span class="built_in">push_back</span>(n+<span class="number">1</span>);</span><br><span class="line"><span class="function">vector&lt;LL&gt; <span class="title">f</span><span class="params">(vec.size()+<span class="number">20</span>,-INF)</span></span>;</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">hh=<span class="number">0</span>,tt=<span class="number">-1</span>;</span><br><span class="line">q[++tt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;vec.<span class="built_in">size</span>();++j)&#123;</span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt&amp;&amp;vec[j]-vec[q[hh]]&gt;p) hh++;</span><br><span class="line">f[j]=<span class="built_in">max</span>(f[j], f[q[hh]]+a[vec[j]]);</span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt&amp;&amp;f[q[tt]]&lt;=f[j]) tt--;</span><br><span class="line">q[++tt]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> id:qry[i])</span><br><span class="line">ans[id]=f[vec.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i]==-INF) <span class="built_in">puts</span>(<span class="string">&quot;Noob&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">print</span>(ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J-Balanced-Tree"><a href="#J-Balanced-Tree" class="headerlink" title="J. Balanced Tree"></a>J. Balanced Tree</h3><p>赛时是队友打表过的，当时一开始想着记忆化然而发现并不行。看了一下题解，是用递推来算。我想了一下，大概是用记忆化拆开后发现利用了影响<code>2*i-1</code>和<code>2*i</code>的是相同的两个数，因此写成两个数的递推关系。</p><p>令$g(n)=a\cdot g(x)+b\cdot g(x-1)+c$</p><p>若x为偶数，则有$g(n)=a\cdot g(\frac{x}{2})+(a+2b)\cdot g(\frac{x}{2}-1)+a+c$</p><p>若x为奇数，则有$g(n)=(2a+b)\cdot g(\frac{x-1}{2})+b\cdot g(\frac{2-1}{2}-1)+b+c$</p><p>然后$logn$层递推$g(n)=xg(1)+yg(0)+z$就是最终答案，如果大于等于64就是0，否则直接输出相应2的幂次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ULL n;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(ULL x,LL a,LL b,LL c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> c; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&amp;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs</span>((x<span class="number">-1</span>)/<span class="number">2</span>,<span class="number">2ll</span>*a+b,b,b+c);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs</span>(x/<span class="number">2</span>,a,a+<span class="number">2ll</span>*b,a+c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">LL res=<span class="built_in">dfs</span>(n,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(res&gt;=<span class="number">64</span>) cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ULL ans=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,res) ans *= <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="K-aaaaaaaaaaA-heH-heH-nuN"><a href="#K-aaaaaaaaaaA-heH-heH-nuN" class="headerlink" title="K. aaaaaaaaaaA heH heH nuN"></a>K. aaaaaaaaaaA heH heH nuN</h3><p>这道构造题和五月份昆明的那一道几乎是一样的套路，用二进制拼凑的思想。我们发现对于<code>ha...a</code>k个a的贡献是$2^k-1$,而如果以<code>h...ha</code>(p个h)结尾的贡献是p,那么我们只要按位凑出来再最后把1加上去即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">pos.<span class="built_in">clear</span>();</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(n&gt;&gt;i&amp;<span class="number">1</span>) </span><br><span class="line">pos.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; (<span class="string">&quot;h\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cout &lt;&lt; (<span class="string">&quot;nunhehheha\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos.<span class="built_in">back</span>()==<span class="number">0</span>) cnt++,pos.<span class="built_in">pop_back</span>();</span><br><span class="line">cnt += pos.<span class="built_in">size</span>(); </span><br><span class="line">string ans=<span class="string">&quot;nunhehheh&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==pos.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=pos[i];</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,tmp<span class="number">-1</span>) ans += <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,cnt) ans += <span class="string">&quot;h&quot;</span>;</span><br><span class="line">ans+=<span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tmp=pos[i]-pos[i+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,tmp) </span><br><span class="line">ans += <span class="string">&quot;a&quot;</span>;</span><br><span class="line">ans += <span class="string">&quot;h&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-Cutting-Suffix"><a href="#I-Cutting-Suffix" class="headerlink" title="I. Cutting Suffix"></a>I. Cutting Suffix</h3><p>很经典的一道诈骗题，刚看到的时候想到了各种奇奇怪怪的字符串算法，但是看到过题人数很快我就知道大概是个思维之类的。很快发现：</p><p>如果这个字符串由单一字符构成，那么我们就只把最后一个后缀(单个字母)放在一个集合，其他的放在另外一个集合，答案为<code>s.size()-1</code></p><p>否则，随便选择一个字符，把所有这个字符开头的后缀都放进一个集合中，其他的放入另一个集合，因此答案就是0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">string p;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">29</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">num[p[i]-<span class="string">&#x27;a&#x27;</span>] ++;</span><br><span class="line"><span class="keyword">if</span>(num[p[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="number">1</span>) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">print</span>(p.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L-Collecting-Diamonds"><a href="#L-Collecting-Diamonds" class="headerlink" title="L. Collecting Diamonds"></a>L. Collecting Diamonds</h3><p>L题很可惜啊，当时做这道题还有将近1h40min,只要能搞出来就是金牌了，but性质之类的都想出来了，卡在最后代码没写好….</p><p>我又简洁了一下做法，延续着我比赛时候的思路：</p><p>首先双指针与处理出每一段形如<code>A...ABC...C</code>形式的字符串（舍弃B左右不含A或者C的）。</p><blockquote><p>性质：</p><p>1.删AC可以在没有删完的情况下一直删，且不影响后面串的奇偶性</p><p>2.删B只能对于每一<code>段</code>删一次，而且删完之后这一段剩余的AC就没有用了，但是删B可以改变后面串奇偶性使得后面可以可持续化删AC。因此删B的妙处就在这里</p><p>3.如果对于删AC或者删B都行的但是只能删一次的ABC我们删B更优</p><p>总结一下：在每一段都能删B的情况下我们尽量把所有能删的AC都删了，这就是贪心策略</p></blockquote><p>因此遍历整个串的每一<code>段</code>，分成两种情况：</p><p>1.前面还没有能够改变奇偶性的</p><p>此时如果只能删AC那就ans++</p><p>否则选择删B,ans++并且被删B的数量的计数器cnt++,意味着后面的奇偶性能够被改变了</p><p>2.前面已经有能够改变后面奇偶性的B出现了</p><p>能删的次数就是<code>min(q[i].x, (q[i].y==0)+cnt+1)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">int</span> n,hh,tt;</span><br><span class="line">pii q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    hh=<span class="number">0</span>,tt=<span class="number">-1</span>;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]!=<span class="string">&#x27;B&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> l=i,r=i;</span><br><span class="line">        <span class="keyword">while</span>(l<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; s[l<span class="number">-1</span>]==<span class="string">&#x27;A&#x27;</span>) l--;</span><br><span class="line">        <span class="keyword">while</span>(r+<span class="number">1</span>&lt;s.<span class="built_in">size</span>() &amp;&amp; s[r+<span class="number">1</span>]==<span class="string">&#x27;C&#x27;</span>) r++;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span>(r-i,i-l)&gt;<span class="number">0</span>)</span><br><span class="line">q[++tt]=<span class="built_in">make_pair</span>(<span class="built_in">min</span>(r-i,i-l),(i+<span class="number">1</span>)%<span class="number">2</span>);</span><br><span class="line">        i=r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>; <span class="comment">//答案和可以删B的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tt;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].y==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].x==<span class="number">1</span>) ans++;</span><br><span class="line"><span class="keyword">else</span> ans += <span class="number">2</span>, cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans ++,cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans += <span class="built_in">min</span>(q[i].x, (q[i].y==<span class="number">0</span>)+cnt+<span class="number">1</span>);</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关推荐：</p><p><a href="https://wangyuhang-cmd.github.io/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/">我的JSCPC小结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;A-PENTA-KILL&quot;&gt;&lt;a href=&quot;#A-PENTA-KILL&quot; class=&quot;headerlink&quot; title=&quot;A. PENTA KILL!&quot;&gt;&lt;/a&gt;A. PENTA KILL!&lt;/h3&gt;&lt;p&gt;签到题，直接O($n^2$)遍历每一个五杀的开始点然</summary>
      
    
    
    
    <category term="XCPC" scheme="https://wangyuhang-cmd.github.io/categories/XCPC/"/>
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>CCPC江苏省赛_小结</title>
    <link href="https://wangyuhang-cmd.github.io/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/"/>
    <id>https://wangyuhang-cmd.github.io/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/</id>
    <published>2022-05-29T17:25:25.000Z</published>
    <updated>2022-05-30T04:31:58.526Z</updated>
    
    <content type="html"><![CDATA[<p>​    因为昨天刚举办完校赛，所以没有时间来写这个总结。现在是01：25，我就浅写一下这次省赛的小结。</p><p>​    28号，也就是前天参加了CCPC江苏省省赛，最终终榜rk19,共发14金28银，因此位列银首。这是我XCPC生涯的第一块奖牌。</p><p><strong><img src="/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/1.png" class title="This is an test image"></strong></p><p>大致说一下，其实离上次昆明区域赛打铁也并没有多久，我感觉自己并没有完全从上次的小小的打击中完全反应过来，然后这一个月的竞技水平的话时好时坏，效率也不是很高，紫也没有冲上去，还因为不可名状的整活小号狠狠的掉了一波分。因此，就知识点掌握层面和竞技状态方面来说我这次比赛前并没有调整到最佳。不过这几天休息的很好，不像之前每天都是2点多才睡觉，也因此我有了充分的精力来进行思考。</p><p>先说比赛，开局我直接看了A，大概刚30s扫完题目我就知道这是一道签到题(毕竟LOL的截屏这么大)然后就交给目前坐在键盘前的grd来写，我继续看下面的题目。我然后看了B，发现给定n构造出一些圆满足每一个位置和左边或者右边的和必须为质数，尝试手动解答了一下样例，发现并不是我很快能够解决的问题，因此我直接跳过，然后看C。看了一会儿，grd把A给过了，25min1A。这个时候wzy和我说I和K都有人过了，因此我和wzy去看了K，grd去看了I。刚看完K，我就大概会了，因为这道构造题简直和昆明的那道使用的方法如出一辙，都是用二进制进行构造，然后我把我的思路和wzy说了一下，他确认过没有问题，然后我就去写代码，因为有一个细节没注意，导致这个稍微花了我一点时间，中途grd说了一下I的做法交了，发现WA了，此时的我们排名已经掉到50左右了，还好并没有因此着急。紧接着我就把K调出来了，然后和grd一起去看I,先是口胡了一个某位字符的方法，发现不太对。好在我突然发现这是一道诈骗题，然后就赶紧过了。此时3题，rk25左右。然后我去看C，grd去看J。我在推C的式子的时候想到了一个$O(nlog^2n)$的做法，辛亏wzy制止了我写线段树。此时grd打了一下J的表，发现了规律，我们又把题意和grd说了一下，他说这道题有点像单调队列优化的DP，我突然缓过神来，好像确实可以这么做。写代码写的稍微慢了一点点，然后因为初始化的问题又wa了一发，最终在3个小时的时候2A了这道题，此时我们的排名在20左右。之后grd接着写J，很快就A了，当时这道题也才过了十几个人，我们此时rk10，已经进入了金牌区，意味着我们只要再搞出一道题来就能拿金了，可惜最后我L没有搞出来，虽然已经近在咫尺了，感觉能挖掘的很强的性质都已经挖掘出来了…好可惜。</p><p>总的来说，银首的话也能对得起我们直线的训练。我们在这之前vp了2021江西省赛，2021，2022浙江省赛，2022东北省赛,我个人也vp了2021东北省赛，我们所有vp都是银首的排位，甚至像江西省赛和东北赛我们最终都是金尾。因此我觉得我们还有很大的进步空间。</p><p>下面一个月就是好好准备期末了，期待之后的多校能够有所突破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    因为昨天刚举办完校赛，所以没有时间来写这个总结。现在是01：25，我就浅写一下这次省赛的小结。&lt;/p&gt;
&lt;p&gt;​    28号，也就是前天参加了CCPC江苏省省赛，最终终榜rk19,共发14金28银，因此位列银首。这是我XCPC生涯的第一块奖牌。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="感悟" scheme="https://wangyuhang-cmd.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>dsu_on_tree</title>
    <link href="https://wangyuhang-cmd.github.io/2022/05/26/dsu-on-tree/"/>
    <id>https://wangyuhang-cmd.github.io/2022/05/26/dsu-on-tree/</id>
    <published>2022-05-26T06:33:12.000Z</published>
    <updated>2022-06-01T07:26:07.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dsu-on-tree"><a href="#dsu-on-tree" class="headerlink" title="dsu on tree"></a>dsu on tree</h2><p>DSU on tree ，作为一个比较神奇的算法，常常可以代替树剖/树上莫队来完成一些分别处理以每个根节点为问题核心关于其子树的问题。</p><p>本算法的思想就是类似于树剖，每次维护树的重儿子为根的子树，即儿子最多的子树，这样可以保证每个点呗操作一次会使得维护的节点数至少翻倍。因此每个点最多被维护$log{n}$次，总时间复杂度为$O(nlogn)$</p><p>模板题：</p><p><a href="https://vjudge.net/problem/CodeForces-600E">A - Lomsat gelral</a></p><p>大意是找到以每个点为根节点的子树的主要颜色之和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,e[M],ne[M],h[N],sz[N],son[N],color[N],idx;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,cnt[N],mx,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_son</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_son</span>(j ,u);</span><br><span class="line">        <span class="keyword">if</span>(sz[j]&gt;sz[son[u]]) son[u]=j;</span><br><span class="line">        sz[u]+=sz[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> op,<span class="keyword">int</span> zson)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c=color[u];</span><br><span class="line">    cnt[c] += op;</span><br><span class="line">    <span class="keyword">if</span>(cnt[c]&gt;mx) mx=cnt[c], sum=c;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt[c]==mx) sum += c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==pre||j==zson) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">modify</span>(j, u, op, zson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==pre||j==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u], u, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">modify</span>(u, pre, <span class="number">1</span>, son[u]);</span><br><span class="line">    ans[u]=sum;</span><br><span class="line">    <span class="keyword">if</span>(!s) <span class="built_in">modify</span>(u, pre, <span class="number">-1</span>, <span class="number">0</span>),sum=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) color[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">add</span>(u,v), <span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs_son</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 算是dsu on tree的模板了，先一遍DFS与处理出所有节点的重儿子，然后第二遍dfs的时候先dfs所有的非重儿子,再dfs所有的重儿子来处理答案。有一个优化小技巧，预处理的时候顺便与处理出dfs序，这样就不需要递归修改，改为直接循环修改，这样可以减小代码常熟。</p><p>dsu on tree 算是一个越来越板的套路，基本上只要改一改板子，转化一下问题就可以了。</p><p><a href="https://vjudge.net/problem/CodeForces-570D">B - Tree Requests</a></p><p>求每一个点特定数量的字符是否可以构成回文串。也是非常的板的一道题目，能不能构成回文串取决于奇数个字符的数量是否不超过2.因此直接再dsu on tree的时候维护一下每个点特定深度下的26个字母的个数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line"><span class="keyword">int</span> sz[N],dep[N],son[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N][<span class="number">27</span>];</span><br><span class="line"><span class="keyword">int</span> l[N],id[N],r[N],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>,dep[u]=dep[pre]+<span class="number">1</span>;l[u]=++idx,id[idx]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]]&lt;sz[v]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    cnt[dep[u]][ch[u]-<span class="string">&#x27;a&#x27;</span>]+=d;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u], u, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)</span><br><span class="line">            <span class="built_in">add</span>(id[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(u, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> q:qry[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[q.x][i]&amp;<span class="number">1</span>) tmp++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q.y]=(tmp&lt;<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!top) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)&#123;</span><br><span class="line">            <span class="built_in">add</span>(id[i], <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">2</span>,n) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">        edge[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">read</span>(),h=<span class="built_in">read</span>();</span><br><span class="line">        qry[x].<span class="built_in">push_back</span>(&#123;h,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m) <span class="built_in">puts</span>(ans[i]?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-Blood-Cousins-Return"><a href="#C-Blood-Cousins-Return" class="headerlink" title="C - Blood Cousins Return"></a><a href="https://vjudge.net/problem/CodeForces-246E">C - Blood Cousins Return</a></h4><p> 求对于每个点相对深度下不同名字的孙子的数量。将相对深度转化为绝对深度，借助<code>set&lt;string&gt;</code>来维护对应深度的名字数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"><span class="keyword">int</span> n,m,x,dep[N],sz[N],son[N],l[N],r[N],id[N],idx,ans[N];</span><br><span class="line">string name[N];</span><br><span class="line">set&lt;string&gt; ds[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    l[u]=++idx,id[idx]=u,sz[u]=<span class="number">1</span>,dep[u]=d;</span><br><span class="line">    son[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="built_in">dfs_init</span>(v, d+<span class="number">1</span>);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(son[u]==<span class="number">-1</span>||sz[v] &gt; sz[son[u]]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]!=<span class="number">-1</span>) <span class="built_in">dfs</span>(son[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)&#123;</span><br><span class="line">            ds[dep[id[i]]].<span class="built_in">insert</span>(name[id[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ds[dep[u]].<span class="built_in">insert</span>(name[u]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> q:qry[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> k=q.x,id=q.y;</span><br><span class="line">        ans[id]=ds[k].<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!top)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)</span><br><span class="line">            ds[dep[id[i]]].<span class="built_in">erase</span>(name[id[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; name[i] &gt;&gt; x;</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(i);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs_init</span>(<span class="number">0</span>,<span class="number">0</span>);  </span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> v,k;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; k;</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(&#123;k+dep[v],i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">print</span>(ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="D-Blood-Cousins"><a href="#D-Blood-Cousins" class="headerlink" title="D - Blood Cousins"></a><a href="https://vjudge.net/problem/CodeForces-208E">D - Blood Cousins</a></h4><p>计算给定点v的k级表兄的数量，我们可以转化为v的k级祖先的相对深度为k的子孙的数量，答案直接是-1即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line"><span class="keyword">int</span> n,m,sz[N],dep[N],son[N];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>][N],ans[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"><span class="keyword">int</span> l[N],r[N],id[N],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>,dep[u]=d,son[u]=<span class="number">-1</span>;</span><br><span class="line">    l[u]=++idx,id[idx]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        f[<span class="number">0</span>][v]=u;</span><br><span class="line">        <span class="built_in">dfs_init</span>(v, u, d+<span class="number">1</span>);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(son[u]==<span class="number">-1</span>||sz[son[u]] &lt; sz[v]) </span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]!=<span class="number">-1</span>) <span class="built_in">dfs</span>(son[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)</span><br><span class="line">            cnt[dep[id[i]]] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[dep[u]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:qry[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> dp=v.x,id=v.y;</span><br><span class="line">        ans[id]=cnt[dp]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!top)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)</span><br><span class="line">            cnt[dep[id[i]]] --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(k&gt;&gt;i&amp;<span class="number">1</span>) </span><br><span class="line">            u=f[i][u];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs_init</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="built_in">read</span>(),p=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">get</span>(v,p);</span><br><span class="line">        <span class="keyword">if</span>(t) qry[t].<span class="built_in">push_back</span>(&#123;dep[t]+p,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <a href="https://vjudge.net/problem/CodeForces-375D">G - Tree and Queries</a></p><p> 这道题要求给定节点的子树中数量不少于给定数的颜色的个数。首先可以对每个点作为根节点来处理子树中的问题，可以用DSU on Tree来解决，其次由于我们不方便直接求得每个颜色对应的个数，因此我们还需要用树状数组来维护每一个个数的颜色数量。</p><p>总的时间复杂度为$O(nlog^2n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #define int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,col[N],sz[N],dep[N],son[N],id[N],l[N],r[N],idx,ans[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-x))</span></span><br><span class="line"><span class="keyword">int</span> tr[<span class="number">100005</span>],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> _n=<span class="number">100000</span>)</span></span>&#123;n=_n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) tr[x]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) ans += tr[x];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">l[u]=++idx,id[idx]=u;</span><br><span class="line">dep[u]=dep[pre]+<span class="number">1</span>,sz[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==pre) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs_init</span>(v, u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(sz[son[u]] &lt; sz[v]) son[u]=v;</span><br><span class="line">&#125;</span><br><span class="line">r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> up)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v!=pre&amp;&amp;v!=son[u])</span><br><span class="line"><span class="built_in">dfs</span>(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u], u, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v==pre||v==son[u]) </span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[col[id[i]]]) </span><br><span class="line">T.<span class="built_in">add</span>(cnt[col[id[i]]], <span class="number">-1</span>);</span><br><span class="line">cnt[col[id[i]]] ++;</span><br><span class="line">T.<span class="built_in">add</span>(cnt[col[id[i]]], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt[col[u]])</span><br><span class="line">T.<span class="built_in">add</span>(cnt[col[u]], <span class="number">-1</span>);</span><br><span class="line">cnt[col[u]] ++;</span><br><span class="line">T.<span class="built_in">add</span>(cnt[col[u]], <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:qry[u])&#123;</span><br><span class="line"><span class="keyword">int</span> x=tmp.x,id=tmp.y;</span><br><span class="line">ans[id] = T.<span class="built_in">ask</span>(T.n);</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">1</span>) ans[id] -= T.<span class="built_in">ask</span>(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!up)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)&#123;</span><br><span class="line">T.<span class="built_in">add</span>(cnt[col[id[i]]], <span class="number">-1</span>);</span><br><span class="line">cnt[col[id[i]]] --;</span><br><span class="line"><span class="keyword">if</span>(cnt[col[id[i]]])</span><br><span class="line">T.<span class="built_in">add</span>(cnt[col[id[i]]], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)</span><br><span class="line">col[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs_init</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>(),t=<span class="built_in">read</span>();</span><br><span class="line">qry[x].<span class="built_in">push_back</span>(&#123;t,i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="built_in">print</span>(ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dsu-on-tree&quot;&gt;&lt;a href=&quot;#dsu-on-tree&quot; class=&quot;headerlink&quot; title=&quot;dsu on tree&quot;&gt;&lt;/a&gt;dsu on tree&lt;/h2&gt;&lt;p&gt;DSU on tree ，作为一个比较神奇的算法，常常可以代替树剖/</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树论" scheme="https://wangyuhang-cmd.github.io/tags/%E6%A0%91%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数点问题</title>
    <link href="https://wangyuhang-cmd.github.io/2022/04/26/%E6%95%B0%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://wangyuhang-cmd.github.io/2022/04/26/%E6%95%B0%E7%82%B9%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-26T15:29:17.000Z</published>
    <updated>2022-05-30T04:28:27.857Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数点问题"><a href="#数点问题" class="headerlink" title="数点问题"></a>数点问题</h4><h5 id="二维数点"><a href="#二维数点" class="headerlink" title="二维数点"></a>二维数点</h5><p>平面有<code>n</code>个点，回答q个询问，每个询问给定$[x_1,y_1]\cdot[x_2,y_2]$,求在这个范围内的点数</p><h5 id="做法1：CDQ分治"><a href="#做法1：CDQ分治" class="headerlink" title="做法1：CDQ分治"></a>做法1：CDQ分治</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pos</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z,p,id,sum;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Pos&amp;W)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=W.x) <span class="keyword">return</span> x&lt;W.x;</span><br><span class="line"><span class="keyword">if</span>(y!=W.y) <span class="keyword">return</span> y&lt;W.y;</span><br><span class="line"><span class="keyword">return</span> z &lt; W.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;p[N],tmp[N];</span><br><span class="line"><span class="keyword">int</span> n,m,idx,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">merge</span>(l,mid); <span class="built_in">merge</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].y&lt;=p[j].y) sum += (!p[i].z), tmp[++cnt]=p[i++];</span><br><span class="line"><span class="keyword">else</span> p[j].sum += sum, tmp[++cnt] = p[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) sum += (!p[i].z), tmp[++cnt]=p[i++];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=r) p[j].sum += sum, tmp[++cnt] = p[j++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l,j=<span class="number">1</span>;i&lt;=r;) p[i++]=tmp[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">p[++idx]=&#123;x,y,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x1=<span class="built_in">read</span>(),x2=<span class="built_in">read</span>(),y1=<span class="built_in">read</span>(),y2=<span class="built_in">read</span>();</span><br><span class="line">p[++idx]=&#123;x2,y2,<span class="number">1</span>,<span class="number">1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">p[++idx]=&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">p[++idx]=&#123;x1<span class="number">-1</span>,y2,<span class="number">1</span>,<span class="number">-1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">p[++idx]=&#123;x2,y1<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>, p+<span class="number">1</span>+idx);</span><br><span class="line"><span class="built_in">merge</span>(<span class="number">1</span>,idx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=idx;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].z) </span><br><span class="line">ans[p[i].id] += p[i].p*p[i].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">print</span>(ans[i]); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CDQ分治是处理二维/三维数点问题非常高效的离线做法，能够做到时间复杂度O(nlogn)带非常小常数,空间复杂度O(n)</p><h5 id="2-离线-树状数组"><a href="#2-离线-树状数组" class="headerlink" title="2.离线+树状数组"></a>2.离线+树状数组</h5><p>这种做法就是按照横坐标排序后对纵坐标离散化后用树状数组维护位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n,tr[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-x))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;n=_n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) tr[x]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) ans+=tr[x];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">int</span> n,m,k,ans[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; alls;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>(), x) - alls.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Pos</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z,p;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Pos&amp; W)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=W.x) <span class="keyword">return</span> x &lt; W.x;</span><br><span class="line"><span class="keyword">return</span> z&lt;W.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Pos&gt; q;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x,y,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> x1=<span class="built_in">read</span>(),x2=<span class="built_in">read</span>(),y1=<span class="built_in">read</span>(),y2=<span class="built_in">read</span>();</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x2,y2,i,<span class="number">1</span>&#125;);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,i,<span class="number">1</span>&#125;);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x1<span class="number">-1</span>,y2,i,<span class="number">-1</span>&#125;);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x2,y1<span class="number">-1</span>,i,<span class="number">-1</span>&#125;);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y1);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y2);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y1<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>());</span><br><span class="line">T.<span class="built_in">resize</span>(alls.<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:q)&#123;</span><br><span class="line"><span class="keyword">int</span> x=u.x, y=u.y,z=u.z,p=u.p;</span><br><span class="line">y=<span class="built_in">get</span>(y);</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">0</span>)&#123;</span><br><span class="line">T.<span class="built_in">add</span>(y, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=T.<span class="built_in">ask</span>(y);</span><br><span class="line">ans[z]+=tmp*p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">print</span>(ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;数点问题&quot;&gt;&lt;a href=&quot;#数点问题&quot; class=&quot;headerlink&quot; title=&quot;数点问题&quot;&gt;&lt;/a&gt;数点问题&lt;/h4&gt;&lt;h5 id=&quot;二维数点&quot;&gt;&lt;a href=&quot;#二维数点&quot; class=&quot;headerlink&quot; title=&quot;二维数点&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数点问题" scheme="https://wangyuhang-cmd.github.io/tags/%E6%95%B0%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Kunming 打铁总结</title>
    <link href="https://wangyuhang-cmd.github.io/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/"/>
    <id>https://wangyuhang-cmd.github.io/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-17T23:50:47.000Z</published>
    <updated>2022-04-18T00:02:27.233Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚过于emo九点就睡了，今天早上爬起来做一个阶段性的小总结：</p><p>额，昨天昆明区域赛打铁了，意料之外的事情，毕竟我对我们队的定位是保铜争银的，但是铁了就是铁了，现在说什么也只能是事后口胡。</p><p>刚开局，我开始看D，然后两个队友分别看其他几题。负责数学的grd觉得C可以写，于是他就专门负责推导C。然后十分钟左右看了一眼榜单，发现K有人过了，我就去看K，然后十分钟左右我推出来了一个式子，代码就一行，然后花了十分钟左右证明了一下发现是对的，因此在30min左右的时候1发A了K，然后我们就开始看其他题目。然后之后键盘交给了写C的grd，我和wzy又去看了其他题目，这段时间榜有点歪，可惜看了一题F没看出来是签到，然后看了瓶子概率那道题，题目还读错了，就这样晃了一个小时，看到D过的人变多了之后我们就开始看D，很快二十分钟左右我就想出来了一个思路，正好这个时候键盘没人用我就上去写C，大概十分钟就码好了，交了第一发，wa了，开始想什么原因，二十多分钟后发现0的情况有解，交了一发还是wa，以为是超过了365，就写了个程序跑了一下1e8，还是发现不了哪里错了。然后和两个队友说了一下，一个队友听懂了想重构一下，然后重构到一半发现思路断了，不过我立刻有了思路开始重写。重写完又一发wa，当时心态直接炸裂啊…因为我交了三发罚时，最终在前前后后折磨了两个小时左右才发现2的情况要特判，不然按照我的构造方式会出锅。于是又交了一发过了，大概是三个多小时左右。此时我感觉不妙….然后最后队友两个去写A，我看了看瓶子那题。最后可惜A没出，铁首出局…..</p><p>昨天晚上我就躺在床上思考，到底是什么原因导致的。大概就是，策略分配问题+训练不饱和。</p><p>确实这个突如其来的铁打乱了很多安排。</p><p>不过转念想想，或许还是要一定的参赛经验积累才行。由于我一开始不是计算机学院的，打ACM也是半路出家。去年五月份听说了有ACM这个比赛，然后自己学习了一下C语言和C++，然后去打了一下校赛，感觉还行就准备参加ACM训练。经过了期末周，大概是7月十几号的样子我买了一本洛谷的算法书自己开始写，很快就写完了，然后紧接着就是在往上找课，刷题，八月份开始打CF，几场就青了，但是后面晃了一两个月才上了蓝，现在两个号都是1800左右。感觉还是学习时间较短导致的知识点和经验积累不够，因为这个导致什么事情都有可能发生.毕竟我才学了大半年，再来一段时间的学习，一定会有提升的。</p><p><strong><img src="/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/1.jpg" class title="This is an test image"></strong></p><p><strong><img src="/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/2.jpg" class title="This is an test image"></strong></p><p>本来是没有机会打这一次昆明的，还是要感谢我的队友wzy，他们队打完Jscpc之后有一个队员走了，他就叫上了我。确实打昆明是额外到来的机会，没有抓住机会，一方面赖我的机会把握能力的同时一方面也算是给我积累了一次参赛经历。十分的可惜，太可惜了，不过睡一觉起来感觉也好多了，毕竟人要向前看啊…</p><p>虽然是一次失败的参赛经历，不过还是感谢队友的付出。菜是原罪，下一步只能加练。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨晚过于emo九点就睡了，今天早上爬起来做一个阶段性的小总结：&lt;/p&gt;
&lt;p&gt;额，昨天昆明区域赛打铁了，意料之外的事情，毕竟我对我们队的定位是保铜争银的，但是铁了就是铁了，现在说什么也只能是事后口胡。&lt;/p&gt;
&lt;p&gt;刚开局，我开始看D，然后两个队友分别看其他几题。负责数学的</summary>
      
    
    
    
    
    <category term="感悟" scheme="https://wangyuhang-cmd.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>计数专题</title>
    <link href="https://wangyuhang-cmd.github.io/2022/03/06/%E8%AE%A1%E6%95%B0%E4%B8%93%E9%A2%98/"/>
    <id>https://wangyuhang-cmd.github.io/2022/03/06/%E8%AE%A1%E6%95%B0%E4%B8%93%E9%A2%98/</id>
    <published>2022-03-06T08:00:30.000Z</published>
    <updated>2022-05-30T04:29:34.304Z</updated>
    
    <content type="html"><![CDATA[<p>计数问题一直是让我头疼的问题啊…最近开始整理相关的问题。</p><h2 id="NamoCamp每日一题"><a href="#NamoCamp每日一题" class="headerlink" title="NamoCamp每日一题"></a><code>NamoCamp</code>每日一题</h2><h3 id="467-路径计数2"><a href="#467-路径计数2" class="headerlink" title="#467. 路径计数2"></a>#467. 路径计数2</h3><ul><li><a href="http://oj.daimayuan.top/problem/467#tab-statement"> 描述</a></li><li><a href="http://oj.daimayuan.top/problem/467#tab-submit-answer"> 提交</a></li></ul><p>有一个 n∗n 的网格，有些格子是可以通行的，还有 m 个格子是障碍。</p><p>一开始你在左上角的位置，你可以每一步往下或者往右走，问有多少种走到右下角的方案。</p><p>由于答案很大，输出对 1e9+7取模的结果。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个数字 n, m。</p><p>接下来 m 行，每行 2 个整数 <code>xi,yi</code>，代表第 i 个障碍的坐标。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个数，表示答案。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h4><p>所有数据保证 <code>1≤n≤106,1≤m≤3000,1≤xi,yi≤n</code></p><p>首先我们观察到数据范围不适合做n*n的DP，因此我们寻找突破口m=3000，设状态<code>DP[i]</code>表示从(1,1)到第i个障碍，其中不经过其他任何障碍的方案数.因此对于第i个障碍的转移需要其他所有状态中横纵坐标都小于第i个障碍的点来进行转移。</p><p>我们可以用BFS或者记忆化搜索来完成状态的转移：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6010</span>,M=<span class="number">2000010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pos[N];</span><br><span class="line"><span class="keyword">int</span> f[N],fact[M],inv[M],n,m;<span class="comment">//C[N][N];</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==m||m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (LL)fact[n]*inv[n-m]%mod*inv[m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,M<span class="number">-10</span>) fact[i]=(LL)fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">inv[M<span class="number">-10</span>]=<span class="built_in">fpower</span>(fact[M<span class="number">-10</span>], mod<span class="number">-2</span>,mod);</span><br><span class="line"><span class="built_in">per</span>(i,M<span class="number">-11</span>,<span class="number">1</span>) inv[i]=(LL)inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[u]!=<span class="number">-1</span>) <span class="keyword">return</span> f[u];</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[i].x&lt;=pos[u].x&amp;&amp;pos[i].y&lt;=pos[u].y&amp;&amp;i!=u)</span><br><span class="line">res=(res+(LL)<span class="built_in">dfs</span>(i)*<span class="built_in">C</span>(pos[u].x-pos[i].x+pos[u].y-pos[i].y,pos[u].x-pos[i].x)%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">res=(((LL)<span class="built_in">C</span>(pos[u].x<span class="number">-1</span>+pos[u].y<span class="number">-1</span>,pos[u].x<span class="number">-1</span>)-res)%mod+mod)%mod;</span><br><span class="line"><span class="keyword">return</span> f[u]=res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) pos[i].x=<span class="built_in">read</span>(),pos[i].y=<span class="built_in">read</span>();</span><br><span class="line">pos[++m].x=n,pos[m].y=n;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dfs</span>(m));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计数问题一直是让我头疼的问题啊…最近开始整理相关的问题。&lt;/p&gt;
&lt;h2 id=&quot;NamoCamp每日一题&quot;&gt;&lt;a href=&quot;#NamoCamp每日一题&quot; class=&quot;headerlink&quot; title=&quot;NamoCamp每日一题&quot;&gt;&lt;/a&gt;&lt;code&gt;NamoCamp</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="计数问题整理" scheme="https://wangyuhang-cmd.github.io/tags/%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round</title>
    <link href="https://wangyuhang-cmd.github.io/2022/01/24/Codeforces-Round-767-Div-2-A-E/"/>
    <id>https://wangyuhang-cmd.github.io/2022/01/24/Codeforces-Round-767-Div-2-A-E/</id>
    <published>2022-01-23T16:15:20.000Z</published>
    <updated>2022-03-06T08:09:54.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-Round-767-Div-2-A-E"><a href="#Codeforces-Round-767-Div-2-A-E" class="headerlink" title="Codeforces Round  767 (Div. 2)  A~E"></a>Codeforces Round  767 (Div. 2)  A~E</h2><h3 id="A-Download-More-RAM"><a href="#A-Download-More-RAM" class="headerlink" title="A Download More RAM"></a><a href="https://codeforces.com/contest/1629/problem/A">A Download More RAM</a></h3><p>大意是你一开始有 m G内存,每次你可以使用不超过你内存的RAM来升级你的内存，第i个扩充内存b[i].</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>直接贪心即可，每次都选最小的来升级。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i].x=<span class="built_in">read</span>(),a[i].y=i;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) b[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(m&gt;=a[i].x) m+=b[a[i].y];</span><br><span class="line"><span class="built_in">print</span>(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-GCD-Arrays"><a href="#B-GCD-Arrays" class="headerlink" title="B. GCD Arrays"></a><a href="https://codeforces.com/contest/1629/problem/B">B. GCD Arrays</a></h3><p>大意是给你一段连续的[l,r]之内的数，每次可以选择两个数丢掉并把他们的乘积加进来，问k次操作以内是否可以把整个序列的gcd大于1</p><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>我们可以直接想到让区间内的所有数获得因子2是操作最少的，因此把所有奇数操作掉即可。因此判断[l,r]中的奇数数量是否小于等于k,注意<code>l=r=1</code>的时候要特判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>(),k=<span class="built_in">read</span>();</span><br><span class="line">LL num=(r-l)/<span class="number">2</span>+(((l%<span class="number">2</span>)==<span class="number">0</span>)||(r%<span class="number">2</span>==<span class="number">0</span>));</span><br><span class="line">num=r-l+<span class="number">1</span>-num;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">1</span>&amp;&amp;r==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==r&amp;&amp;l!=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=num) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Meximum-Array"><a href="#C-Meximum-Array" class="headerlink" title="C. Meximum Array"></a><a href="https://codeforces.com/contest/1629/problem/C">C. Meximum Array</a></h3><p>大意是给你一个序列，你可以任意分割序列使得得到的每一段序列的mex值按顺序组成新序列字典序最大</p><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><p>容易想到，需要贪心的让第一端mex最大，然后在剩下的让第二段mex最大…因此我们可以利用双指针直接模拟，用两个辅助数组，一个记录哪些数出现过，另一个记录每个数出现了多少次。前面的指针每次找到当前端mex-1第一次出现的位置，然后记录答案，后面的指针删去这一段的次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>, tot=<span class="number">200000</span>;</span><br><span class="line"><span class="keyword">int</span> n,cnt[N],a[N],num[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> mex=<span class="number">0</span>,last=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">mex=mx=<span class="number">0</span>; ans.<span class="built_in">clear</span>();</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),mx=<span class="built_in">max</span>(mx,a[i]),num[a[i]]++;</span><br><span class="line">last=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">cnt[a[i]]++;</span><br><span class="line"><span class="keyword">while</span>(cnt[mex]) mex++;</span><br><span class="line"><span class="keyword">if</span>(!num[mex])&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(mex);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=last;j&lt;=i;++j) num[a[j]]-=cnt[a[j]],cnt[a[j]]=<span class="number">0</span>;</span><br><span class="line">mex=<span class="number">0</span>;</span><br><span class="line">last=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(ans.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:ans) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,mx) num[i]=<span class="number">0</span>,cnt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Peculiar-Movie-Preferences"><a href="#D-Peculiar-Movie-Preferences" class="headerlink" title="D. Peculiar Movie Preferences"></a><a href="D. Peculiar Movie Preferences">D. Peculiar Movie Preferences</a></h3><p>大意是给你一些长度不超过3的字符串，问在保留原有顺序的情况下是否可以选择一些字符串（不可以不选）拼接成回文串</p><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><p>最终是回文串一共只有五种情况。</p><ul><li>存在单个字符或者本身回文的字符串</li><li>长度2+长度2拼接成回文串</li><li>长度2+长度3拼接成回文串</li><li>长度3+长度2拼接成回文串</li><li>长度3+长度3拼接成回文串</li></ul><p>由于长度很短，因此我们可以不用哈希，直接开数组存储即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">string str[N];</span><br><span class="line"><span class="keyword">int</span> t1[M],t2[M][M],t3[M][M][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span> t1);</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span> t2);</span><br><span class="line"><span class="built_in">memset</span>(t3,<span class="number">0</span>,<span class="keyword">sizeof</span> t3);</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) cin &gt;&gt; str[i];</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">1</span>)&#123; <span class="comment">//1</span></span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">2</span>)&#123;<span class="comment">//2+2 2+3</span></span><br><span class="line">t2[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])]++;</span><br><span class="line"><span class="keyword">if</span>(str[i][<span class="number">0</span>]==str[i][<span class="number">1</span>]) &#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//3,3+3,3+2</span></span><br><span class="line">t3[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">2</span>])]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ok)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//2+2</span></span><br><span class="line"><span class="keyword">if</span>(t2[<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])]) &#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2+3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">26</span>;++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(ok) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(t3[j][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])])&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//3+3</span></span><br><span class="line"><span class="keyword">if</span>(t3[<span class="built_in">get</span>(str[i][<span class="number">2</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])])&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3+2</span></span><br><span class="line"><span class="keyword">if</span>(t2[<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])])&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">2</span>) t2[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])]--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">3</span>) t3[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">2</span>])]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(ok?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-Grid-Xor"><a href="#E-Grid-Xor" class="headerlink" title="E. Grid Xor"></a><a href="https://codeforces.com/contest/1629/problem/E">E. Grid Xor</a></h3><p>大意是给你一个边长为偶数的正方形方格，只告诉你每个方格其所有相邻方格的异或和，求整个方形的全部元素异或和。</p><h5 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h5><p><strong><img src="/2022/01/24/Codeforces-Round-767-Div-2-A-E/1.jpg" class title="This is an test image"></strong></p><p>我们通过模拟4*4的发现一定是两个两个选的，且不能选会覆盖之前已经选了的区域。根据题目中</p><p>可以证明解一定唯一，我们得知解一定存在，又由于是正方形，因此我们一行一行的选取格子并将其覆盖区域染色，时刻保证</p><ul><li>前面的空格不被遗漏</li><li>后面新选取的格子覆盖的区域与之前无重叠</li></ul><p>因为有重叠了等于没染，此时又要新的格子来染被消除的，会导致新的格子被消除。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N][N],g[N][N],mov[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) a[i][j]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">0</span>,<span class="number">3</span>)&#123;  <span class="comment">//先判断四周有没有被覆盖到</span></span><br><span class="line"><span class="keyword">int</span> x=i+mov[k][<span class="number">0</span>], y=j+mov[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(g[x][y]) flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123; <span class="comment">//如果没有被覆盖到，则选择</span></span><br><span class="line">ans^=a[i][j];</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">0</span>,<span class="number">3</span>)&#123;  <span class="comment">//先判断四周有没有被覆盖到</span></span><br><span class="line"><span class="keyword">int</span> x=i+mov[k][<span class="number">0</span>], y=j+mov[k][<span class="number">1</span>];</span><br><span class="line">g[x][y] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Codeforces-Round-767-Div-2-A-E&quot;&gt;&lt;a href=&quot;#Codeforces-Round-767-Div-2-A-E&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Round  767 (Div. 2)  </summary>
      
    
    
    
    <category term="codeforces" scheme="https://wangyuhang-cmd.github.io/categories/codeforces/"/>
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>朱刘算法</title>
    <link href="https://wangyuhang-cmd.github.io/2022/01/18/%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/"/>
    <id>https://wangyuhang-cmd.github.io/2022/01/18/%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/</id>
    <published>2022-01-18T09:38:23.000Z</published>
    <updated>2022-05-30T02:04:12.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朱刘算法"><a href="#朱刘算法" class="headerlink" title="朱刘算法"></a>朱刘算法</h2><p>有向图的类Prim算法，找有向图的最小生成树。</p><h3 id="最小树形图"><a href="#最小树形图" class="headerlink" title="最小树形图"></a>最小树形图</h3><p>树形图：</p><ul><li>无有向环</li><li>除了根节点外，每个点入度为1</li></ul><p>以某个点为根的一棵有向树，其边权之和为图中所有树形图中是最小的称为最小树形图。</p><h3 id="朱刘算法-O-nm"><a href="#朱刘算法-O-nm" class="headerlink" title="朱刘算法  $O(nm)$"></a>朱刘算法  $O(nm)$</h3><p>(1) 除了根节点外对每个点选取一条边权最小的入边</p><p>(2)判断当前(选出的边)组成的图中有无环</p><p>​    1.若无环：则说明当前图已经为构造好的最小生成树，算法结束</p><p>​    2.若有环：进行第(3)步</p><p>(3)将构造的图进行强连通分量缩点，得到新图$G’$,对于$G’$中的所有边</p><p>​    1.如果是环中的边：直接删去</p><p>​    2.如果终点在环内(即新缩的点)：更新此边权权值为$W-W_{环内}$</p><p>​    3.其他边：不变</p><p>然后继续从(1)开始迭代</p><blockquote><p>当迭代完成后,所有选择的边的边权之和就是最终的答案。</p></blockquote><h4 id="邻接矩阵版本："><a href="#邻接矩阵版本：" class="headerlink" title="邻接矩阵版本："></a>邻接矩阵版本：</h4><blockquote><p>由于复杂度是 <code>O(nm)</code>，因此在存储图的时候不需要背邻接表的板子，直接背邻接矩阵的即可。</p></blockquote><p>板子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>,M=<span class="number">2e4</span>+<span class="number">10</span>,INF=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,r;</span><br><span class="line"><span class="keyword">int</span> d[N][N],bd[N][N],g[N][N];</span><br><span class="line"><span class="keyword">int</span> pre[N],bpre[N];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],timestamp,stk[N],top;</span><br><span class="line"><span class="keyword">int</span> id[N],scc_cnt;</span><br><span class="line"><span class="keyword">bool</span> st[N],ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">st[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line"><span class="keyword">if</span>(d[u][i]&lt;INF&amp;&amp;!st[i])</span><br><span class="line"><span class="built_in">dfs</span>(i); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_con</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="built_in">dfs</span>(r);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) </span><br><span class="line"><span class="keyword">if</span>(!st[i]) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++timestamp;</span><br><span class="line">stk[++top]=u;ins[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j=pre[u];</span><br><span class="line"><span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(j);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">scc_cnt ++;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">y=stk[top --];</span><br><span class="line">ins[y]=<span class="literal">false</span>;</span><br><span class="line">id[y]=scc_cnt;</span><br><span class="line">&#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhuliu</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">pre[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(d[pre[i]][i] &gt; d[j][i])</span><br><span class="line">pre[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">timestamp=scc_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line"><span class="keyword">if</span>(!dfn[i])</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(scc_cnt == n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==r) <span class="keyword">continue</span>;</span><br><span class="line">ans += d[pre[i]][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==r) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(id[pre[i]] == id[i])&#123; </span><br><span class="line">ans += d[pre[i]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc_cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=scc_cnt;++j)</span><br><span class="line">bd[i][j]=INF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i][j] &lt; INF &amp;&amp; id[i]!=id[j])&#123;</span><br><span class="line"><span class="keyword">int</span> a=id[i],b=id[j];</span><br><span class="line"><span class="keyword">if</span>(id[pre[j]]==id[j])</span><br><span class="line">bd[a][b]=<span class="built_in">min</span>(bd[a][b],d[i][j]-d[pre[j]][j]);</span><br><span class="line"><span class="keyword">else</span> bd[a][b]=<span class="built_in">min</span>(bd[a][b],d[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r=id[r];</span><br><span class="line">n = scc_cnt;</span><br><span class="line"><span class="built_in">memcpy</span>(d,bd,<span class="keyword">sizeof</span> d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),r=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>(),w=<span class="built_in">read</span>();</span><br><span class="line">d[u][v]=<span class="built_in">min</span>(d[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// rep(i,1,n) rep(j,1,n) debug(d[i][j]);</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check_con</span>()) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">print</span>(<span class="built_in">zhuliu</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模板题</strong></p><p>在一个二维平面中求 一个最小树形图</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">10010</span>, INF=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">pdd q[N];</span><br><span class="line"><span class="keyword">bool</span> g[N][N];</span><br><span class="line"><span class="keyword">double</span> d[N][N],bd[N][N]; <span class="comment">//d数组用来存距离，bd数组用来存储备份</span></span><br><span class="line"><span class="keyword">int</span> pre[N],bkppre[N];  <span class="comment">//pre数组用来存储备份，bkppre数组用来存储前去的备份</span></span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],timestamp,stk[N],top;</span><br><span class="line"><span class="keyword">int</span> id[N],scc_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> st[N],ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(g[u][i]&amp;&amp;!st[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_con</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!st[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx = q[a].x-q[b].x;</span><br><span class="line">    <span class="keyword">double</span> dy = q[a].y-q[b].y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line">    stk[++top]=u,ins[u]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j=pre[u];</span><br><span class="line">    <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">        <span class="built_in">tarjan</span>(j);</span><br><span class="line">        low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        scc_cnt ++;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stk[top --];</span><br><span class="line">            ins[y]=<span class="literal">false</span>;</span><br><span class="line">            id[y]=scc_cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">zhuliu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">if</span>(g[i][j]) d[i][j] = <span class="built_in">get_dist</span>(i,j);</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//找所有点的入点的最短边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            pre[i]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[pre[i]][i] &gt; d[j][i]) </span><br><span class="line">                    pre[i]=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//tarjan找环</span></span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">        timestamp=scc_cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) </span><br><span class="line">                <span class="built_in">tarjan</span>(i);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//缩点后无环,累加答案后算法结束</span></span><br><span class="line">        <span class="keyword">if</span>(scc_cnt == n) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) ans += d[pre[i]][i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//累加所有环内的边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span>(id[pre[i]]==id[i])</span><br><span class="line">                ans += d[pre[i]][i];</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//清空bd数组,准备存储缩点完更新的边权 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc_cnt;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=scc_cnt;j++)</span><br><span class="line">                bd[i][j] = INF;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历每一个点，然后根据缩点后的结果对边进行操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(d[i][j] &lt; INF &amp;&amp; id[i] != id[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> a=id[i],b=id[j];</span><br><span class="line">                    <span class="keyword">if</span>(id[pre[j]] == id[j]) </span><br><span class="line">                        bd[a][b]=<span class="built_in">min</span>(bd[a][b],d[i][j]-d[pre[j]][j]);</span><br><span class="line">                    <span class="keyword">else</span> bd[a][b] = <span class="built_in">min</span>(bd[a][b], d[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">        n = scc_cnt;</span><br><span class="line">        <span class="built_in">memcpy</span>(d,bd,<span class="keyword">sizeof</span> d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;q[i].x,&amp;q[i].y);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>(a!=b&amp;&amp;b!=<span class="number">1</span>) g[a][b]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">check_con</span>()) <span class="built_in">puts</span>(<span class="string">&quot;poor snoopy&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,<span class="built_in">zhuliu</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;朱刘算法&quot;&gt;&lt;a href=&quot;#朱刘算法&quot; class=&quot;headerlink&quot; title=&quot;朱刘算法&quot;&gt;&lt;/a&gt;朱刘算法&lt;/h2&gt;&lt;p&gt;有向图的类Prim算法，找有向图的最小生成树。&lt;/p&gt;
&lt;h3 id=&quot;最小树形图&quot;&gt;&lt;a href=&quot;#最小树形图&quot; cl</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
</feed>
