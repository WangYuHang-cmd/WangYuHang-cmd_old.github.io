<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perf</title>
  
  
  <link href="https://wangyuhang-cmd.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangyuhang-cmd.github.io/"/>
  <updated>2022-05-30T04:25:31.440Z</updated>
  <id>https://wangyuhang-cmd.github.io/</id>
  
  <author>
    <name>Perf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CCPC江苏省赛_小结</title>
    <link href="https://wangyuhang-cmd.github.io/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/"/>
    <id>https://wangyuhang-cmd.github.io/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/</id>
    <published>2022-05-29T17:25:25.000Z</published>
    <updated>2022-05-30T04:25:31.440Z</updated>
    
    <content type="html"><![CDATA[<p>​    因为昨天刚举办完校赛，所以没有时间来写这个总结。现在是01：25，我就浅写一下这次省赛的小结。</p><p>​    28号，也就是前天参加了CCPC江苏省省赛，最终终榜rk19,共发14金28银，因此位列银首。这是我XCOC生涯的第一块奖牌。</p><p><strong><img src="/2022/05/30/CCPC%E6%B1%9F%E8%8B%8F%E7%9C%81%E8%B5%9B-%E5%B0%8F%E7%BB%93/1.png" class title="This is an test image"></strong></p><p>大致说一下，其实离上次昆明区域赛打铁也并没有多久，我感觉自己并没有完全从上次的小小的打击中完全反应过来，然后这一个月的竞技水平的话时好时坏，效率也不是很高，紫也没有冲上去，还因为不可名状的整活小号狠狠的掉了一波分。因此，就知识点掌握层面和竞技状态方面来说我这次比赛前并没有调整到最佳。不过这几天休息的很好，不像之前每天都是2点多才睡觉，也因此我有了充分的精力来进行思考。</p><p>先说比赛，开局我直接看了A，大概刚30s扫完题目我就知道这是一道签到题(毕竟LOL的截屏这么大)然后就交给目前坐在键盘前的grd来写，我继续看下面的题目。我然后看了B，发现给定n构造出一些圆满足每一个位置和左边或者右边的和必须为质数，尝试手动解答了一下样例，发现并不是我很快能够解决的问题，因此我直接跳过，然后看C。看了一会儿，grd把A给过了，25min1A。这个时候wzy和我说I和K都有人过了，因此我和wzy去看了K，grd去看了I。刚看完K，我就大概会了，因为这道构造题简直和昆明的那道使用的方法如出一辙，都是用二进制进行构造，然后我把我的思路和wzy说了一下，他确认过没有问题，然后我就去写代码，因为有一个细节没注意，导致这个稍微花了我一点时间，中途grd说了一下I的做法交了，发现WA了，此时的我们排名已经掉到50左右了，还好并没有因此着急。紧接着我就把K调出来了，然后和grd一起去看I,先是口胡了一个某位字符的方法，发现不太对。好在我突然发现这是一道诈骗题，然后就赶紧过了。此时3题，rk25左右。然后我去看C，grd去看J。我在推C的式子的时候想到了一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的做法，辛亏wzy制止了我写线段树。此时grd打了一下J的表，发现了规律，我们又把题意和grd说了一下，他说这道题有点像单调队列优化的DP，我突然缓过神来，好像确实可以这么做。写代码写的稍微慢了一点点，然后因为初始化的问题又wa了一发，最终在3个小时的时候2A了这道题，此时我们的排名在20左右。之后grd接着写J，很快就A了，当时这道题也才过了十几个人，我们此时rk10，已经进入了金牌区，意味着我们只要再搞出一道题来就能拿金了，可惜最后我L没有搞出来，虽然已经近在咫尺了，感觉能挖掘的很强的性质都已经挖掘出来了…好可惜。</p><p>总的来说，银首的话也能对得起我们直线的训练。我们在这之前vp了2021江西省赛，2021，2022浙江省赛，2022东北省赛,我个人也vp了2021东北省赛，我们所有vp都是银首的排位，甚至像江西省赛和东北赛我们最终都是金尾。因此我觉得我们还有很大的进步空间。</p><p>下面一个月就是好好准备期末了，期待之后的多校能够有所突破。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    因为昨天刚举办完校赛，所以没有时间来写这个总结。现在是01：25，我就浅写一下这次省赛的小结。&lt;/p&gt;
&lt;p&gt;​    28号，也就是前天参加了CCPC江苏省省赛，最终终榜rk19,共发14金28银，因此位列银首。这是我XCOC生涯的第一块奖牌。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="感悟" scheme="https://wangyuhang-cmd.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>dsu_on_tree</title>
    <link href="https://wangyuhang-cmd.github.io/2022/05/26/dsu-on-tree/"/>
    <id>https://wangyuhang-cmd.github.io/2022/05/26/dsu-on-tree/</id>
    <published>2022-05-26T06:33:12.000Z</published>
    <updated>2022-05-26T07:05:44.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dsu-on-tree"><a href="#dsu-on-tree" class="headerlink" title="dsu on tree"></a>dsu on tree</h2><p>DSU on tree ，作为一个比较神奇的算法，常常可以代替树剖/树上莫队来完成一些分别处理以每个根节点为问题核心关于其子树的问题。</p><p>本算法的思想就是类似于树剖，每次维护树的重儿子为根的子树，即儿子最多的子树，这样可以保证每个点呗操作一次会使得维护的节点数至少翻倍。因此每个点最多被维护$log{n}$次，总时间复杂度为$O(nlogn)$</p><p>模板题：</p><p><a href="https://vjudge.net/problem/CodeForces-600E">A - Lomsat gelral</a></p><p>大意是找到以每个点为根节点的子树的主要颜色之和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=N*<span class="number">2</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,e[M],ne[M],h[N],sz[N],son[N],color[N],idx;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,cnt[N],mx,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_son</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_son</span>(j ,u);</span><br><span class="line">        <span class="keyword">if</span>(sz[j]&gt;sz[son[u]]) son[u]=j;</span><br><span class="line">        sz[u]+=sz[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> op,<span class="keyword">int</span> zson)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c=color[u];</span><br><span class="line">    cnt[c] += op;</span><br><span class="line">    <span class="keyword">if</span>(cnt[c]&gt;mx) mx=cnt[c], sum=c;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt[c]==mx) sum += c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==pre||j==zson) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">modify</span>(j, u, op, zson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(j==pre||j==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u], u, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">modify</span>(u, pre, <span class="number">1</span>, son[u]);</span><br><span class="line">    ans[u]=sum;</span><br><span class="line">    <span class="keyword">if</span>(!s) <span class="built_in">modify</span>(u, pre, <span class="number">-1</span>, <span class="number">0</span>),sum=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) color[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">add</span>(u,v), <span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs_son</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 算是dsu on tree的模板了，先一遍DFS与处理出所有节点的重儿子，然后第二遍dfs的时候先dfs所有的非重儿子,再dfs所有的重儿子来处理答案。有一个优化小技巧，预处理的时候顺便与处理出dfs序，这样就不需要递归修改，改为直接循环修改，这样可以减小代码常熟。</p><p>dsu on tree 算是一个越来越板的套路，基本上只要改一改板子，转化一下问题就可以了。</p><p><a href="https://vjudge.net/problem/CodeForces-570D">B - Tree Requests</a></p><p>求每一个点特定数量的字符是否可以构成回文串。也是非常的板的一道题目，能不能构成回文串取决于奇数个字符的数量是否不超过2.因此直接再dsu on tree的时候维护一下每个点特定深度下的26个字母的个数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line"><span class="keyword">int</span> sz[N],dep[N],son[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N][<span class="number">27</span>];</span><br><span class="line"><span class="keyword">int</span> l[N],id[N],r[N],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>,dep[u]=dep[pre]+<span class="number">1</span>;l[u]=++idx,id[idx]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(sz[son[u]]&lt;sz[v]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    cnt[dep[u]][ch[u]-<span class="string">&#x27;a&#x27;</span>]+=d;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs</span>(son[u], u, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==pre||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)</span><br><span class="line">            <span class="built_in">add</span>(id[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(u, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> q:qry[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[q.x][i]&amp;<span class="number">1</span>) tmp++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q.y]=(tmp&lt;<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!top) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)&#123;</span><br><span class="line">            <span class="built_in">add</span>(id[i], <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">2</span>,n) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">        edge[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">read</span>(),h=<span class="built_in">read</span>();</span><br><span class="line">        qry[x].<span class="built_in">push_back</span>(&#123;h,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m) <span class="built_in">puts</span>(ans[i]?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-Blood-Cousins-Return"><a href="#C-Blood-Cousins-Return" class="headerlink" title="C - Blood Cousins Return"></a><a href="https://vjudge.net/problem/CodeForces-246E">C - Blood Cousins Return</a></h4><p> 求对于每个点相对深度下不同名字的孙子的数量。将相对深度转化为绝对深度，借助<code>set&lt;string&gt;</code>来维护对应深度的名字数量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500010</span></span><br><span class="line"><span class="keyword">int</span> n,m,x,dep[N],sz[N],son[N],l[N],r[N],id[N],idx,ans[N];</span><br><span class="line">string name[N];</span><br><span class="line">set&lt;string&gt; ds[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    l[u]=++idx,id[idx]=u,sz[u]=<span class="number">1</span>,dep[u]=d;</span><br><span class="line">    son[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="built_in">dfs_init</span>(v, d+<span class="number">1</span>);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(son[u]==<span class="number">-1</span>||sz[v] &gt; sz[son[u]]) son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]!=<span class="number">-1</span>) <span class="built_in">dfs</span>(son[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)&#123;</span><br><span class="line">            ds[dep[id[i]]].<span class="built_in">insert</span>(name[id[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ds[dep[u]].<span class="built_in">insert</span>(name[u]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> q:qry[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> k=q.x,id=q.y;</span><br><span class="line">        ans[id]=ds[k].<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!top)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)</span><br><span class="line">            ds[dep[id[i]]].<span class="built_in">erase</span>(name[id[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; name[i] &gt;&gt; x;</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(i);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs_init</span>(<span class="number">0</span>,<span class="number">0</span>);  </span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> v,k;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; k;</span><br><span class="line">        qry[v].<span class="built_in">push_back</span>(&#123;k+dep[v],i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">print</span>(ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="D-Blood-Cousins"><a href="#D-Blood-Cousins" class="headerlink" title="D - Blood Cousins"></a><a href="https://vjudge.net/problem/CodeForces-208E">D - Blood Cousins</a></h4><p>计算给定点v的k级表兄的数量，我们可以转化为v的k级祖先的相对深度为k的子孙的数量，答案直接是-1即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line"><span class="keyword">int</span> n,m,sz[N],dep[N],son[N];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>][N],ans[N];</span><br><span class="line">vector&lt;pii&gt; qry[N];</span><br><span class="line"><span class="keyword">int</span> l[N],r[N],id[N],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_init</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>,dep[u]=d,son[u]=<span class="number">-1</span>;</span><br><span class="line">    l[u]=++idx,id[idx]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        f[<span class="number">0</span>][v]=u;</span><br><span class="line">        <span class="built_in">dfs_init</span>(v, u, d+<span class="number">1</span>);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span>(son[u]==<span class="number">-1</span>||sz[son[u]] &lt; sz[v]) </span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    r[u]=idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[u]!=<span class="number">-1</span>) <span class="built_in">dfs</span>(son[u], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[v];i&lt;=r[v];++i)</span><br><span class="line">            cnt[dep[id[i]]] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[dep[u]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:qry[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> dp=v.x,id=v.y;</span><br><span class="line">        ans[id]=cnt[dp]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!top)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[u];i&lt;=r[u];++i)</span><br><span class="line">            cnt[dep[id[i]]] --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(k&gt;&gt;i&amp;<span class="number">1</span>) </span><br><span class="line">            u=f[i][u];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="built_in">read</span>();</span><br><span class="line">        edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs_init</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;++j)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=<span class="built_in">read</span>(),p=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">get</span>(v,p);</span><br><span class="line">        <span class="keyword">if</span>(t) qry[t].<span class="built_in">push_back</span>(&#123;dep[t]+p,i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;dsu-on-tree&quot;&gt;&lt;a href=&quot;#dsu-on-tree&quot; class=&quot;headerlink&quot; title=&quot;dsu on tree&quot;&gt;&lt;/a&gt;dsu on tree&lt;/h2&gt;&lt;p&gt;DSU on tree ，作为一个比较神奇的算法，常常可以代替树剖/</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树论" scheme="https://wangyuhang-cmd.github.io/tags/%E6%A0%91%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数点问题</title>
    <link href="https://wangyuhang-cmd.github.io/2022/04/26/%E6%95%B0%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://wangyuhang-cmd.github.io/2022/04/26/%E6%95%B0%E7%82%B9%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-26T15:29:17.000Z</published>
    <updated>2022-05-30T04:28:27.857Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数点问题"><a class="markdownIt-Anchor" href="#数点问题"></a> 数点问题</h4><h5 id="二维数点"><a class="markdownIt-Anchor" href="#二维数点"></a> 二维数点</h5><p>平面有<code>n</code>个点，回答q个询问，每个询问给定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo>⋅</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x_1,y_1]\cdot[x_2,y_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>,求在这个范围内的点数</p><h5 id="做法1cdq分治"><a class="markdownIt-Anchor" href="#做法1cdq分治"></a> 做法1：CDQ分治</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pos</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z,p,id,sum;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Pos&amp;W)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=W.x) <span class="keyword">return</span> x&lt;W.x;</span><br><span class="line"><span class="keyword">if</span>(y!=W.y) <span class="keyword">return</span> y&lt;W.y;</span><br><span class="line"><span class="keyword">return</span> z &lt; W.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;p[N],tmp[N];</span><br><span class="line"><span class="keyword">int</span> n,m,idx,ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">merge</span>(l,mid); <span class="built_in">merge</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].y&lt;=p[j].y) sum += (!p[i].z), tmp[++cnt]=p[i++];</span><br><span class="line"><span class="keyword">else</span> p[j].sum += sum, tmp[++cnt] = p[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) sum += (!p[i].z), tmp[++cnt]=p[i++];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=r) p[j].sum += sum, tmp[++cnt] = p[j++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l,j=<span class="number">1</span>;i&lt;=r;) p[i++]=tmp[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">p[++idx]=&#123;x,y,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x1=<span class="built_in">read</span>(),x2=<span class="built_in">read</span>(),y1=<span class="built_in">read</span>(),y2=<span class="built_in">read</span>();</span><br><span class="line">p[++idx]=&#123;x2,y2,<span class="number">1</span>,<span class="number">1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">p[++idx]=&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">p[++idx]=&#123;x1<span class="number">-1</span>,y2,<span class="number">1</span>,<span class="number">-1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">p[++idx]=&#123;x2,y1<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>, p+<span class="number">1</span>+idx);</span><br><span class="line"><span class="built_in">merge</span>(<span class="number">1</span>,idx);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=idx;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i].z) </span><br><span class="line">ans[p[i].id] += p[i].p*p[i].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">print</span>(ans[i]); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CDQ分治是处理二维/三维数点问题非常高效的离线做法，能够做到时间复杂度O(nlogn)带非常小常数,空间复杂度O(n)</p><h5 id="2离线树状数组"><a class="markdownIt-Anchor" href="#2离线树状数组"></a> 2.离线+树状数组</h5><p>这种做法就是按照横坐标排序后对纵坐标离散化后用树状数组维护位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n,tr[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x)&amp;(-x))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;n=_n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x)) tr[x]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=<span class="built_in">lowbit</span>(x)) ans+=tr[x];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">int</span> n,m,k,ans[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; alls;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>(), x) - alls.<span class="built_in">begin</span>()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Pos</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z,p;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Pos&amp; W)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=W.x) <span class="keyword">return</span> x &lt; W.x;</span><br><span class="line"><span class="keyword">return</span> z&lt;W.z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Pos&gt; q;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>();</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x,y,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> x1=<span class="built_in">read</span>(),x2=<span class="built_in">read</span>(),y1=<span class="built_in">read</span>(),y2=<span class="built_in">read</span>();</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x2,y2,i,<span class="number">1</span>&#125;);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x1<span class="number">-1</span>,y1<span class="number">-1</span>,i,<span class="number">1</span>&#125;);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x1<span class="number">-1</span>,y2,i,<span class="number">-1</span>&#125;);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;x2,y1<span class="number">-1</span>,i,<span class="number">-1</span>&#125;);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y1);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y2);</span><br><span class="line">alls.<span class="built_in">push_back</span>(y1<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>());</span><br><span class="line">T.<span class="built_in">resize</span>(alls.<span class="built_in">size</span>()+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:q)&#123;</span><br><span class="line"><span class="keyword">int</span> x=u.x, y=u.y,z=u.z,p=u.p;</span><br><span class="line">y=<span class="built_in">get</span>(y);</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">0</span>)&#123;</span><br><span class="line">T.<span class="built_in">add</span>(y, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=T.<span class="built_in">ask</span>(y);</span><br><span class="line">ans[z]+=tmp*p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">print</span>(ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;数点问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数点问题&quot;&gt;&lt;/a&gt; 数点问题&lt;/h4&gt;
&lt;h5 id=&quot;二维数点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二维数点&quot;&gt;&lt;/a&gt; 二维数点&lt;/h5</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数点问题" scheme="https://wangyuhang-cmd.github.io/tags/%E6%95%B0%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Kunming 打铁总结</title>
    <link href="https://wangyuhang-cmd.github.io/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/"/>
    <id>https://wangyuhang-cmd.github.io/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-17T23:50:47.000Z</published>
    <updated>2022-04-18T00:02:27.233Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚过于emo九点就睡了，今天早上爬起来做一个阶段性的小总结：</p><p>额，昨天昆明区域赛打铁了，意料之外的事情，毕竟我对我们队的定位是保铜争银的，但是铁了就是铁了，现在说什么也只能是事后口胡。</p><p>刚开局，我开始看D，然后两个队友分别看其他几题。负责数学的grd觉得C可以写，于是他就专门负责推导C。然后十分钟左右看了一眼榜单，发现K有人过了，我就去看K，然后十分钟左右我推出来了一个式子，代码就一行，然后花了十分钟左右证明了一下发现是对的，因此在30min左右的时候1发A了K，然后我们就开始看其他题目。然后之后键盘交给了写C的grd，我和wzy又去看了其他题目，这段时间榜有点歪，可惜看了一题F没看出来是签到，然后看了瓶子概率那道题，题目还读错了，就这样晃了一个小时，看到D过的人变多了之后我们就开始看D，很快二十分钟左右我就想出来了一个思路，正好这个时候键盘没人用我就上去写C，大概十分钟就码好了，交了第一发，wa了，开始想什么原因，二十多分钟后发现0的情况有解，交了一发还是wa，以为是超过了365，就写了个程序跑了一下1e8，还是发现不了哪里错了。然后和两个队友说了一下，一个队友听懂了想重构一下，然后重构到一半发现思路断了，不过我立刻有了思路开始重写。重写完又一发wa，当时心态直接炸裂啊…因为我交了三发罚时，最终在前前后后折磨了两个小时左右才发现2的情况要特判，不然按照我的构造方式会出锅。于是又交了一发过了，大概是三个多小时左右。此时我感觉不妙…然后最后队友两个去写A，我看了看瓶子那题。最后可惜A没出，铁首出局…</p><p>昨天晚上我就躺在床上思考，到底是什么原因导致的。大概就是，策略分配问题+训练不饱和。</p><p>确实这个突如其来的铁打乱了很多安排。</p><p>不过转念想想，或许还是要一定的参赛经验积累才行。由于我一开始不是计算机学院的，打ACM也是半路出家。去年五月份听说了有ACM这个比赛，然后自己学习了一下C语言和C++，然后去打了一下校赛，感觉还行就准备参加ACM训练。经过了期末周，大概是7月十几号的样子我买了一本洛谷的算法书自己开始写，很快就写完了，然后紧接着就是在往上找课，刷题，八月份开始打CF，几场就青了，但是后面晃了一两个月才上了蓝，现在两个号都是1800左右。感觉还是学习时间较短导致的知识点和经验积累不够，因为这个导致什么事情都有可能发生.毕竟我才学了大半年，再来一段时间的学习，一定会有提升的。</p><p><strong><img src="/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/1.jpg" class title="This is an test image"></strong></p><p><strong><img src="/2022/04/18/Kunming-%E6%89%93%E9%93%81%E6%80%BB%E7%BB%93/2.jpg" class title="This is an test image"></strong></p><p>本来是没有机会打这一次昆明的，还是要感谢我的队友wzy，他们队打完Jscpc之后有一个队员走了，他就叫上了我。确实打昆明是额外到来的机会，没有抓住机会，一方面赖我的机会把握能力的同时一方面也算是给我积累了一次参赛经历。十分的可惜，太可惜了，不过睡一觉起来感觉也好多了，毕竟人要向前看啊…</p><p>虽然是一次失败的参赛经历，不过还是感谢队友的付出。菜是原罪，下一步只能加练。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨晚过于emo九点就睡了，今天早上爬起来做一个阶段性的小总结：&lt;/p&gt;
&lt;p&gt;额，昨天昆明区域赛打铁了，意料之外的事情，毕竟我对我们队的定位是保铜争银的，但是铁了就是铁了，现在说什么也只能是事后口胡。&lt;/p&gt;
&lt;p&gt;刚开局，我开始看D，然后两个队友分别看其他几题。负责数学的</summary>
      
    
    
    
    
    <category term="感悟" scheme="https://wangyuhang-cmd.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>计数专题</title>
    <link href="https://wangyuhang-cmd.github.io/2022/03/06/%E8%AE%A1%E6%95%B0%E4%B8%93%E9%A2%98/"/>
    <id>https://wangyuhang-cmd.github.io/2022/03/06/%E8%AE%A1%E6%95%B0%E4%B8%93%E9%A2%98/</id>
    <published>2022-03-06T08:00:32.000Z</published>
    <updated>2022-03-06T08:08:41.211Z</updated>
    
    <content type="html"><![CDATA[<p>计数问题一直是让我头疼的问题啊…最近开始整理相关的问题。</p><h2 id="NamoCamp每日一题"><a href="#NamoCamp每日一题" class="headerlink" title="NamoCamp每日一题"></a><code>NamoCamp</code>每日一题</h2><h3 id="467-路径计数2"><a href="#467-路径计数2" class="headerlink" title="#467. 路径计数2"></a>#467. 路径计数2</h3><ul><li><a href="http://oj.daimayuan.top/problem/467#tab-statement"> 描述</a></li><li><a href="http://oj.daimayuan.top/problem/467#tab-submit-answer"> 提交</a></li></ul><p>有一个 n∗n 的网格，有些格子是可以通行的，还有 m 个格子是障碍。</p><p>一开始你在左上角的位置，你可以每一步往下或者往右走，问有多少种走到右下角的方案。</p><p>由于答案很大，输出对 1e9+7取模的结果。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个数字 n, m。</p><p>接下来 m 行，每行 2 个整数 <code>xi,yi</code>，代表第 i 个障碍的坐标。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个数，表示答案。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h4><p>所有数据保证 <code>1≤n≤106,1≤m≤3000,1≤xi,yi≤n</code></p><p>首先我们观察到数据范围不适合做n*n的DP，因此我们寻找突破口m=3000，设状态<code>DP[i]</code>表示从(1,1)到第i个障碍，其中不经过其他任何障碍的方案数.因此对于第i个障碍的转移需要其他所有状态中横纵坐标都小于第i个障碍的点来进行转移。</p><p>我们可以用BFS或者记忆化搜索来完成状态的转移：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">6010</span>,M=<span class="number">2000010</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pos[N];</span><br><span class="line"><span class="keyword">int</span> f[N],fact[M],inv[M],n,m;<span class="comment">//C[N][N];</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==m||m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (LL)fact[n]*inv[n-m]%mod*inv[m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,M<span class="number">-10</span>) fact[i]=(LL)fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">inv[M<span class="number">-10</span>]=<span class="built_in">fpower</span>(fact[M<span class="number">-10</span>], mod<span class="number">-2</span>,mod);</span><br><span class="line"><span class="built_in">per</span>(i,M<span class="number">-11</span>,<span class="number">1</span>) inv[i]=(LL)inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[u]!=<span class="number">-1</span>) <span class="keyword">return</span> f[u];</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[i].x&lt;=pos[u].x&amp;&amp;pos[i].y&lt;=pos[u].y&amp;&amp;i!=u)</span><br><span class="line">res=(res+(LL)<span class="built_in">dfs</span>(i)*<span class="built_in">C</span>(pos[u].x-pos[i].x+pos[u].y-pos[i].y,pos[u].x-pos[i].x)%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">res=(((LL)<span class="built_in">C</span>(pos[u].x<span class="number">-1</span>+pos[u].y<span class="number">-1</span>,pos[u].x<span class="number">-1</span>)-res)%mod+mod)%mod;</span><br><span class="line"><span class="keyword">return</span> f[u]=res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) pos[i].x=<span class="built_in">read</span>(),pos[i].y=<span class="built_in">read</span>();</span><br><span class="line">pos[++m].x=n,pos[m].y=n;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dfs</span>(m));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计数问题一直是让我头疼的问题啊…最近开始整理相关的问题。&lt;/p&gt;
&lt;h2 id=&quot;NamoCamp每日一题&quot;&gt;&lt;a href=&quot;#NamoCamp每日一题&quot; class=&quot;headerlink&quot; title=&quot;NamoCamp每日一题&quot;&gt;&lt;/a&gt;&lt;code&gt;NamoCamp</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="计数问题整理" scheme="https://wangyuhang-cmd.github.io/tags/%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round</title>
    <link href="https://wangyuhang-cmd.github.io/2022/01/24/Codeforces-Round-767-Div-2-A-E/"/>
    <id>https://wangyuhang-cmd.github.io/2022/01/24/Codeforces-Round-767-Div-2-A-E/</id>
    <published>2022-01-23T16:15:20.000Z</published>
    <updated>2022-03-06T08:09:54.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-Round-767-Div-2-A-E"><a href="#Codeforces-Round-767-Div-2-A-E" class="headerlink" title="Codeforces Round  767 (Div. 2)  A~E"></a>Codeforces Round  767 (Div. 2)  A~E</h2><h3 id="A-Download-More-RAM"><a href="#A-Download-More-RAM" class="headerlink" title="A Download More RAM"></a><a href="https://codeforces.com/contest/1629/problem/A">A Download More RAM</a></h3><p>大意是你一开始有 m G内存,每次你可以使用不超过你内存的RAM来升级你的内存，第i个扩充内存b[i].</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>直接贪心即可，每次都选最小的来升级。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i].x=<span class="built_in">read</span>(),a[i].y=i;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) b[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(m&gt;=a[i].x) m+=b[a[i].y];</span><br><span class="line"><span class="built_in">print</span>(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-GCD-Arrays"><a href="#B-GCD-Arrays" class="headerlink" title="B. GCD Arrays"></a><a href="https://codeforces.com/contest/1629/problem/B">B. GCD Arrays</a></h3><p>大意是给你一段连续的[l,r]之内的数，每次可以选择两个数丢掉并把他们的乘积加进来，问k次操作以内是否可以把整个序列的gcd大于1</p><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><p>我们可以直接想到让区间内的所有数获得因子2是操作最少的，因此把所有奇数操作掉即可。因此判断[l,r]中的奇数数量是否小于等于k,注意<code>l=r=1</code>的时候要特判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>(),k=<span class="built_in">read</span>();</span><br><span class="line">LL num=(r-l)/<span class="number">2</span>+(((l%<span class="number">2</span>)==<span class="number">0</span>)||(r%<span class="number">2</span>==<span class="number">0</span>));</span><br><span class="line">num=r-l+<span class="number">1</span>-num;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">1</span>&amp;&amp;r==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l==r&amp;&amp;l!=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=num) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Meximum-Array"><a href="#C-Meximum-Array" class="headerlink" title="C. Meximum Array"></a><a href="https://codeforces.com/contest/1629/problem/C">C. Meximum Array</a></h3><p>大意是给你一个序列，你可以任意分割序列使得得到的每一段序列的mex值按顺序组成新序列字典序最大</p><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><p>容易想到，需要贪心的让第一端mex最大，然后在剩下的让第二段mex最大…因此我们可以利用双指针直接模拟，用两个辅助数组，一个记录哪些数出现过，另一个记录每个数出现了多少次。前面的指针每次找到当前端mex-1第一次出现的位置，然后记录答案，后面的指针删去这一段的次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>, tot=<span class="number">200000</span>;</span><br><span class="line"><span class="keyword">int</span> n,cnt[N],a[N],num[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> mex=<span class="number">0</span>,last=<span class="number">0</span>,mx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">mex=mx=<span class="number">0</span>; ans.<span class="built_in">clear</span>();</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">read</span>(),mx=<span class="built_in">max</span>(mx,a[i]),num[a[i]]++;</span><br><span class="line">last=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">cnt[a[i]]++;</span><br><span class="line"><span class="keyword">while</span>(cnt[mex]) mex++;</span><br><span class="line"><span class="keyword">if</span>(!num[mex])&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(mex);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=last;j&lt;=i;++j) num[a[j]]-=cnt[a[j]],cnt[a[j]]=<span class="number">0</span>;</span><br><span class="line">mex=<span class="number">0</span>;</span><br><span class="line">last=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(ans.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> u:ans) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,mx) num[i]=<span class="number">0</span>,cnt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Peculiar-Movie-Preferences"><a href="#D-Peculiar-Movie-Preferences" class="headerlink" title="D. Peculiar Movie Preferences"></a><a href="D. Peculiar Movie Preferences">D. Peculiar Movie Preferences</a></h3><p>大意是给你一些长度不超过3的字符串，问在保留原有顺序的情况下是否可以选择一些字符串（不可以不选）拼接成回文串</p><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><p>最终是回文串一共只有五种情况。</p><ul><li>存在单个字符或者本身回文的字符串</li><li>长度2+长度2拼接成回文串</li><li>长度2+长度3拼接成回文串</li><li>长度3+长度2拼接成回文串</li><li>长度3+长度3拼接成回文串</li></ul><p>由于长度很短，因此我们可以不用哈希，直接开数组存储即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>,M=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">string str[N];</span><br><span class="line"><span class="keyword">int</span> t1[M],t2[M][M],t3[M][M][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(t1,<span class="number">0</span>,<span class="keyword">sizeof</span> t1);</span><br><span class="line"><span class="built_in">memset</span>(t2,<span class="number">0</span>,<span class="keyword">sizeof</span> t2);</span><br><span class="line"><span class="built_in">memset</span>(t3,<span class="number">0</span>,<span class="keyword">sizeof</span> t3);</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) cin &gt;&gt; str[i];</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">1</span>)&#123; <span class="comment">//1</span></span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">2</span>)&#123;<span class="comment">//2+2 2+3</span></span><br><span class="line">t2[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])]++;</span><br><span class="line"><span class="keyword">if</span>(str[i][<span class="number">0</span>]==str[i][<span class="number">1</span>]) &#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//3,3+3,3+2</span></span><br><span class="line">t3[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">2</span>])]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ok)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//2+2</span></span><br><span class="line"><span class="keyword">if</span>(t2[<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])]) &#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2+3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">26</span>;++j) &#123;</span><br><span class="line"><span class="keyword">if</span>(ok) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(t3[j][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])])&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//3+3</span></span><br><span class="line"><span class="keyword">if</span>(t3[<span class="built_in">get</span>(str[i][<span class="number">2</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])])&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3+2</span></span><br><span class="line"><span class="keyword">if</span>(t2[<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">0</span>])])&#123;</span><br><span class="line">ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">2</span>) t2[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])]--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i].<span class="built_in">size</span>()==<span class="number">3</span>) t3[<span class="built_in">get</span>(str[i][<span class="number">0</span>])][<span class="built_in">get</span>(str[i][<span class="number">1</span>])][<span class="built_in">get</span>(str[i][<span class="number">2</span>])]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(ok?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-Grid-Xor"><a href="#E-Grid-Xor" class="headerlink" title="E. Grid Xor"></a><a href="https://codeforces.com/contest/1629/problem/E">E. Grid Xor</a></h3><p>大意是给你一个边长为偶数的正方形方格，只告诉你每个方格其所有相邻方格的异或和，求整个方形的全部元素异或和。</p><h5 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h5><p><strong><img src="/2022/01/24/Codeforces-Round-767-Div-2-A-E/1.jpg" class title="This is an test image"></strong></p><p>我们通过模拟4*4的发现一定是两个两个选的，且不能选会覆盖之前已经选了的区域。根据题目中</p><p>可以证明解一定唯一，我们得知解一定存在，又由于是正方形，因此我们一行一行的选取格子并将其覆盖区域染色，时刻保证</p><ul><li>前面的空格不被遗漏</li><li>后面新选取的格子覆盖的区域与之前无重叠</li></ul><p>因为有重叠了等于没染，此时又要新的格子来染被消除的，会导致新的格子被消除。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N][N],g[N][N],mov[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">n=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) a[i][j]=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">0</span>,<span class="number">3</span>)&#123;  <span class="comment">//先判断四周有没有被覆盖到</span></span><br><span class="line"><span class="keyword">int</span> x=i+mov[k][<span class="number">0</span>], y=j+mov[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(g[x][y]) flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123; <span class="comment">//如果没有被覆盖到，则选择</span></span><br><span class="line">ans^=a[i][j];</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">0</span>,<span class="number">3</span>)&#123;  <span class="comment">//先判断四周有没有被覆盖到</span></span><br><span class="line"><span class="keyword">int</span> x=i+mov[k][<span class="number">0</span>], y=j+mov[k][<span class="number">1</span>];</span><br><span class="line">g[x][y] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Codeforces-Round-767-Div-2-A-E&quot;&gt;&lt;a href=&quot;#Codeforces-Round-767-Div-2-A-E&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Round  767 (Div. 2)  </summary>
      
    
    
    
    <category term="codeforces" scheme="https://wangyuhang-cmd.github.io/categories/codeforces/"/>
    
    
    <category term="题解" scheme="https://wangyuhang-cmd.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>朱刘算法</title>
    <link href="https://wangyuhang-cmd.github.io/2022/01/18/%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/"/>
    <id>https://wangyuhang-cmd.github.io/2022/01/18/%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/</id>
    <published>2022-01-18T09:38:23.000Z</published>
    <updated>2022-05-30T02:04:12.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="朱刘算法"><a class="markdownIt-Anchor" href="#朱刘算法"></a> 朱刘算法</h2><p>有向图的类Prim算法，找有向图的最小生成树。</p><h3 id="最小树形图"><a class="markdownIt-Anchor" href="#最小树形图"></a> 最小树形图</h3><p>树形图：</p><ul><li>无有向环</li><li>除了根节点外，每个点入度为1</li></ul><p>以某个点为根的一棵有向树，其边权之和为图中所有树形图中是最小的称为最小树形图。</p><h3 id="朱刘算法-onm"><a class="markdownIt-Anchor" href="#朱刘算法-onm"></a> 朱刘算法  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><p>(1) 除了根节点外对每个点选取一条边权最小的入边</p><p>(2)判断当前(选出的边)组成的图中有无环</p><p>​1.若无环：则说明当前图已经为构造好的最小生成树，算法结束</p><p>​2.若有环：进行第(3)步</p><p>(3)将构造的图进行强连通分量缩点，得到新图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">G&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>,对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">G&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>中的所有边</p><p>​1.如果是环中的边：直接删去</p><p>​2.如果终点在环内(即新缩的点)：更新此边权权值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>−</mo><msub><mi>W</mi><mrow><mi mathvariant="normal">环</mi><mi mathvariant="normal">内</mi></mrow></msub></mrow><annotation encoding="application/x-tex">W-W_{环内}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">环</span><span class="mord cjk_fallback mtight">内</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>​3.其他边：不变</p><p>然后继续从(1)开始迭代</p><blockquote><p>当迭代完成后,所有选择的边的边权之和就是最终的答案。</p></blockquote><h4 id="邻接矩阵版本"><a class="markdownIt-Anchor" href="#邻接矩阵版本"></a> 邻接矩阵版本：</h4><blockquote><p>由于复杂度是 <code>O(nm)</code>，因此在存储图的时候不需要背邻接表的板子，直接背邻接矩阵的即可。</p></blockquote><p>板子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>,M=<span class="number">2e4</span>+<span class="number">10</span>,INF=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,r;</span><br><span class="line"><span class="keyword">int</span> d[N][N],bd[N][N],g[N][N];</span><br><span class="line"><span class="keyword">int</span> pre[N],bpre[N];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],timestamp,stk[N],top;</span><br><span class="line"><span class="keyword">int</span> id[N],scc_cnt;</span><br><span class="line"><span class="keyword">bool</span> st[N],ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">st[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line"><span class="keyword">if</span>(d[u][i]&lt;INF&amp;&amp;!st[i])</span><br><span class="line"><span class="built_in">dfs</span>(i); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_con</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line"><span class="built_in">dfs</span>(r);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) </span><br><span class="line"><span class="keyword">if</span>(!st[i]) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">dfn[u]=low[u]=++timestamp;</span><br><span class="line">stk[++top]=u;ins[u]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j=pre[u];</span><br><span class="line"><span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(j);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">scc_cnt ++;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">y=stk[top --];</span><br><span class="line">ins[y]=<span class="literal">false</span>;</span><br><span class="line">id[y]=scc_cnt;</span><br><span class="line">&#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhuliu</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">pre[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="keyword">if</span>(d[pre[i]][i] &gt; d[j][i])</span><br><span class="line">pre[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">timestamp=scc_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line"><span class="keyword">if</span>(!dfn[i])</span><br><span class="line"><span class="built_in">tarjan</span>(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(scc_cnt == n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==r) <span class="keyword">continue</span>;</span><br><span class="line">ans += d[pre[i]][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==r) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(id[pre[i]] == id[i])&#123; </span><br><span class="line">ans += d[pre[i]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc_cnt;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=scc_cnt;++j)</span><br><span class="line">bd[i][j]=INF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i][j] &lt; INF &amp;&amp; id[i]!=id[j])&#123;</span><br><span class="line"><span class="keyword">int</span> a=id[i],b=id[j];</span><br><span class="line"><span class="keyword">if</span>(id[pre[j]]==id[j])</span><br><span class="line">bd[a][b]=<span class="built_in">min</span>(bd[a][b],d[i][j]-d[pre[j]][j]);</span><br><span class="line"><span class="keyword">else</span> bd[a][b]=<span class="built_in">min</span>(bd[a][b],d[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r=id[r];</span><br><span class="line">n = scc_cnt;</span><br><span class="line"><span class="built_in">memcpy</span>(d,bd,<span class="keyword">sizeof</span> d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),r=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">read</span>(),v=<span class="built_in">read</span>(),w=<span class="built_in">read</span>();</span><br><span class="line">d[u][v]=<span class="built_in">min</span>(d[u][v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// rep(i,1,n) rep(j,1,n) debug(d[i][j]);</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check_con</span>()) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">print</span>(<span class="built_in">zhuliu</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模板题</strong></p><p>在一个二维平面中求 一个最小树形图</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>, M = <span class="number">10010</span>, INF=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">pdd q[N];</span><br><span class="line"><span class="keyword">bool</span> g[N][N];</span><br><span class="line"><span class="keyword">double</span> d[N][N],bd[N][N]; <span class="comment">//d数组用来存距离，bd数组用来存储备份</span></span><br><span class="line"><span class="keyword">int</span> pre[N],bkppre[N];  <span class="comment">//pre数组用来存储备份，bkppre数组用来存储前去的备份</span></span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],timestamp,stk[N],top;</span><br><span class="line"><span class="keyword">int</span> id[N],scc_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> st[N],ins[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    st[u]=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(g[u][i]&amp;&amp;!st[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_con</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!st[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx = q[a].x-q[b].x;</span><br><span class="line">    <span class="keyword">double</span> dy = q[a].y-q[b].y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line">    stk[++top]=u,ins[u]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j=pre[u];</span><br><span class="line">    <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">        <span class="built_in">tarjan</span>(j);</span><br><span class="line">        low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        scc_cnt ++;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stk[top --];</span><br><span class="line">            ins[y]=<span class="literal">false</span>;</span><br><span class="line">            id[y]=scc_cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">zhuliu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">if</span>(g[i][j]) d[i][j] = <span class="built_in">get_dist</span>(i,j);</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//找所有点的入点的最短边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            pre[i]=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[pre[i]][i] &gt; d[j][i]) </span><br><span class="line">                    pre[i]=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//tarjan找环</span></span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span> dfn);</span><br><span class="line">        timestamp=scc_cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) </span><br><span class="line">                <span class="built_in">tarjan</span>(i);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//缩点后无环,累加答案后算法结束</span></span><br><span class="line">        <span class="keyword">if</span>(scc_cnt == n) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) ans += d[pre[i]][i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//累加所有环内的边</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">if</span>(id[pre[i]]==id[i])</span><br><span class="line">                ans += d[pre[i]][i];</span><br><span class="line">                </span><br><span class="line">        <span class="comment">//清空bd数组,准备存储缩点完更新的边权 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc_cnt;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=scc_cnt;j++)</span><br><span class="line">                bd[i][j] = INF;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历每一个点，然后根据缩点后的结果对边进行操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">                <span class="keyword">if</span>(d[i][j] &lt; INF &amp;&amp; id[i] != id[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> a=id[i],b=id[j];</span><br><span class="line">                    <span class="keyword">if</span>(id[pre[j]] == id[j]) </span><br><span class="line">                        bd[a][b]=<span class="built_in">min</span>(bd[a][b],d[i][j]-d[pre[j]][j]);</span><br><span class="line">                    <span class="keyword">else</span> bd[a][b] = <span class="built_in">min</span>(bd[a][b], d[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">        n = scc_cnt;</span><br><span class="line">        <span class="built_in">memcpy</span>(d,bd,<span class="keyword">sizeof</span> d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>,&amp;q[i].x,&amp;q[i].y);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>(a!=b&amp;&amp;b!=<span class="number">1</span>) g[a][b]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">check_con</span>()) <span class="built_in">puts</span>(<span class="string">&quot;poor snoopy&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,<span class="built_in">zhuliu</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;朱刘算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#朱刘算法&quot;&gt;&lt;/a&gt; 朱刘算法&lt;/h2&gt;
&lt;p&gt;有向图的类Prim算法，找有向图的最小生成树。&lt;/p&gt;
&lt;h3 id=&quot;最小树形图&quot;&gt;&lt;a class=&quot;markdownIt-An</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Prufer编码</title>
    <link href="https://wangyuhang-cmd.github.io/2022/01/09/Prufer%E7%BC%96%E7%A0%81/"/>
    <id>https://wangyuhang-cmd.github.io/2022/01/09/Prufer%E7%BC%96%E7%A0%81/</id>
    <published>2022-01-09T07:40:49.000Z</published>
    <updated>2022-01-09T07:42:58.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="prufer编码"><a class="markdownIt-Anchor" href="#prufer编码"></a> <code>Prufer</code>编码</h2><p><strong><code>Prufer编码转树</code></strong>  <code>O(n)</code>时间复杂度</p><p>可以把一棵无根树变成一个序列，也可以将一个序列变成一棵无根树。</p><ul><li>每次找到无根树编号最小的度数为1的点</li><li>然后将此点的父节点加入序列</li></ul><p><code>O(n)</code>时间求<code>Prufer</code>编码</p><p>对于一个有<code>n</code>个节点的树，其<code>prufer</code>编码只有<code>n-2</code>个数。</p><p><strong>树转<code>Prufer编码</code></strong></p><p>一个数在<code>prufer</code>编码中出现多少次，就说明其有几个儿子</p><p><code>Step:</code></p><blockquote><p><code>void tree2prufer()</code>的操作是顺序遍历，然后从1开始遍历，当找到出度为0的点时，将其父节点加入<code>prufer</code>序列，然后递归其父节点，如果其父节点的出度为0且父节点小于当亲遍历到的j的值，父节点的父节点也加入<code>prufer</code>序列。</p><p><code>void pruffer2tree()</code>的操作是顺序遍历<code>prufer</code>序列的同时遍历1<sub>n，如果1</sub>n遍历的时候有出度为0的点，则其父亲就是当前遍历到的<code>prufer</code>序列，然后<code>prufer</code>序列当前数的出度–，如果为0且小于当前遍历的树，则其父亲节点为下一个<code>prufer</code>序列中的树。</p></blockquote><p>一道板子，如果m=1，给出给定树的prufer编码，否则给出给定prufer编码的树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> fa[N],p[N],d[N],idx=<span class="number">0</span>; <span class="comment">//d表示出度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tree2prufer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) fa[i]=<span class="built_in">read</span>(),d[fa[i]]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;n<span class="number">-2</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(d[j]) j++;</span><br><span class="line">        p[i++]=fa[j];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n<span class="number">-2</span>&amp;&amp;--d[p[i<span class="number">-1</span>]]==<span class="number">0</span>&amp;&amp;p[i<span class="number">-1</span>]&lt;j) p[i++]=fa[p[i<span class="number">-1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prufer2tree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-2</span>) p[i]=<span class="built_in">read</span>(),d[p[i]]++;</span><br><span class="line">    p[n<span class="number">-1</span>]=n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;n;++i,j++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(d[j]) j++;</span><br><span class="line">        fa[j]=p[i];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n<span class="number">-1</span>&amp;&amp;--d[p[i]]==<span class="number">0</span>&amp;&amp;p[i]&lt;j) fa[p[i]]=p[i+<span class="number">1</span>],i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,fa[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">tree2prufer</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">prufer2tree</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用：</h4><p><strong>Cayley定理</strong></p><ul><li>对于一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个点的无向完全图，其生成树的个数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n^{n-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li></ul><p>证明：由<code>prufer</code>编码一共n-2位，每一位有n个选择，因此为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n^{n-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;prufer编码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#prufer编码&quot;&gt;&lt;/a&gt; &lt;code&gt;Prufer&lt;/code&gt;编码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Prufer编码转树&lt;/code&gt;&lt;/strong&gt; </summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2-SAT</title>
    <link href="https://wangyuhang-cmd.github.io/2021/12/31/2-SAT/"/>
    <id>https://wangyuhang-cmd.github.io/2021/12/31/2-SAT/</id>
    <published>2021-12-31T12:42:27.000Z</published>
    <updated>2021-12-31T12:43:14.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-sat"><a class="markdownIt-Anchor" href="#2-sat"></a> 2-SAT</h2><h4 id="一般sat问题-np问题"><a class="markdownIt-Anchor" href="#一般sat问题-np问题"></a> 一般SAT问题 (NP问题)</h4><blockquote><p>给定n个命题<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2...x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>给出n个形式的条件，形如$x_1 \or \neg x_2 … \or x_n $ 表示如图形式中至少有一个为真</p><p>求给出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,x_2...x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的一组取值使得所有上述条件都为真。</p></blockquote><p>做法：</p><p>首先将每个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>看作两个点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为真和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\neg x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord">¬</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为真，即拆成要么正变量成立要么取反后成立</p><p>然后根据数理逻辑的原理，有推论</p><p>$a \or b <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">等</mi><mi mathvariant="normal">价</mi><mi mathvariant="normal">于</mi></mrow><annotation encoding="application/x-tex">等价于</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">价</span><span class="mord cjk_fallback">于</span></span></span></span>\neg b \to a<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">和</mi></mrow><annotation encoding="application/x-tex">和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">和</span></span></span></span>\neg a \to b$ (a或者b成立等价于a不成立时b必然成立且b不成立时a必然成立)。因此我们从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">\neg a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault">a</span></span></span></span>向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>连边<code>add(2*a,2*b+1)</code>,从<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">\neg b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault">b</span></span></span></span>向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>连边<code>add(2*b+1,2*a)</code>，这表征<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">\neg b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault">b</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>在同一逻辑域(同时成立)。按照此形式建立出来的图中，如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">\neg a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault">a</span></span></span></span>在同一个连通分量中，说明存在矛盾。否则，其中一可行解为：先对原图进行<code>tarjan</code>缩点，之后对于变量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">¬</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">\neg a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">¬</span><span class="mord mathdefault">a</span></span></span></span>谁的拓扑序在更后面，我们就选取那一个变量对应的值。</p><blockquote><p>但是，由于我们之前使用了<code>tarjan</code>缩点，根据结论<code>tarjan</code>缩点后每个点的便后就是每个点的拓扑序的逆序，因此又对于每个点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(id[i*<span class="number">2</span>]&lt;id[i*<span class="number">2</span>+<span class="number">1</span>]) cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure></blockquote><p>板子没什么特别的，就是建图+tarjan,关键还是第一步</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++timestamp;</span><br><span class="line">    ins[u]=<span class="literal">true</span>; stk[++top]=u;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[u];~i;i=ne[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ins[j]) low[u]=<span class="built_in">min</span>(low[u],dfn[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        scc_cnt ++;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            y=stk[top --];</span><br><span class="line">            ins[y]=<span class="literal">false</span>;</span><br><span class="line">            id[y]=scc_cnt;</span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,a,y,b;</span><br><span class="line">        x=<span class="built_in">read</span>(),a=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line">        x--,y--;</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">2</span>*x+!a,<span class="number">2</span>*y+b); <span class="built_in">add</span>(<span class="number">2</span>*y+!b,<span class="number">2</span>*x+a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">0</span>,<span class="number">2</span>*n<span class="number">-1</span>) <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(id[i*<span class="number">2</span>]==id[<span class="number">2</span>*i+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// debug(i);</span></span><br><span class="line">            ok=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;POSSIBLE&quot;</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(id[<span class="number">2</span>*i]&lt;id[<span class="number">2</span>*i+<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;1 &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-sat&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2-sat&quot;&gt;&lt;/a&gt; 2-SAT&lt;/h2&gt;
&lt;h4 id=&quot;一般sat问题-np问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一般sat问题-</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图论" scheme="https://wangyuhang-cmd.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure Design of KMP</title>
    <link href="https://wangyuhang-cmd.github.io/2021/12/04/Data-Structure-Design-of-KMP/"/>
    <id>https://wangyuhang-cmd.github.io/2021/12/04/Data-Structure-Design-of-KMP/</id>
    <published>2021-12-04T02:44:10.000Z</published>
    <updated>2021-12-04T02:47:27.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h2><p>朴素字符串匹配方法：</p><p><strong><img src="/2021/12/04/Data-Structure-Design-of-KMP/1.gif" class title="This is an test image"></strong></p><h3 id="前缀函数定义"><a class="markdownIt-Anchor" href="#前缀函数定义"></a> 前缀函数定义</h3><p>给定一个长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>，其 <strong>前缀函数</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>被定义为一个长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的数组 。 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>的定义是：</p><ol><li>如果子串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mn>0...</mn><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[0...i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>有一对相等的真前缀与真后缀：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mn>0...</mn><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[0...k-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i-(k-1)...i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>,namo有 ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>就是这个相等的真前缀（或者真后缀，因为它们相等：)）的长度，也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\pi[i]=k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>；</li><li>如果不止有一对相等的，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>就是其中最长的那一对的长度；</li><li>如果没有相等的，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\pi[i]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</li></ol><p>简单来说<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>就是，子串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mn>0...</mn><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[0...i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>最长的相等的真前缀与真后缀的长度。</p><p>用数学语言描述如下：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><mi>k</mi><mo>=</mo><mn>0...</mn><mi>i</mi></mrow></msub><mo stretchy="false">{</mo><mi>k</mi><mo>:</mo><mi>s</mi><mo stretchy="false">[</mo><mn>0...</mn><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">}</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\pi[i]=max_{k=0...i}\{k:s[0...k-1]\}=s[i-(k-1)...i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">{</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></p><p>特别地，规定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>π</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\pi[0]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><p>Next数组求解：</p><p><strong><img src="/2021/12/04/Data-Structure-Design-of-KMP/2.gif" class title="This is an test image"></strong></p><p>改进后的KMP算法：</p><p><strong><img src="/2021/12/04/Data-Structure-Design-of-KMP/3.gif" class title="This is an test image"></strong></p><p>模板1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求ne数组，考察前面那个，如果后一个可以匹配就+1，否则退到ne[j]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>])j=ne[j];</span><br><span class="line">    <span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">    ne[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//KMP匹配</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="number">1</span>]) j=ne[j];  <span class="comment">//j不停回溯直到j为第一位而且第二位还不与i匹配</span></span><br><span class="line">    <span class="keyword">if</span>(s[i]==p[j+<span class="number">1</span>]) j++;  <span class="comment">//如果可以匹配，则j往前走一位</span></span><br><span class="line">    <span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">        <span class="comment">//匹配成功</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i-j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">prefix_function</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = (<span class="keyword">int</span>)s.<span class="built_in">length</span>();</span><br><span class="line">  <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">pi</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = pi[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) j = pi[j - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == s[j]) j++;</span><br><span class="line">    pi[i] = j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kmp的优化"><a class="markdownIt-Anchor" href="#kmp的优化"></a> KMP的优化</h3><p>2.1.3 KMP算法中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">next[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mclose">]</span></span></span></span>数组的优化</p><p>​    我们观察我们在匹配的过程中，假如在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>位置失配了，模式串必然会跳到其对应<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi><mo>=</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">j=next[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>处，但是 由于在构<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">next[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mclose">]</span></span></span></span>造的时候若有此时则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[j]=p[next[j]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>需要再次递归，即令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">next[j]=next[next[j]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>，因此在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">next[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mclose">]</span></span></span></span>构造的时候若有模式串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>p</mi><mo stretchy="false">[</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[j]=p[next[j]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>则令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">next[j]=next[next[j]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>即可</p><h4 id="课程设计源码"><a class="markdownIt-Anchor" href="#课程设计源码"></a> 课程设计源码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bool int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> flase 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20510</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXN];                                     <span class="comment">//待匹配全文</span></span><br><span class="line"><span class="keyword">char</span> word[N];                                       <span class="comment">//目标匹配字符串</span></span><br><span class="line"><span class="keyword">char</span> string[MAXN];                                  <span class="comment">//临时字符串</span></span><br><span class="line"><span class="keyword">int</span> len[MAXN];                                      <span class="comment">//记录每个单词的长度 </span></span><br><span class="line"><span class="keyword">int</span> n,m;                                            <span class="comment">//n为整文长度</span></span><br><span class="line"><span class="keyword">int</span> ans[MAXN],cnt=<span class="number">0</span>,length;                         <span class="comment">//答案数组，从0开始统计匹配字符串的个数和位置</span></span><br><span class="line"><span class="keyword">int</span> ne[MAXN];                                       <span class="comment">//next[]数组，存储目标单词的最长前缀串的位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>, str + <span class="number">1</span>);                       <span class="comment">//读入文章（一行）</span></span><br><span class="line">    n = <span class="built_in">strlen</span>(str + <span class="number">1</span>);                            <span class="comment">//统计文章长度</span></span><br><span class="line">    </span><br><span class="line">    m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[m] != <span class="string">&#x27; &#x27;</span>)                            <span class="comment">//获取开头的待匹配单词</span></span><br><span class="line">    &#123;</span><br><span class="line">        word[m] = str[m];</span><br><span class="line">        m ++;</span><br><span class="line">    &#125;</span><br><span class="line">    -- m;</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">strlen</span>(word + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The definition word: %s\n&quot;</span>, word + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;=============================================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThere are %d words in the article which is same with the definition word %s.\n&quot;</span>,cnt,word);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nThe positions are:\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">            <span class="keyword">if</span>(i == cnt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;=============================================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NAIVE_STRING_MACHINE</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; ++ i)                <span class="comment">//对字符串进行朴素匹配</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, k = i; k &lt;= n &amp;&amp; j &lt;= m ; ++ j, ++ k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[k] != word[j]) </span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[++ cnt] = i - m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>&#123;                                        <span class="comment">//next[]数组正常求解法</span></span><br><span class="line">    <span class="built_in">memset</span>(ne, <span class="number">0</span>, <span class="keyword">sizeof</span> ne);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i, j;                                   </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>, j = <span class="number">0</span>;i &lt;= m; i ++)                  <span class="comment">//预处理p的最长前缀串-&gt; next[]数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; word[i] != word[j+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(word[i] == word[j+<span class="number">1</span>]) </span><br><span class="line">        &#123;</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next_fast</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ne, <span class="number">0</span>, <span class="keyword">sizeof</span> ne);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i, j, k;                                   </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>, j = <span class="number">0</span> ; i &lt;= m ; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(word[i] == word[j])</span><br><span class="line">&#123;</span><br><span class="line">            ne[i] = ne[j];</span><br><span class="line">        &#125;    </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            ne[i] = j;</span><br><span class="line">        &#125;    </span><br><span class="line"><span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; word[i] != word[j])</span><br><span class="line">&#123;</span><br><span class="line">j = ne[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(word[i] == word[j])</span><br><span class="line">&#123;</span><br><span class="line">j ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">()</span>                                          <span class="comment">//KMP字符串匹配</span></span></span><br><span class="line"><span class="function"></span>&#123;       </span><br><span class="line">    <span class="keyword">int</span> i , j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = m + <span class="number">1</span>, j = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; str[i] != word[j+<span class="number">1</span>])             <span class="comment">//求ne数组，考察前面那个，如果后一个可以匹配就+1，否则退到ne[j]</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = ne[j];                              <span class="comment">//j不停回溯直到j为第一位而且第二位还不与i匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(str[i] == word[j+<span class="number">1</span>]) j++;                <span class="comment">//如果可以匹配，则j往前走一位</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j == m)</span><br><span class="line">        &#123;</span><br><span class="line">                                                    <span class="comment">//匹配成功</span></span><br><span class="line">            ans[++ cnt] =  i - j + <span class="number">1</span> - m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work1</span><span class="params">()</span>                                        <span class="comment">//对全文进行朴素匹配</span></span></span><br><span class="line"><span class="function"></span>&#123;         </span><br><span class="line">    <span class="built_in">init</span>();                                         <span class="comment">//初始化                    </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Below is the NAIVE_STRING_MATCHING Algorithm...\n\n&quot;</span>);      </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NAIVE_STRING_MACHINE</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;                            </span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Below is the KNUTH_MORRIS_PRATT Algorithm...\n\n&quot;</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">next</span>();   </span><br><span class="line">    <span class="built_in">KMP</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>();    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Below is the KNUTH_MORRIS_PRATT Algorithm with faster next[] caculating...\n\n&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="built_in">next_fast</span>();</span><br><span class="line">    <span class="built_in">KMP</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//==================================</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;in.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);    </span><br><span class="line"><span class="comment">//#endif </span></span><br><span class="line"><span class="comment">//==================================</span></span><br><span class="line">    <span class="comment">//读入全文和待匹配单词</span></span><br><span class="line">    <span class="built_in">read</span>();                             </span><br><span class="line">    <span class="comment">//基于朴素字符串匹配的算法</span></span><br><span class="line">    <span class="built_in">work1</span>();</span><br><span class="line">    <span class="comment">//KMP字符串匹配算法</span></span><br><span class="line">    <span class="built_in">work2</span>();</span><br><span class="line">    <span class="comment">//扩展KMP字符串匹配算法</span></span><br><span class="line">    <span class="built_in">work3</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kmp&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kmp&quot;&gt;&lt;/a&gt; KMP&lt;/h2&gt;
&lt;p&gt;朴素字符串匹配方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/2021/12/04/Data-Structure-Design</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="KMP" scheme="https://wangyuhang-cmd.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>网络流_2 EK算法与Dinic算法</title>
    <link href="https://wangyuhang-cmd.github.io/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-2-EK%E7%AE%97%E6%B3%95%E4%B8%8EDinic%E7%AE%97%E6%B3%95/"/>
    <id>https://wangyuhang-cmd.github.io/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-2-EK%E7%AE%97%E6%B3%95%E4%B8%8EDinic%E7%AE%97%E6%B3%95/</id>
    <published>2021-11-10T14:24:58.000Z</published>
    <updated>2021-11-10T14:24:58.733Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>网络流_1 网络流基本概念</title>
    <link href="https://wangyuhang-cmd.github.io/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-1-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://wangyuhang-cmd.github.io/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-1-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2021-11-10T14:14:58.000Z</published>
    <updated>2021-11-10T14:20:05.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络流__1-网络流基础"><a class="markdownIt-Anchor" href="#网络流__1-网络流基础"></a> 网络流__1 网络流基础</h2><h3 id="流网络"><a class="markdownIt-Anchor" href="#流网络"></a> 流网络</h3><p><strong><img src="/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-1-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/1.png" class title="This is an test image"></strong></p><p>如图为一个流网络,边权为最大流量c，记作</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span></span></p><p>其中V为点集，E为边集。</p><p>可以想象成从源点源源不断的将水流向汇点的过程</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">从</mi><mi mathvariant="normal">点</mi><mi>u</mi><mi mathvariant="normal">到</mi><mi mathvariant="normal">点</mi><mi>v</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">容</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">记</mi><mi mathvariant="normal">作</mi><mi>C</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">从点u到点v的容量记作C(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">从</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault">u</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">容</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">记</span><span class="mord cjk_fallback">作</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p><p>其中，不考虑反向边，假如有反向边，可以通过加点来转化成没有反向边的情况</p><p><strong>流量    定义：从源点往外净流出的量</strong></p><h3 id="可行流"><a class="markdownIt-Anchor" href="#可行流"></a> 可行流</h3><p>即每一条边设计一个流量，记作</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">设</mi><mi mathvariant="normal">计</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">对</mi><mi mathvariant="normal">应</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">方</mi><mi mathvariant="normal">案</mi><mi>f</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1.</mn><mi mathvariant="normal">容</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">限</mi><mi mathvariant="normal">制</mi><mspace width="2em"><mn>0</mn><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2.</mn><mi mathvariant="normal">流</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">守</mi><mi mathvariant="normal">恒</mi><mo>:</mo><mi mathvariant="normal">∀</mi><mi>x</mi><mo>∈</mo><mi>V</mi><mo stretchy="false">{</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">}</mo><mspace width="2em"><mspace width="2em"></mspace></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mspace width="1em"><msub><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mrow></msub><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mrow></msub><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">设计的流量对应的方案f \begin{cases} 1.容量限制 \qquad 0 \le f(u,v) \le c(u,v)\\\\\\2.流量守恒 :\forall x \in V\{s,t\}\qquad\qquad \\ \quad \sum_{(u,x) \in E} f(u,x)= \sum_{(x,u) \in E}f(x,u)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.242710000000001em;vertical-align:-3.3713550000000003em;"></span><span class="mord cjk_fallback">设</span><span class="mord cjk_fallback">计</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">流</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">应</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">方</span><span class="mord cjk_fallback">案</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500199999999998em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9999899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.29999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.89999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.90001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.200010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.100019999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8713550000000003em;"><span style="top:-5.871355000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mord">.</span><span class="mord cjk_fallback">容</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">制</span><span class="mspace" style="margin-right:2em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span><span style="top:-4.431355000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-2.9913550000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.551355em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord">.</span><span class="mord cjk_fallback">流</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">守</span><span class="mord cjk_fallback">恒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">∀</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mopen">{</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">}</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span></span></span><span style="top:-0.1113549999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">u</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3713550000000003em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>流量守恒即对于某个点流入的流量等于流出的流量</p><p>如图便是一个可行流,满足对于任意一点都有流出=流入：</p><p><strong><img src="/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-1-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/2.png" class title="This is an test image"></strong></p><p>对于一个可行流，每秒从源点流向汇点的流量的值/速率记作：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">每</mi><mi mathvariant="normal">秒</mi><mi mathvariant="normal">从</mi><mi mathvariant="normal">源</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">出</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">每</mi><mi mathvariant="normal">秒</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">入</mi><mi mathvariant="normal">汇</mi><mi mathvariant="normal">点</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">量</mi></mrow><annotation encoding="application/x-tex">|f|=每秒从源点流出的流/每秒流入汇点的流量</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">秒</span><span class="mord cjk_fallback">从</span><span class="mord cjk_fallback">源</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">流</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">流</span><span class="mord">/</span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">秒</span><span class="mord cjk_fallback">流</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">汇</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">流</span><span class="mord cjk_fallback">量</span></span></span></span></span></p><p>即往外流的流量流回去的流量：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>=</mo><munder><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><munder><mo>∑</mo><mrow><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>s</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">|f|=\sum_{(s,v) \in E} f(s,v)- \sum_{(v,s) \in E}f(v,s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.5660100000000003em;vertical-align:-1.516005em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.5660100000000003em;vertical-align:-1.516005em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.808995em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">s</span><span class="mclose mtight">)</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516005em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span></span></p><h3 id="最大流"><a class="markdownIt-Anchor" href="#最大流"></a> 最大流：</h3><p>即所有可行流中流量值最大的可行流</p><h3 id="残留网络"><a class="markdownIt-Anchor" href="#残留网络"></a> 残留网络</h3><p><strong><img src="/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-1-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/3.png" class title="This is an test image"></strong></p><p>对于流网络的某一条可行流来说，残留网络与其一一对应，记作;</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">G_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>假定流网络<code>G=(V,E)</code>,<code>f</code>为图G中的一个流，定义其残存网络的<strong>残存容量</strong>：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo><mspace width="1em"><mspace width="2em"><mspace width="2em"><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mspace></mspace></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">c_f(u,v)= \begin{cases} c(u,v)-f(u,v) \quad (u,v) \in E \\\\f(v,u) \quad\qquad \qquad (v,u) \in E \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>简单来说，对于原流网络的一个流来说，其残留网络的残存容量有两种形式，一种是同向的，流网络容量-当前流量；另一种是反向的，数值等于当前流的大小</p><p><strong>定义</strong>如下表示残留网络中一个合法流<code>f'</code>对于原网络中的流<code>f</code>的递增</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>f</mi><mo>↑</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi></mspace></mrow><annotation encoding="application/x-tex">(f \uparrow f&#x27; )(u,v)=f(u,v)+f&#x27;(u,v)-f&#x27;(v,u) \quad (u,v) \in E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span></span></p><p>较为直观：<code>f'(v,u)=f(u,v)</code></p><h5 id="引理1"><a class="markdownIt-Anchor" href="#引理1"></a> 引理1</h5><p>设G=(V,E)为一个流网络，源点为<code>s</code>，汇点为<code>t</code>，设<code>f</code>为<code>G</code>中的一个流。设<code>Gf</code>是由流<code>f</code>所有道德<code>G</code>的残留网络，设f’为Gf中的一个流，那么有：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>f</mi><mo>↑</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mo separator="true">,</mo><mi mathvariant="normal">且</mi><mi>f</mi><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">也</mi><mi mathvariant="normal">为</mi><mi>G</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">流</mi></mrow><annotation encoding="application/x-tex">|f \uparrow f&#x27;|=|f+f&#x27;|=|f|+|f&#x27;|,且f+f&#x27;也为G中的一个可行流</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">↑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">且</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">流</span></span></span></span></span></p><p>证明：</p><p><code>f+f'</code>也为G的一个可行流,即从容量限制和流量守恒来证明</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">对</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">同</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">的</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">对于同向的f&#x27;,f(u,v)+f&#x27;(u,v)\le f(u,v)+c(u,v)-f(u,v)=c(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">的</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">对</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">反</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">的</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mn>0</mn><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>c</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">对于反向的f&#x27;,0=f(u,v)-c_f(u,v) \le f(u,v)-f&#x27;(u,v)\le f(u,v) \le c(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">的</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p><p><strong>推论：</strong></p><ul><li>可行流的残留网络内求得的任何一个值大于0的可行流都可以增加原网络的可行流</li><li>若原网络对应的残留网络的可行流的流量大于0，则原网络必定不是最大流，反之可证明是最大流</li></ul><h3 id="增广路径"><a class="markdownIt-Anchor" href="#增广路径"></a> 增广路径</h3><p>对于给定流网络<code>G=(V,E)</code>和流<code>f</code>，增广路径<code>p</code>是其残存网络Gf中一条从源结点<code>s</code>到汇点t的简单路径，<strong>其中每一条边的容量都大于0</strong>.</p><p><strong><img src="/2021/11/10/%E7%BD%91%E7%BB%9C%E6%B5%81-1-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/4.png" class title="This is an test image"></strong></p><p>对于对于<code>G(V,E)</code>的某一可行流 f 的残留网络上的某一可行流对应一条增广路径 f’，有<code>f+f'</code>仍然是G中的一个可行流，因此得到定理：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">对</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">前</mi><mi mathvariant="normal">可</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">流</mi><mi>f</mi><mo separator="true">,</mo><mi mathvariant="normal">在</mi><msub><mi>G</mi><mi>f</mi></msub><mi mathvariant="normal">中</mi><mi mathvariant="normal">无</mi><mi mathvariant="normal">增</mi><mi mathvariant="normal">广</mi><mi mathvariant="normal">路</mi><mi mathvariant="normal">径</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">则</mi><mi>f</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">流</mi></mrow><annotation encoding="application/x-tex">对于当前可行流f,在G_f中无增广路径，则f为最大流</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">流</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">在</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">无</span><span class="mord cjk_fallback">增</span><span class="mord cjk_fallback">广</span><span class="mord cjk_fallback">路</span><span class="mord cjk_fallback">径</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">流</span></span></span></span></span></p><h5 id="增广路径的残存容量"><a class="markdownIt-Anchor" href="#增广路径的残存容量"></a> 增广路径的残存容量：</h5><p>我们称增广路径p上能够为每条边增加的流量的最小值为残存容量，即：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><msub><mi>c</mi><mi>f</mi></msub><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mi mathvariant="normal">属</mi><mi mathvariant="normal">于</mi><mi mathvariant="normal">路</mi><mi mathvariant="normal">径</mi><mi>p</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">c_f(p) = min\{c_f(u,v):(u,v)属于路径p \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord cjk_fallback">属</span><span class="mord cjk_fallback">于</span><span class="mord cjk_fallback">路</span><span class="mord cjk_fallback">径</span><span class="mord mathdefault">p</span><span class="mclose">}</span></span></span></span></span></p><p><em>此处定义的残存容量与残留网络中的残存容量稍微不同，即最小值</em></p><h3 id="割"><a class="markdownIt-Anchor" href="#割"></a> 割</h3><p>对于一个流网络<code>G=(V,E)</code>,可将其点集<code>V</code>分成两个不重不漏的集合<code>S</code>，<code>T</code>，有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>∪</mo><mi>T</mi><mo>=</mo><mi>V</mi><mspace linebreak="newline"></mspace><mi>S</mi><mo>∩</mo><mi>T</mi><mo>=</mo><mi mathvariant="normal">∅</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">S \cup T =V\\S \cap T= \varnothing\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66334em;vertical-align:-0.08167em;"></span><span class="mord amsrm">∅</span></span><span class="mspace newline"></span></span></span></span></p><p>其中有以下限制：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">源</mi><mi mathvariant="normal">点</mi><mi>s</mi><mo>∈</mo><mi>S</mi><mo separator="true">,</mo><mi mathvariant="normal">汇</mi><mi mathvariant="normal">点</mi><mi>t</mi><mo>∈</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">源点s\in S,汇点t \in T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">源</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">汇</span><span class="mord cjk_fallback">点</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></span></p><h5 id="割的容量-cst"><a class="markdownIt-Anchor" href="#割的容量-cst"></a> 割的容量 c(S,T)</h5><p>所有从S指向T的有向的容量之和</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></munder><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(S,T)=\sum_{u \in S} \sum_{v \in T}c(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p><h5 id="割的流量"><a class="markdownIt-Anchor" href="#割的流量"></a> 割的流量</h5><p>所有从S到T的的流量与从T到S的流量之差：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>T</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>S</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(S,T)=\sum_{u \in S} \sum_{v \in T}f(u,v)-\sum_{u \in T} \sum_{v \in S}f(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span></span></p><p><strong>性质1:</strong></p><p>设f为流网络G的一个流，该流网络的源节点为s,汇点为t,设(S,T)为流网络G的任意切割，则横跨切割<code>(S,T)</code>的<strong>净流量</strong>：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">f(S,T)=|f|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span></span></span></span></span></p><p>即<strong>对于每一个割的流量，都能对应一个流网络中的流量</strong></p><p>证明：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">引</mi><mi mathvariant="normal">理</mi><mn>1.</mn><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>Y</mi><mo separator="true">,</mo><mi>X</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">引</mi><mi mathvariant="normal">理</mi><mn>2.</mn><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mi mathvariant="normal">引</mi><mi mathvariant="normal">理</mi><mn>3.</mn><mi>f</mi><mo stretchy="false">(</mo><mi>Z</mi><mo separator="true">,</mo><mi>X</mi><mo>∪</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>Z</mi><mo separator="true">,</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>Z</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi mathvariant="normal">引</mi><mi mathvariant="normal">理</mi><mn>4.</mn><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo>∪</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>Y</mi><mo separator="true">,</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">引理1.f(X,Y)=-f(Y,X)\\引理2.f(X,X)=0\\引理3.f(Z,X \cup Y)=f(Z,X)+f(Z,Y)\\引理4.f(X\cup Y,Z)=f(X,Z)+f(Y,Z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">理</span><span class="mord">1</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">理</span><span class="mord">2</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">理</span><span class="mord">3</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">引</span><span class="mord cjk_fallback">理</span><span class="mord">4</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span></span></span></p><p>由引理1</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">s(S,V)=f(S,S)+f(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p><p>等价于：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">{</mo><mi>s</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo>−</mo><mo stretchy="false">{</mo><mi>s</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(S,T)=f(S,V)-f(S,S)=f(S,V)\\=f(\{s\},V)+f(S-\{s\},V)=f(s,V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">{</span><span class="mord mathdefault">s</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathdefault">s</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span></span></p><p><strong>性质2：</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi><mo stretchy="false">[</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">]</mo><mtext> </mtext><mi mathvariant="normal">∀</mi><mi>f</mi><mtext> </mtext><mi mathvariant="normal">有</mi><mspace width="1em"><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">\forall [S,T]\ \forall f  \ 有\quad f(S,T) \le c(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∀</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">]</span><span class="mspace"> </span><span class="mord">∀</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace"> </span><span class="mord cjk_fallback">有</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p><p>换句话来说，对于流网络任意流，都小于任意割的容积，因此就有<strong>最大流小于等于最小割</strong>。其中注意，最大流指流网络的最大流量，最小割指的是最小割的容量</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>≤</mo><mi mathvariant="normal">最</mi><mi mathvariant="normal">小</mi><mi mathvariant="normal">割</mi><mi>c</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">最大流|f|\le最小割c(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">流</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">割</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p><h3 id="最大流最小割定理"><a class="markdownIt-Anchor" href="#最大流最小割定理"></a> 最大流最小割定理</h3><p>以下三个定理相互等价</p><ul><li><code>f</code>是<code>G</code>中的一个最大流</li><li>残留网络<code>Gf</code>不包括任何增广路径</li><li><code>|f|=c(S,T)</code>,其中<code>(S,T)</code>是流网络G的某个切割</li></ul><p>证明：</p><p>证明思路为证明1能推出2，2能推出3，3能推出1</p><p>1=&gt;2：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">若</mi><msub><mi>G</mi><mi>f</mi></msub><mi mathvariant="normal">有</mi><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mn>0</mn><mi mathvariant="normal">，</mi><mi mathvariant="normal">则</mi><mi mathvariant="normal">∣</mi><mi>f</mi><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">矛</mi><mi mathvariant="normal">盾</mi></mrow><annotation encoding="application/x-tex">若G_f有|f&#x27;| \gt 0，则|f+f&#x27;|=|f|+|f&#x27;| \gt |f|矛盾</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088em;vertical-align:-0.286108em;"></span><span class="mord cjk_fallback">若</span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">有</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mord cjk_fallback">矛</span><span class="mord cjk_fallback">盾</span></span></span></span></span></p><p>2=&gt;3</p><p>使用构造法：构造一个点集S，将起点s放入S，从Gf中从s出发沿容量大于0的边走，将所有能走到的点加入S，由于不包含增广路径，所以必然有t不属于S</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">则</mi><mi>T</mi><mo>=</mo><mi>V</mi><mo>−</mo><mi>S</mi><mi mathvariant="normal">有</mi><mi>t</mi><mo>∈</mo><mi>T</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">构</mi><mi mathvariant="normal">造</mi><mi mathvariant="normal">出</mi><mi mathvariant="normal">了</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">合</mi><mi mathvariant="normal">法</mi><mi mathvariant="normal">割</mi></mrow><annotation encoding="application/x-tex">则T=V-S有t\in T，构造出了一组合法割</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord cjk_fallback">有</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">割</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">对</mi><mi mathvariant="normal">于</mi><mi>x</mi><mo>∈</mo><mi>S</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>T</mi><mi mathvariant="normal">有</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">又</mi><mi>a</mi><mo>∈</mo><mi>S</mi><mo separator="true">,</mo><mi>b</mi><mo>∈</mo><mi>T</mi><mi mathvariant="normal">有</mi><mi>f</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">对于x\in S,y\in T有f(x,y)=c(x,y),又a\in S,b\in T有f(a,b)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">有</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">又</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord cjk_fallback">有</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>因为加入f(x,y)&lt;c(x,y)则x可以走到y，因此y应该在S中矛盾。a,b同理</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">因</mi><mi mathvariant="normal">此</mi><mi mathvariant="normal">有</mi><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></munder><mi>f</mi><mo stretchy="false">(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>=</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></munder><mi>c</mi><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">因此有|f|=f(S,T)=\sum_{u \in S} \sum_{v \in T}f(u,v)-\sum_{u \in S} \sum_{v \in T}f(v,u)\\=\sum_{u \in S} \sum_{v \in T}c(u,v)=c(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">有</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p><p>3=&gt;1</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">最</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">流</mi><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo>∗</mo></msup><mi mathvariant="normal">∣</mi><mo>≥</mo><mi mathvariant="normal">∣</mi><mi>f</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>≥</mo><mi mathvariant="normal">最</mi><mi mathvariant="normal">小</mi><mi mathvariant="normal">割</mi><msub><mi>c</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo stretchy="false">)</mo><mo>≥</mo><mi mathvariant="normal">∣</mi><msup><mi>f</mi><mo>∗</mo></msup><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">最大流|f^*|\ge |f|=c(S,T)\ge 最小割c_{min}(S,T) \ge|f^*|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">流</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.738696em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">割</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.738696em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络流__1-网络流基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网络流__1-网络流基础&quot;&gt;&lt;/a&gt; 网络流__1 网络流基础&lt;/h2&gt;
&lt;h3 id=&quot;流网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="网络流" scheme="https://wangyuhang-cmd.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>矩阵快速幂</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/19/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/19/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</id>
    <published>2021-08-19T14:30:16.000Z</published>
    <updated>2022-01-15T16:56:47.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="矩阵快速幂"><a class="markdownIt-Anchor" href="#矩阵快速幂"></a> 矩阵快速幂</h1><p>预备知识（矩阵乘法）：<a href="http://www.51nod.com/Challenge/Problem.html#problemId=1137">http://www.51nod.com/Challenge/Problem.html#problemId=1137</a></p><h5 id="引子"><a class="markdownIt-Anchor" href="#引子"></a> 引子：</h5><ul><li>求<code>斐波那契数列</code>的第<code>n</code>项</li></ul><p>思路：借助于矩阵运算和快速幂：</p><p>设fn表示斐波那契数列的第n项，我们定义运算矩阵第n项Fn：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">F_n=\left [\begin{array}{c:c}\begin{matrix}f_n &amp; f_{n+1}\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2100000000000002em;vertical-align:-0.35500000000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550000000000002em;"><span style="top:-3.005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:1.2100000000000002em;vertical-align:-0.3550000000000001em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><p>和第n+1项：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">F_{n+1}=\left [\begin{array}{c:c}\begin{matrix}f_{n+1} &amp; f_{n+2}\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2100000000000002em;vertical-align:-0.35500000000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550000000000002em;"><span style="top:-3.005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:1.2100000000000002em;vertical-align:-0.3550000000000001em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><p>于是乎，我们可以借助矩阵乘法来寻找二者的关系，于是找到斐波那契的基底矩阵A：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A = \left [\begin{array}{c:c}\begin{matrix}0 &amp; 1 \\1 &amp; 1 \\\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4500000000000002em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:2.4000000000000004em;vertical-align:-0.9500000000000002em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>满足以下变换：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msub><mi>F</mi><mi>n</mi></msub><mo>⋅</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">F_{n+1}=\left [\begin{array}{c:c}\begin{matrix}f_{n+1} &amp; f_{n+2}\end{matrix}\end{array}\right ]=\left [\begin{array}{c:c}\begin{matrix}f_n &amp; f_{n+1}\end{matrix}\end{array}\right ]\cdot\left [\begin{array}{c:c}\begin{matrix}0 &amp; 1 \\1 &amp; 1 \\\end{matrix}\end{array}\right ]=F_n \cdot A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2100000000000002em;vertical-align:-0.35500000000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550000000000002em;"><span style="top:-3.005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:1.2100000000000002em;vertical-align:-0.3550000000000001em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2100000000000002em;vertical-align:-0.35500000000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550000000000002em;"><span style="top:-3.005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:1.2100000000000002em;vertical-align:-0.3550000000000001em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4500000000000002em;"><span style="top:-3.45em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:2.4000000000000004em;vertical-align:-0.9500000000000002em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></span></p><p>因此可以递推得到得到：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>=</mo><msub><mi>F</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">F_{n}=F_1 \cdot A^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p><h5 id="问题二求斐波那契数列的前n项和我们只需要将原矩阵改一改即可"><a class="markdownIt-Anchor" href="#问题二求斐波那契数列的前n项和我们只需要将原矩阵改一改即可"></a> <strong>问题二：求斐波那契数列的前n项和？我们只需要将原矩阵改一改即可</strong></h5><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mi>n</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>f</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">F_n=\left [\begin{array}{c:c}\begin{matrix}f_n &amp; f_{n+1} &amp; S_n\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2100000000000002em;vertical-align:-0.35500000000000004em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8550000000000002em;"><span style="top:-3.005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:1.2100000000000002em;vertical-align:-0.3550000000000001em;"></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span></p><p>A矩阵;</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center" columnlines="dashed" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A = \left [\begin{array}{c:c}\begin{matrix}0 &amp; 1 &amp; 0 \\1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; 1 \\\end{matrix}\end{array}\right ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0500000000000003em;"><span style="top:-4.050000000000001em;"><span class="pstrut" style="height:4.05em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="vertical-separator vs-dashed" style="height:3.6000000000000005em;vertical-align:-1.5500000000000003em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>有递推公式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>=</mo><msub><mi>F</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">F_{n}=F_1 \cdot A^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+(ch^<span class="number">48</span>);ch=<span class="built_in">getchar</span>();&#125;x*=f;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span>;&#125;      </span><br><span class="line"><span class="comment">//================================= </span></span><br><span class="line">LL n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL a[N][N] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line">LL start[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(LL res[],LL start[],LL a[][N])</span></span>&#123;</span><br><span class="line">    LL temp[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">            temp[i]=(temp[i]+start[j]*a[j][i])%m;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(res,temp,<span class="keyword">sizeof</span> temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multy</span><span class="params">(LL a[][N],LL b[][N],LL c[][N])</span></span>&#123;</span><br><span class="line">    LL temp[N][N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)&#123;</span><br><span class="line">                temp[i][j]=(temp[i][j]+(LL)b[i][k]*c[k][j])%m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a,temp,<span class="keyword">sizeof</span> temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=================================</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(--n;n;n&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="built_in">mul</span>(start,start,a);</span><br><span class="line">    <span class="built_in">multy</span>(a,a,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">write</span>(start[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>牛刀小试：</p><p><a href="http://newoj.acmclub.cn/problems/2088">http://newoj.acmclub.cn/problems/2088</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;矩阵快速幂&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#矩阵快速幂&quot;&gt;&lt;/a&gt; 矩阵快速幂&lt;/h1&gt;
&lt;p&gt;预备知识（矩阵乘法）：&lt;a href=&quot;http://www.51nod.com/Challenge/Problem.html</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="矩阵快速幂" scheme="https://wangyuhang-cmd.github.io/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/17/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/17/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
    <published>2021-08-17T13:26:26.000Z</published>
    <updated>2021-11-10T14:27:09.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ac自动机"><a class="markdownIt-Anchor" href="#ac自动机"></a> AC自动机</h1><p>后面一定补！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ac自动机&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ac自动机&quot;&gt;&lt;/a&gt; AC自动机&lt;/h1&gt;
&lt;p&gt;后面一定补！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AC自动机" scheme="https://wangyuhang-cmd.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>感悟_1_</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/17/%E6%84%9F%E6%82%9F/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/17/%E6%84%9F%E6%82%9F/</id>
    <published>2021-08-17T11:17:37.000Z</published>
    <updated>2021-08-17T11:18:20.256Z</updated>
    
    <content type="html"><![CDATA[<p>欲动天下者，当动天下之心，而不徒在显见之迹。动其心者，当具有大本大源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欲动天下者，当动天下之心，而不徒在显见之迹。动其心者，当具有大本大源。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="随笔感悟" scheme="https://wangyuhang-cmd.github.io/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="感悟" scheme="https://wangyuhang-cmd.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>平衡树</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/</id>
    <published>2021-08-16T06:54:06.000Z</published>
    <updated>2021-11-10T14:26:13.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="平衡树"><a class="markdownIt-Anchor" href="#平衡树"></a> 平衡树</h1><p>欢迎来到二叉搜索树的世界，在这里，你将会见到：treap,红黑树，splay，sbt，AVL…</p><p>对于对二叉搜索树的操作，我们可以将其分成了：</p><ul><li>有旋转（AVL,Splay,红黑树）</li><li>无旋转（替罪羊树，fhq Treap…）</li></ul><p>下面进入本次的正题：平衡树Treap:</p><h2 id="treap"><a class="markdownIt-Anchor" href="#treap"></a> Treap</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>r</mi><mi>e</mi><mi>a</mi><mi>p</mi><mo>=</mo><mi>T</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo>+</mo><mi>H</mi><mi>e</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Treap=Tree+Heap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span></span></span></span></span></p><h4 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识：</h4><h5 id="1bstbinary-search-tree二叉搜索树"><a class="markdownIt-Anchor" href="#1bstbinary-search-tree二叉搜索树"></a> 1.BST(Binary Search Tree)二叉搜索树</h5><p><strong>BST：</strong> <em>当前节点的左子树中的任何一个点的权值都是严格小于当前结点的权值，右子树反之</em></p><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/1.png" class title="This is an test image"></strong></p><p>BST的中序遍历一定是一个有序序列</p><p><em><strong>BST的本质：动态维护一个有序序列</strong></em></p><h5 id="2heap-堆treap使用的是大根堆的性质"><a class="markdownIt-Anchor" href="#2heap-堆treap使用的是大根堆的性质"></a> 2.Heap 堆（Treap使用的是大根堆的性质）</h5><p>Heap，大根堆，即一颗所有根节点的权值大于所有其儿子节点的权值的数据结构.如图便是一个大根堆：</p><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/2.png" class title="This is an test image"></strong></p><h2 id="平衡树-2"><a class="markdownIt-Anchor" href="#平衡树-2"></a> 平衡树：</h2><p>平衡树是一颗基于BST和Heap的数据结构</p><h3 id="treap解决的问题"><a class="markdownIt-Anchor" href="#treap解决的问题"></a> Treap解决的问题：</h3><p><strong>一颗随机的BST期望高度是logn，这样在进行插入和查询的时候的时间复杂度便是O(logn)级别。但是，如果随意的插入，二叉搜索树有可能退化成链表，其各种操作时间复杂度也就会退化成O(n)：</strong>：</p><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/3.png" class title="This is an test image"></strong></p><p>但是我们期望中的BST应该是：</p><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/4.png" class title="This is an test image"></strong></p><p>因此，就诞生出了平衡树：对于每个点，我们不仅在权值上维护BST的性质，我们还维护一个val值，这个值是由随机生成的(越随机越好)，然后我们通过一些奇奇怪怪的操作来一直维护这一棵二叉搜索树维持第二张图的性质，即之后会提到的左旋和右旋。</p><h5 id="平衡树的用途在只考虑前四种用途的情况下我们可以借助stl中的set容器来代替平衡树实际上set就是一颗红黑树"><a class="markdownIt-Anchor" href="#平衡树的用途在只考虑前四种用途的情况下我们可以借助stl中的set容器来代替平衡树实际上set就是一颗红黑树"></a> 平衡树的用途：在只考虑前四种用途的情况下，我们可以借助STL中的set容器来代替平衡树（实际上set就是一颗红黑树）</h5><p>1.插入：递归找到位置并插入 ___STL set insert()</p><p>2.删除：将删除的位置变成叶子节点之后删除 __STL erase</p><p>3.找前驱/后继：中序遍历中的前一个位置和后一个位置____STL_ set ++</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//找前驱伪代码</span><br><span class="line"><span class="keyword">if</span>(p-&gt;left):</span><br><span class="line">    p=p-&gt;left</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;right) p=p-&gt;right</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;father&gt;p) p=p-&gt;father</span><br><span class="line">    <span class="keyword">return</span> p;</span><br></pre></td></tr></table></figure><p>4.找最大值和最小值：<strong>STL_set</strong>___/begin()___/end()-1</p><p>5.求某一个值得排名</p><p>6.求排名是k的数是哪个</p><p>7.比某个数小的最大值</p><p>8.比某个数大的最小值</p><h3 id="下面我们边看代码边来解析treap的实现原理"><a class="markdownIt-Anchor" href="#下面我们边看代码边来解析treap的实现原理"></a> 下面我们边看代码，边来解析Treap的实现原理</h3><p>附加例题：<a href="https://www.luogu.com.cn/problem/P3369">https://www.luogu.com.cn/problem/P3369</a></p><h5 id="treap的存储"><a class="markdownIt-Anchor" href="#treap的存储"></a> Treap的存储</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Node&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> key,val; <span class="comment">//key是二叉搜索树内用来排序的关键字，val是大根堆内的值，即排序优先级</span></span><br><span class="line">    <span class="keyword">int</span> cnt,size; <span class="comment">//cnt存储的是当前权值的数的个数，size是以当前节点为根节点的树中数的个数</span></span><br><span class="line">&#125; tr[N];</span><br><span class="line"><span class="keyword">int</span> root,idx;  <span class="comment">//root存储Treap的根节点，idx是内存分配的编号；</span></span><br></pre></td></tr></table></figure><h5 id="treap的维护值的更新"><a class="markdownIt-Anchor" href="#treap的维护值的更新"></a> Treap的维护值的更新</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span>&#123; <span class="comment">//很类似与线段树，这个操作就是对于额外维护的信息，用子节点来更新父节点</span></span><br><span class="line">    tr[p].size=tr[tr[p].l].size+tr[tr[p].r].size+tr[p].cnt; <span class="comment">//我们额外维护的信息是树的大小，对于p节点的树的大小，等于左儿子为根的子树的大小+右儿子为根的子树的大小+p节点处的相同数值的数的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="treap的创建节点"><a class="markdownIt-Anchor" href="#treap的创建节点"></a> Treap的创建节点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_node</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;  <span class="comment">//创建一个权值为key的节点</span></span><br><span class="line">    <span class="keyword">int</span> u=++idx; <span class="comment">//申请到一个内存的编号,便是我们要创建的这一个节点</span></span><br><span class="line">    tr[u].key=key;</span><br><span class="line"> tr[u].val=<span class="built_in">rand</span>(); <span class="comment">//此处val越随机越好，因为这样可以保证不退化</span></span><br><span class="line">    tr[u].cnt=tr[u].size=<span class="number">1</span>; <span class="comment">//此时当前节点的大小和节点形成子树的大小都是1</span></span><br><span class="line">    <span class="keyword">return</span> u; <span class="comment">//最后再返回对应的内存池分配编号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="treap的左旋与右旋"><a class="markdownIt-Anchor" href="#treap的左旋与右旋"></a> Treap的左旋与右旋😇</h6><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/5.png" class title="This is an test image"></strong></p><p>这张图将会贯穿始终.</p><p>右旋操作即将根节点x的左儿子y旋转到根节点，然后y的右儿子“掉”到原来根节点x的左儿子上。我们可以在一系列操作在之后，加入y的val值大于x的val值了，那么为了维护val值满足大根堆的性质，我们可以对整棵树进行右旋操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span>&#123;  <span class="comment">//对p节点进行右旋操作</span></span><br><span class="line">    <span class="keyword">int</span> q=tr[p].l;  <span class="comment">//找到左儿子，即左边这幅图中我们通过x找到y</span></span><br><span class="line">    tr[p].l=tr[q].r; <span class="comment">//将x的左儿子变成z，如图右边右旋之后z滑落到x的左边</span></span><br><span class="line">    tr[q].r=p;  <span class="comment">//右旋之后根节点y的右儿子是x</span></span><br><span class="line">    p=q;  <span class="comment">//右旋之后，q成为新的根节点</span></span><br><span class="line">    <span class="built_in">push_up</span>(tr[p].l),<span class="built_in">push_up</span>(p); <span class="comment">//由于x的形态还有y的形态都发生了变化，因此要分别对这两个点进行更新 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左旋操作：左旋操作即从图中的右边变成左边：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=tr[p].r;</span><br><span class="line">    tr[p].r=tr[q].l;</span><br><span class="line">    tr[q].l=p;</span><br><span class="line">    p=q;</span><br><span class="line">    <span class="built_in">push_up</span>(tr[p].l),<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始的建树：此时用了一个小小的trick，为了保证不出现边界问题，我们将原树先用负无穷和正无穷来建好框架，后面再往里面添加和删除即可：</p><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/6.png" class title="This is an test image"></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_node</span>(-INF),<span class="built_in">get_node</span>(INF);  </span><br><span class="line">    root=<span class="number">1</span>;</span><br><span class="line">    tr[root].r=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">push_up</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tr[<span class="number">1</span>].val&lt;tr[<span class="number">2</span>].val) <span class="built_in">zag</span>(root); <span class="comment">//be careful!!!!!!!由于是随机生成的数，所以有可能需要左旋</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作"><a class="markdownIt-Anchor" href="#插入操作"></a> 插入操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//insert a value in position p </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span>&#123;  <span class="comment">//在p节点的子树中要插入权值为key的节点</span></span><br><span class="line">    <span class="keyword">if</span>(!p)  p=<span class="built_in">get_node</span>(key);  <span class="comment">//如果没有这个节点，就申请一块新的节点进行插入</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key==key) tr[p].cnt++; <span class="comment">//如果当前节点的值正好相等，就这个值的个数++</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key&gt;key)&#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].l,key);  <span class="comment">//BST的性质，比当前是数小，就在左子树中插入</span></span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].l].val&gt;tr[p].val) <span class="built_in">zig</span>(p);  <span class="comment">//如果插入之后左子树的val值大，就右旋维护Treap</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;  <span class="comment">//否则在右子树插入，做同样的维护</span></span><br><span class="line">        <span class="built_in">insert</span>(tr[p].r,key);</span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].r].val&lt;tr[p].val) <span class="built_in">zag</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(p);  <span class="comment">//由于insert操作使得树的形态发生了变化，所以需要通过变化的子节点来更新一下父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作还是参考这张图"><a class="markdownIt-Anchor" href="#删除操作还是参考这张图"></a> 删除操作,还是参考这张图</h5><p><strong><img src="/2021/08/16/%E5%B9%B3%E8%A1%A1%E6%A0%91/7.png" class title="This is an test image"></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ; <span class="comment">//由于此数不在Treap中，所以无需操作</span></span><br><span class="line">    <span class="keyword">if</span>(tr[p].key==key)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].cnt&gt;<span class="number">1</span>) tr[p].cnt--;  <span class="comment">//说明有多个相同的值，值的计数-1即可</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].l||tr[p].r)&#123;  <span class="comment">//如果不是叶子节点，就需要通过旋转把根节点旋转到叶子节点上进行删除</span></span><br><span class="line">            <span class="keyword">if</span>(!tr[p].r||tr[tr[p].l].val&gt;tr[tr[p].r].val)&#123;   </span><br><span class="line">                <span class="built_in">zig</span>(p);</span><br><span class="line">                <span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">zag</span>(p);</span><br><span class="line">                <span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p=<span class="number">0</span>;   <span class="comment">//说明是叶子节点，直接删除即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key&gt;key) </span><br><span class="line">        <span class="built_in">remove</span>(tr[p].l,key); <span class="comment">//比根节点小，就在左子树中找到并删除</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">remove</span>(tr[p].r,key); <span class="comment">//同理，在右子树中找到并删除</span></span><br><span class="line">    <span class="built_in">push_up</span>(p);  <span class="comment">//最后再更新一遍父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于下面的操作，只要明白Node中维护的cnt和size的含义就可以轻松写出来了</p><h5 id="给定一个值来查找这个值在bst中序遍历中的排名"><a class="markdownIt-Anchor" href="#给定一个值来查找这个值在bst中序遍历中的排名"></a> 给定一个值来查找这个值在BST中序遍历中的排名：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get rank by given value</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank_by_key</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//the value not exists</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key==tr[p].key) <span class="keyword">return</span> tr[tr[p].l].size+<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;tr[p].key) <span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> tr[tr[p].l].size+tr[p].cnt+<span class="built_in">get_rank_by_key</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="给定一个中序遍历的排名来求对应值"><a class="markdownIt-Anchor" href="#给定一个中序遍历的排名来求对应值"></a> 给定一个中序遍历的排名，来求对应值：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get value by given rank</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_key_by_rank</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> rank)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rank&lt;=tr[tr[p].l].size) <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].l,rank);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rank&lt;=tr[tr[p].l].size+tr[p].cnt) <span class="keyword">return</span> tr[p].key;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].r,rank-tr[tr[p].l].size-tr[p].cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求在treap中比给定数大的最小的数"><a class="markdownIt-Anchor" href="#求在treap中比给定数大的最小的数"></a> 求在Treap中，比给定数大的最小的数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get the greatest number less than key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pre</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;=tr[p].key) <span class="keyword">return</span> <span class="built_in">get_pre</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key,<span class="built_in">get_pre</span>(tr[p].r,key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在treap中求比给定数小的最大的数"><a class="markdownIt-Anchor" href="#在treap中求比给定数小的最大的数"></a> 在Treap中，求比给定数小的最大的数</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get the least number greater than key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_next</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;tr[p].key) <span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key,<span class="built_in">get_next</span>(tr[p].l,key));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯。。。这里就结束了。这应该是目前为止遇到的第三难写的数据结构了…</p><h5 id="附上例题的ac代码-150行稍有不注意眼角两行泪-一杯茶一包烟百行代码调一天"><a class="markdownIt-Anchor" href="#附上例题的ac代码-150行稍有不注意眼角两行泪-一杯茶一包烟百行代码调一天"></a> 附上例题的AC代码： （150+行，稍有不注意，眼角两行泪。一杯茶一包烟，百行代码调一天）</h5><p>注意：因为一开始初始化了两个无穷节点，所以在查排名和获取排名的时候应该减去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;  <span class="comment">//左右指针指向左右儿子分配的内存编号</span></span><br><span class="line">    <span class="keyword">int</span> key,val; <span class="comment">//记录权值和维护堆性质的val</span></span><br><span class="line">    <span class="keyword">int</span> cnt,size;  <span class="comment">//当前数的个数，当前子树中数的个数</span></span><br><span class="line">&#125; tr[MAXN];</span><br><span class="line"><span class="keyword">int</span> root,idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子节点更新父节点信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> &amp;u)</span></span>&#123;</span><br><span class="line">    tr[u].size=tr[tr[u].l].size+tr[tr[u].r].size+tr[u].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=tr[p].l;</span><br><span class="line">    tr[p].l=tr[q].r;</span><br><span class="line">    tr[q].r=p;</span><br><span class="line">    p=q;</span><br><span class="line">    <span class="built_in">push_up</span>(tr[p].r),<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=tr[p].r;</span><br><span class="line">    tr[p].r=tr[q].l;</span><br><span class="line">    tr[q].l=p;</span><br><span class="line">    p=q;</span><br><span class="line">    <span class="built_in">push_up</span>(tr[p].l),<span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//create new point</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_node</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u=++idx;  <span class="comment">//get new area</span></span><br><span class="line">    tr[u].key=key;</span><br><span class="line">    tr[u].val=<span class="built_in">rand</span>();</span><br><span class="line">    tr[u].size=tr[u].cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//build the prime of the tree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_node</span>(-INF),<span class="built_in">get_node</span>(INF);</span><br><span class="line">    root=<span class="number">1</span>;</span><br><span class="line">    tr[root].r=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">push_up</span>(root);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(tr[<span class="number">1</span>].val&lt;tr[<span class="number">2</span>].val) <span class="built_in">zag</span>(root); <span class="comment">//be careful!!!!!!!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//insert a value in position p </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p)  p=<span class="built_in">get_node</span>(key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key==key) tr[p].cnt++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key&gt;key)&#123; <span class="comment">//insert into the left</span></span><br><span class="line">        <span class="built_in">insert</span>(tr[p].l,key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].l].val&gt;tr[p].val) <span class="built_in">zig</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].r,key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].r].val&gt;tr[p].val) <span class="built_in">zag</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove a value</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key==key)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[p].cnt&gt;<span class="number">1</span>) tr[p].cnt--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].l||tr[p].r)&#123;  <span class="comment">//if not the leaf Node</span></span><br><span class="line">            <span class="keyword">if</span>(!tr[p].r||tr[tr[p].l].val&gt;tr[tr[p].r].val)&#123;   <span class="comment">//if the left son s bigger </span></span><br><span class="line">                <span class="built_in">zig</span>(p);</span><br><span class="line">                <span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">else</span>&#123; </span><br><span class="line">                <span class="built_in">zag</span>(p);</span><br><span class="line">                <span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tr[p].key&gt;key)</span><br><span class="line">        <span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get rank by given value</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank_by_key</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//the value not exists</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key==tr[p].key) <span class="keyword">return</span> tr[tr[p].l].size+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;tr[p].key) <span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> tr[tr[p].l].size+tr[p].cnt+<span class="built_in">get_rank_by_key</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get value by given rank</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_key_by_rank</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> rank)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rank&lt;=tr[tr[p].l].size) <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].l,rank);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rank&lt;=tr[tr[p].l].size+tr[p].cnt) <span class="keyword">return</span> tr[p].key;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].r,rank-tr[tr[p].l].size-tr[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get the greatest number less than key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pre</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;=tr[p].key) <span class="keyword">return</span> <span class="built_in">get_pre</span>(tr[p].l,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key,<span class="built_in">get_pre</span>(tr[p].r,key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get the least number greater than key</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_next</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key&lt;tr[p].key) <span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key,<span class="built_in">get_next</span>(tr[p].l,key));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r,key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="built_in">insert</span>(root,b);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>) <span class="built_in">remove</span>(root,b);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_rank_by_key</span>(root,b)<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_key_by_rank</span>(root,b+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_pre</span>(root,b));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_next</span>(root,b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐一个超赞的数据结构可视化网站：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;平衡树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#平衡树&quot;&gt;&lt;/a&gt; 平衡树&lt;/h1&gt;
&lt;p&gt;欢迎来到二叉搜索树的世界，在这里，你将会见到：treap,红黑树，splay，sbt，AVL…&lt;/p&gt;
&lt;p&gt;对于对二叉搜索树的操作，我们</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="平衡树__Treap" scheme="https://wangyuhang-cmd.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91-Treap/"/>
    
  </entry>
  
  <entry>
    <title>主席树</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/15/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/15/%E4%B8%BB%E5%B8%AD%E6%A0%91/</id>
    <published>2021-08-15T07:23:35.000Z</published>
    <updated>2021-08-19T14:49:46.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可持久化线段树主席树"><a class="markdownIt-Anchor" href="#可持久化线段树主席树"></a> 可持久化线段树（主席树）</h3><p><em>对于原序列的每一个前缀[1…i]建立出一颗线段树维护值域，建立一棵线段树维护值域上每个数出现的次数，则其树是可减的</em></p><p>​ —黄嘉泰</p><p>如果对线段树不了解的，请学习前置技能：[线段树]](<a href="https://wangyuhang-cmd.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/">https://wangyuhang-cmd.github.io/tags/线段树/</a>)</p><h3 id="值域线段树"><a class="markdownIt-Anchor" href="#值域线段树"></a> 值域线段树</h3><p>对一个值域上的个数进行维护的线段树</p><p>举个例子:1,1,2,3,3,3,4,其值域 线段树为：</p><p><strong><img src="/2021/08/15/%E4%B8%BB%E5%B8%AD%E6%A0%91/1.png" class title="This is an test image"></strong></p><h4 id="主席树"><a class="markdownIt-Anchor" href="#主席树"></a> 主席树</h4><p>hjt树便是基于权值线段树的基础而建立的</p><p><strong><img src="/2021/08/15/%E4%B8%BB%E5%B8%AD%E6%A0%91/2.png" class title="This is an test image"></strong></p><p>经典例题：求区间上的第k大树</p><p>步骤1.先对数据进行离散化（此步骤不是重点，因此省略）</p><p>步骤2：如何处理区间[L,R]这个条件呢？在考虑右侧 ,R]  这个限定的时候，我们只需要寻找第R个版本即可。</p><p>那么，怎么处理 [L, 这个限定呢？</p><p>这也是这道题目最关键的：我们在对第R个版本进行递归的查找的时候，我们会先搜左子树，如果k大于左子树的数量我们才会在右子树上搜索。那么左子树的数量就显得尤为关键了。</p><p>回顾hjt那句话，因为主席树维护的是权值线段树，所以我们在递归第R个版本的时候，实际上是递归的除去第L-1个版本的所有内容，因此我们只需利用权值线段树的性质，减去L-1版本的内容就好啦👲</p><p>下面是算法拆分：</p><h4 id="树的存储"><a class="markdownIt-Anchor" href="#树的存储"></a> 树的存储</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用结构体存储主席树，其中l，r分别表示指向左右儿子的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> cnt;  <span class="comment">//对应权值线段树的值域内的个数</span></span><br><span class="line">&#125;tr[M*<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> root[M],idx;  <span class="comment">//the root pool&amp;point</span></span><br></pre></td></tr></table></figure><h4 id="建树"><a class="markdownIt-Anchor" href="#建树"></a> 建树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build()建树</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=++idx;</span><br><span class="line">    <span class="keyword">if</span>(l==r)  <span class="keyword">return</span> now;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    tr[now].l=<span class="built_in">build</span>(tr[pre].l,l,mid);</span><br><span class="line">    tr[now].r=<span class="built_in">build</span>(tr[pre].r,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树的插入"><a class="markdownIt-Anchor" href="#树的插入"></a> 树的插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//insert into thr tree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=++idx;  <span class="comment">//主席树常规流程，先获取分配的内存</span></span><br><span class="line">    tr[now]=tr[pre];  <span class="comment">//前一版的复刻</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">   tr[u].cnt++;</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) tr[u].l=<span class="built_in">insert</span>(tr[pre].l,l,mid,x);  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&gt;mid) tr[u].r=<span class="built_in">insert</span>(tr[pre].r,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    tr[now].cnt=tr[tr[now].l].cnt+tr[tr[now].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__main__:</span></span><br><span class="line">root[i]=<span class="built_in">insert</span>(root[i<span class="number">-1</span>],<span class="number">1</span>,n,w[i]);</span><br></pre></td></tr></table></figure><h4 id="树的查询"><a class="markdownIt-Anchor" href="#树的查询"></a> 树的查询</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find the kth num in the segment of [l,r]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> now,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">int</span> cnt=tr[tr[now].l].cnt-tr[tr[pre].l].cnt; <span class="comment">//cnt in [l,~</span></span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[pre].l,tr[now].l,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[pre].r,tr[now].r,mid+<span class="number">1</span>,r,k-cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>板子题：洛谷P3834 <a href="https://www.luogu.com.cn/problem/P3834">https://www.luogu.com.cn/problem/P3834</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="comment">//read(x)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+(ch^<span class="number">48</span>);ch=<span class="built_in">getchar</span>();&#125;x*=f;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="comment">//write(x)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span>;&#125;      </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;  <span class="comment">//left tree point&amp;righht tree point</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">&#125;tr[N*<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> root[N],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; alls;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>(),x)-alls.<span class="built_in">begin</span>();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=++idx;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> now;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tr[now].l=<span class="built_in">build</span>(l,mid),tr[now].r=<span class="built_in">build</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> now=++idx;</span><br><span class="line">tr[now]=tr[pre]; <span class="comment">//paste previos</span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[now].cnt++;</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid) tr[now].l=<span class="built_in">insert</span>(tr[pre].l,l,mid,x);</span><br><span class="line"><span class="keyword">else</span> tr[now].r=<span class="built_in">insert</span>(tr[pre].r,mid+<span class="number">1</span>,r,x);</span><br><span class="line">tr[now].cnt=tr[tr[now].l].cnt+tr[tr[now].r].cnt;</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> r;</span><br><span class="line"><span class="keyword">int</span> cnt=tr[tr[now].l].cnt-tr[tr[pre].l].cnt;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[now].l,tr[pre].l,l,mid,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[now].r,tr[pre].r,mid+<span class="number">1</span>,r,k-cnt); <span class="comment">//k should minus cnt of left</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">read</span>(a[i]);</span><br><span class="line">alls.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>());</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(),alls.<span class="built_in">end</span>()),alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">root[<span class="number">0</span>]=<span class="built_in">build</span>(<span class="number">0</span>,alls.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">root[i]=<span class="built_in">insert</span>(root[i<span class="number">-1</span>],<span class="number">0</span>,alls.<span class="built_in">size</span>()<span class="number">-1</span>,<span class="built_in">get_id</span>(a[i]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line"><span class="built_in">read</span>(l),<span class="built_in">read</span>(r),<span class="built_in">read</span>(k);</span><br><span class="line"><span class="built_in">write</span>(alls[<span class="built_in">query</span>(root[r],root[l<span class="number">-1</span>],<span class="number">0</span>,alls.<span class="built_in">size</span>()<span class="number">-1</span>,k)]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr> <h4 id="主席树维护普通线段树可持久化数组"><a class="markdownIt-Anchor" href="#主席树维护普通线段树可持久化数组"></a> 主席树维护普通线段树：可持久化数组</h4><p>可持久化数组是用主席树维护普通线段树，是学习可持久化并查集的基础</p><ul><li>可持久化数组支持历史版本的<strong>单点修改</strong>和<strong>单点查询</strong></li></ul><p>下面是整个算法的步骤：</p><ul><li>结构</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,v;</span><br><span class="line">&#125; tr[M*<span class="number">30</span>~<span class="number">40</span>]; <span class="comment">//开30到40倍数据</span></span><br><span class="line"><span class="keyword">int</span> root[M],<span class="keyword">int</span> w[M],idx=<span class="number">0</span>; <span class="comment">//分别存储根节点，原数组，内存分配指针</span></span><br></pre></td></tr></table></figure><ul><li>建树</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;now,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    now=++idx;  <span class="comment">//万古不变，为当前节点申请内存</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tr[now].v=w[r]; <span class="comment">//更新叶子节点信息</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(tr[now].l,l,mid),<span class="built_in">build</span>(tr[now].r,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//__main__:</span></span><br><span class="line"><span class="built_in">build</span>(root[<span class="number">0</span>],l,r);</span><br></pre></td></tr></table></figure><ul><li>更新节点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;now,<span class="keyword">int</span> pre,<span class="keyword">int</span> pos,<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//搜索[l,r],依据pre版本对now版本找到pos位置修改成x</span></span><br><span class="line">now=++idx;<span class="comment">//申请内存</span></span><br><span class="line">    tr[now]=tr[pre]; <span class="comment">//复制一份之前版本的复刻</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tr[now].v=x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;  <span class="comment">//这里就是不断缩小区间知道找到pos所在的区间</span></span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">modify</span>(l,mid,tr[now].l,tr[pre].l,<span class="keyword">int</span> x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(mid+<span class="number">1</span>,r,tr[now].r,tr[pre].r,<span class="keyword">int</span> x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查询</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> now,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> tr[now].v; <span class="comment">//说明搜索到了叶子节点，直接返回当前节点的值</span></span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,mid,tr[now].l,pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(mid+<span class="number">1</span>,r,tr[now].r,pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>板子题：洛谷P3919  <a href="https://www.luogu.com.cn/problem/P3919">https://www.luogu.com.cn/problem/P3919</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="comment">//read(x)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+(ch^<span class="number">48</span>);ch=<span class="built_in">getchar</span>();&#125;x*=f;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="comment">//write(x)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span>;&#125;      </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">&#125; tr[M*<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> root[M],idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,w[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">u=++idx;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[u].v=w[r];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(tr[u].l,l,mid),<span class="built_in">build</span>(tr[u].r,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pre,<span class="keyword">int</span> &amp;now,<span class="keyword">int</span> pos,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">now=++idx;  <span class="comment">//new一块空间</span></span><br><span class="line">tr[now]=tr[pre]; <span class="comment">//复制上一个版本</span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[now].v=x;  <span class="comment">//修改此处</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">modify</span>(l,mid,tr[pre].l,tr[now].l,pos,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(mid+<span class="number">1</span>,r,tr[pre].r,tr[now].r,pos,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> now,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> tr[now].v;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(l,mid,tr[now].l,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(mid+<span class="number">1</span>,r,tr[now].r,pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">read</span>(w[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">build</span>(root[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> pre,op,pos,x; </span><br><span class="line"><span class="comment">//pre版本，op操作，p位置，修改x</span></span><br><span class="line"><span class="built_in">read</span>(pre),<span class="built_in">read</span>(op),<span class="built_in">read</span>(pos);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">read</span>(x);</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>,n,root[pre],root[i],pos,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">write</span>(<span class="built_in">query</span>(<span class="number">1</span>,n,root[pre],pos));</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">root[i]=root[pre];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;可持久化线段树主席树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#可持久化线段树主席树&quot;&gt;&lt;/a&gt; 可持久化线段树（主席树）&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;对于原序列的每一个前缀[1…i]建立出一颗线段树维护值域，建立一棵线段树维护值域上每</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="主席树" scheme="https://wangyuhang-cmd.github.io/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>七夕小动画</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/13/%E4%B8%83%E5%A4%95%E5%B0%8F%E5%8A%A8%E7%94%BB/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/13/%E4%B8%83%E5%A4%95%E5%B0%8F%E5%8A%A8%E7%94%BB/</id>
    <published>2021-08-13T08:08:41.000Z</published>
    <updated>2021-08-19T14:50:36.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="马上七夕就要到了是不是"><a class="markdownIt-Anchor" href="#马上七夕就要到了是不是"></a> 马上七夕就要到了，是不是</h3><p>今天浏览CSDN模仿了一个UP主码了一段小动画，当作一小段慰藉吧~</p><p><strong><img src="/2021/08/13/%E4%B8%83%E5%A4%95%E5%B0%8F%E5%8A%A8%E7%94%BB/1.jpg" class title="This is an test image"></strong></p><p>附上源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> mainloop, hideturtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_all</span>():</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    turtle.pensize(<span class="number">800</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.fd(<span class="number">300</span>)</span><br><span class="line">    turtle.bk(<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定位画笔的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_to</span>(<span class="params">x, y, state</span>):</span></span><br><span class="line">    turtle.pendown() <span class="keyword">if</span> state <span class="keyword">else</span> turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_heart</span>(<span class="params">size</span>):</span></span><br><span class="line">    turtle.color(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.setheading(<span class="number">150</span>)</span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    turtle.fd(size)</span><br><span class="line">    turtle.circle(size * -<span class="number">3.745</span>, <span class="number">45</span>)</span><br><span class="line">    turtle.circle(size * -<span class="number">1.431</span>, <span class="number">165</span>)</span><br><span class="line">    turtle.left(<span class="number">120</span>)</span><br><span class="line">    turtle.circle(size * -<span class="number">1.431</span>, <span class="number">165</span>)</span><br><span class="line">    turtle.circle(size * -<span class="number">3.745</span>, <span class="number">45</span>)</span><br><span class="line">    turtle.fd(size)</span><br><span class="line">    turtle.end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出发射爱心的小人</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_people</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.pensize(<span class="number">2</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.circle(<span class="number">60</span>, <span class="number">360</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.setheading(<span class="number">90</span>)</span><br><span class="line">    turtle.fd(<span class="number">75</span>)</span><br><span class="line">    turtle.setheading(<span class="number">180</span>)</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line">    turtle.pensize(<span class="number">4</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(<span class="number">2</span>, <span class="number">360</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    turtle.pensize(<span class="number">4</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.circle(-<span class="number">2</span>, <span class="number">360</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.fd(<span class="number">20</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.fd(<span class="number">35</span>)</span><br><span class="line">    turtle.setheading(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">10</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.fd(<span class="number">40</span>)</span><br><span class="line">    turtle.setheading(<span class="number">0</span>)</span><br><span class="line">    turtle.fd(<span class="number">35</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">10</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(x, y)</span><br><span class="line">    turtle.setheading(-<span class="number">90</span>)</span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">135</span>)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.bk(<span class="number">60</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">45</span>)</span><br><span class="line">    turtle.fd(<span class="number">30</span>)</span><br><span class="line">    turtle.setheading(-<span class="number">135</span>)</span><br><span class="line">    turtle.fd(<span class="number">35</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制文字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_text</span>(<span class="params">text, t_color, font_size, show_time</span>):</span></span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">350</span>, <span class="number">0</span>)</span><br><span class="line">    turtle.color(t_color)</span><br><span class="line">    turtle.write(text, font=(<span class="string">&#x27;宋体&#x27;</span>, font_size, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    time.sleep(show_time)</span><br><span class="line">    clear_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爱心发射</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_</span>():</span></span><br><span class="line">    turtle.speed(<span class="number">0</span>)</span><br><span class="line">    draw_people(-<span class="number">250</span>, <span class="number">20</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">150</span>, -<span class="number">30</span>)</span><br><span class="line">    draw_heart(<span class="number">14</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">200</span>, -<span class="number">200</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.write(<span class="string">&#x27;Biu~&#x27;</span>, font=(<span class="string">&#x27;宋体&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">20</span>, -<span class="number">60</span>)</span><br><span class="line">    draw_heart(<span class="number">25</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(-<span class="number">70</span>, -<span class="number">200</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.write(<span class="string">&#x27;Biu~&#x27;</span>, font=(<span class="string">&#x27;宋体&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">200</span>, -<span class="number">100</span>)</span><br><span class="line">    draw_heart(<span class="number">45</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    turtle.goto(<span class="number">150</span>, -<span class="number">200</span>)</span><br><span class="line">    turtle.color(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">    turtle.write(<span class="string">&#x27;Biu~&#x27;</span>, font=(<span class="string">&#x27;宋体&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;normal&#x27;</span>))</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 隐藏海龟</span></span><br><span class="line">    hideturtle()</span><br><span class="line">    turtle.setup(<span class="number">900</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    draw_text(<span class="string">&quot;我想给你看个东西&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;准备好了吗？&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;接下来&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;skyblue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;skyblue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;skyblue&quot;</span>, <span class="number">45</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;七夕快乐！！！&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="number">60</span>, <span class="number">0</span>)</span><br><span class="line">    draw_text(<span class="string">&quot;发射爱心！！！&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="number">60</span>, <span class="number">3</span>)</span><br><span class="line">    draw_()</span><br><span class="line">    <span class="comment"># 使用mainloop防止窗口卡死</span></span><br><span class="line">    mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>​借鉴自：<a href="https://blog.csdn.net/qq_35164554/article/details/119610642">https://blog.csdn.net/qq_35164554/article/details/119610642</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;马上七夕就要到了是不是&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#马上七夕就要到了是不是&quot;&gt;&lt;/a&gt; 马上七夕就要到了，是不是&lt;/h3&gt;
&lt;p&gt;今天浏览CSDN模仿了一个UP主码了一段小动画，当作一小段慰藉吧~&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="一些小玩意er" scheme="https://wangyuhang-cmd.github.io/categories/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%8E%A9%E6%84%8Fer/"/>
    
    
    <category term="Python" scheme="https://wangyuhang-cmd.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2021-08-12T08:12:30.000Z</published>
    <updated>2021-08-19T14:50:31.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><h6 id="push-up-由子节点算父节点的信息"><a class="markdownIt-Anchor" href="#push-up-由子节点算父节点的信息"></a> push up 由子节点算父节点的信息</h6><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>m</mi><mo>+</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">sum=left.sum+right.sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span></span></p><h5 id="push-down操作-懒标记延迟标记"><a class="markdownIt-Anchor" href="#push-down操作-懒标记延迟标记"></a> push down操作 （懒标记/延迟标记）</h5><p>将父节点的修改信息下传到子节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入节点编号，用子节点信息来算父节点信息</span></span><br><span class="line">push up（<span class="keyword">int</span> u）</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将一段区间初始化为一颗线段树</span></span><br><span class="line"><span class="built_in">build</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//修改操作,修改某一个点或者某一个区间（懒标记）</span></span><br><span class="line"><span class="built_in">modify</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//查询某一段区间的信息</span></span><br><span class="line"><span class="built_in">query</span>()</span><br></pre></td></tr></table></figure><h5 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义：</h5><p>线段树是一颗满二叉树；以一棵长度为10的序列为例:</p><p><strong><img src="/2021/08/12/%E7%BA%BF%E6%AE%B5%E6%A0%91/1.png" class title="This is an test image"></strong></p><p>对于图中的段从上到下，从左到右依次编号为1，2，3 …</p><p>因此某一段 u 的左儿子是 u&lt;&lt;1 ，右儿子是 u&lt;&lt;1|1 。</p><h5 id="线段树的结构"><a class="markdownIt-Anchor" href="#线段树的结构"></a> 线段树的结构</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般使用结构体来存储线段树,空间大小开四倍</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;  <span class="comment">//维护的区间</span></span><br><span class="line">    <span class="keyword">int</span> v;   <span class="comment">//维护的信息...</span></span><br><span class="line">&#125; tree[N*<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h5 id="线段树的建树"><a class="markdownIt-Anchor" href="#线段树的建树"></a> 线段树的建树：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//build</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">//构建节点u，其维护的是区间[l,r]</span></span><br><span class="line">    tr[u]=&#123;l,r&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ; <span class="comment">//已经是叶子节点</span></span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="push_up操作"><a class="markdownIt-Anchor" href="#push_up操作"></a> push_up操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push_up操作,用子节点信息来更新父节点信息,以维护最大值为例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    tree[u].v=<span class="built_in">max</span>(tree[u&lt;&lt;<span class="number">1</span>].v,tree[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询操作"><a class="markdownIt-Anchor" href="#查询操作"></a> 查询操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//query操作，用来查询某一段区间内的信息,以最大值为例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;  <span class="comment">//从u节点开始查询[l,r]区间内的某一信息</span></span><br><span class="line">    <span class="keyword">if</span>(tree[u].l&gt;=l&amp;&amp;tree[u].r&lt;=r) <span class="keyword">return</span> tree[u].v;  <span class="comment">//说明这一段的信息已经被完全包含，因此不需要继续向下递归，直接返回即可</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//否则需要判断该递归那一边</span></span><br><span class="line">    <span class="keyword">int</span> mid=tree[u].l+tree[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r));  <span class="comment">//递归左边并更新信息</span></span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) res=<span class="built_in">max</span>(res,<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));  <span class="comment">//递归右边并更新信息,切记是mid&lt;r，无等号</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改操作"><a class="markdownIt-Anchor" href="#修改操作"></a> 修改操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//modify操作，用来修改某一叶子节点并更新其所有父节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;   <span class="comment">//从u节点开始递归查找，将编号为x的节点的值修改为v</span></span><br><span class="line">    <span class="keyword">if</span>(tree[u].l==x&amp;&amp;tree[u].r==x) tree[u].v=v;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=tree[u].l+tree[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒标记延迟标记push_down操作"><a class="markdownIt-Anchor" href="#懒标记延迟标记push_down操作"></a> 懒标记（延迟标记）push_down操作</h4><ul><li>为了支持区间的修改操作，线段树添加了延迟标记。</li><li>延迟标记，即在修改的时候对修改的区间上进行标记，</li><li>在查找或者下一次修改的时候，用父区间的懒标记更新当前区间的懒标记，并更新当前区间的信息。换而言之，在修改指令的时候遇到完整区间直接更新并回溯，但在回溯前增加标记。当后续指令需要递归此节点时，根据标记跟新此节点的两个儿子节点，并将标记传给儿子节点。</li><li>懒标记的意义表面此节点曾经被修改过，但是其儿子尚未被更新</li></ul><h4 id="添加懒标记后的更新的线段树函数"><a class="markdownIt-Anchor" href="#添加懒标记后的更新的线段树函数"></a> 添加懒标记后的更新的线段树函数</h4><h5 id="push_down通过父节点来更新子节点"><a class="markdownIt-Anchor" href="#push_down通过父节点来更新子节点"></a> push_down通过父节点来更新子节点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push_down操作既可以先更新再标记，也可以先标记再更新。此处我更习惯于先更新，后标记,此处以维护区间和的信息为例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    Node &amp;root=tree[u], &amp;left=tree[u&lt;&lt;<span class="number">1</span>], &amp;right=tree[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    left.add+=root.add;  <span class="comment">//更新左儿子的懒标记</span></span><br><span class="line">    left.sum=(left.r-left.l+<span class="number">1</span>)*root.add;  <span class="comment">//更新左儿子的信息</span></span><br><span class="line">    right.add+=root.add;  <span class="comment">//更新右儿子的懒标记</span></span><br><span class="line">    right.sum=(right.r-right.l+<span class="number">1</span>)*root.add;  <span class="comment">//更新右儿子的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="query查询函数"><a class="markdownIt-Anchor" href="#query查询函数"></a> query查询函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(tree[u].l&gt;=l&amp;&amp;tree[u].r&lt;=r) <span class="keyword">return</span> tree[u].sum;</span><br><span class="line">    <span class="built_in">push_down</span>(u);  <span class="comment">//先更新一下子节点</span></span><br><span class="line">    <span class="keyword">int</span> mid=tree[u].l+tree[u].r&gt;&gt;<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);  <span class="comment">//只需要搜索左儿子</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r); <span class="comment">//只需要搜索右儿子</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> suml,sumr;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid) suml+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid) sum2+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        <span class="keyword">return</span> suml+sumr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="modify修改函数"><a class="markdownIt-Anchor" href="#modify修改函数"></a> modify修改函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[u].l&gt;=l&amp;&amp;tree[u].r&lt;=r) &#123;</span><br><span class="line">        tree[u].sum+=(tree[u].r-tree[u].l+<span class="number">1</span>)*d; <span class="comment">//先标记</span></span><br><span class="line">        tree[u].add+=d;     <span class="comment">//然后标记</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);  <span class="comment">//先更新子节点</span></span><br><span class="line">    <span class="keyword">int</span> mid=tree[u].l+tree[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,d); <span class="comment">//如果有在mid左边的部分，修改左儿子</span></span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid) <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,d); <span class="comment">//有右儿子的部分，修改右儿子</span></span><br><span class="line">    <span class="built_in">push_up</span>(u);  <span class="comment">//更新父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="当有多个需要维护的懒标记时即有多个懒标记的时候"><a class="markdownIt-Anchor" href="#当有多个需要维护的懒标记时即有多个懒标记的时候"></a> 当有多个需要维护的懒标记时，即有多个懒标记的时候：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(Node &amp;root,<span class="keyword">int</span> add,<span class="keyword">int</span> mul)</span></span>&#123;</span><br><span class="line">    root.sum=root.sum*mul+add*(root.r-root,l+<span class="number">1</span>);</span><br><span class="line">    root.mul=root.mul*mul;</span><br><span class="line">    root.add=root.add*mul+add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用子节点来更新父节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">tree[u].sum=tree[u&lt;&lt;<span class="number">1</span>].sum+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">    tree[u].add=<span class="number">0</span>,tree[u].mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用父节点来更新子节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cal</span>(tree[u&lt;&lt;<span class="number">1</span>],tree[u].add,tree[u].mul);</span><br><span class="line">    <span class="built_in">cal</span>(tree[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],tree[u].add,tree[u].mul);</span><br><span class="line">    <span class="comment">//恢复</span></span><br><span class="line">    root.add=<span class="number">0</span>,root.mul=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扫描线"><a class="markdownIt-Anchor" href="#扫描线"></a> 扫描线</h4><p>在有重复覆盖的长方形面积题型中，使用线段树维护区间扫描线：</p><p>长方形左侧为+1线，右侧为-1线，使用线段树可动态维护，修改一段区间或者获取一段区间内区间的长度</p><p>值得注意的是边界问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r;  <span class="comment">//维护的是最左侧区间的左端点和最右侧区间的右端点</span></span><br><span class="line">    <span class="keyword">int</span> cnt;  <span class="comment">//维护的是各区间扫描线的覆盖次数</span></span><br><span class="line">    <span class="keyword">double</span> len; <span class="comment">//维护的是扫描线长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线段树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线段树&quot;&gt;&lt;/a&gt; 线段树&lt;/h2&gt;
&lt;h6 id=&quot;push-up-由子节点算父节点的信息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#push-up</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://wangyuhang-cmd.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="线段树" scheme="https://wangyuhang-cmd.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round</title>
    <link href="https://wangyuhang-cmd.github.io/2021/08/11/Codeforces-Round-737-Div-2-C-Moamen-and-XOR/"/>
    <id>https://wangyuhang-cmd.github.io/2021/08/11/Codeforces-Round-737-Div-2-C-Moamen-and-XOR/</id>
    <published>2021-08-11T14:41:45.000Z</published>
    <updated>2021-08-19T14:49:28.899Z</updated>
    
    <content type="html"><![CDATA[<p><strong><img src="/2021/08/11/Codeforces-Round-737-Div-2-C-Moamen-and-XOR/1.png" class title="This is an test image"></strong></p><p>题目大意：给定一个n，和一个k。代表着有n个数，其中每个数的值都比 2^k 小，并且这n个数组都以下满足不等式</p><p><strong><img src="/2021/08/11/Codeforces-Round-737-Div-2-C-Moamen-and-XOR/2.png" class title="This is an test image"></strong></p><p>求有多少种符合题意的方案.</p><h3 id="分析对于一个n位每一位数字t不大于2k的情况"><a class="markdownIt-Anchor" href="#分析对于一个n位每一位数字t不大于2k的情况"></a> 分析：对于一个n位，每一位数字t不大于2^k的情况</h3><p>方案为大于等于，所以我们拆开来分析：我们只考虑将t在二进制形势下考虑，考虑k的某一位的连续异或和连续与的操作结果：</p><h5 id="1and与xor相等的情况"><a class="markdownIt-Anchor" href="#1and与xor相等的情况"></a> 1.AND与XOR相等的情况</h5><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo stretchy="false">)</mo><mi>A</mi><mi>N</mi><mi>D</mi><mo>=</mo><mi>X</mi><mi>O</mi><mi>R</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1)AND=XOR=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>这种情况当且仅当n为奇数时，而且每一位都取1才成立</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo stretchy="false">)</mo><mi>A</mi><mi>N</mi><mi>D</mi><mo>=</mo><mi>X</mi><mi>O</mi><mi>R</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">2)AND=XOR=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>此情况只要有偶数个1便成立</p><h5 id="2and与xor不相等的情况"><a class="markdownIt-Anchor" href="#2and与xor不相等的情况"></a> 2.AND与XOR不相等的情况</h5><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>N</mi><mi>D</mi><mo>&gt;</mo><mi>X</mi><mi>O</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">AND&gt;XOR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></span></p><p>此时一定有此位上的所有数字都是１,因此只有在偶数的情况下才能成立</p><h3 id="解题步骤"><a class="markdownIt-Anchor" href="#解题步骤"></a> 解题步骤</h3><p>按照奇偶性继续分类整理得到：</p><p>1.当n为奇数的时候</p><p>AND=XOR=1和AND=XOR=0两种情况,因此对于总的情况数为，每一位的情况数的k次幂（因为小于2^k，所以总共k位进行考虑）</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">(1+C_{n}^{0}+C_{n}^{2}+...+C_{n}^{n-1})^k=(2^{n-1}+1)^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></p><p>2.当n为偶数的时候</p><p>共AND=XOR=0和AND&gt;XOR两种情况</p><p>1)AND=XOR 偶数个1的情况，其中要把全部是1的情况去掉，因此此时并不相等</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">(C_{n}^{0}+C_{n}^{2}+...+C_{n}^{n-1}-1)^k=(2^{n-1}-1)^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></p><p>2)AND&gt;XOR  考虑循环，当考虑第i位时，第i位全部是1，因此前i为应该相等，直接套用上面的公式，然后后i位可以任意取，根据乘法公式乘起来便是最终答案</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{k}(2^{n-1}-1)^{i-1} \cdot (2^n)^{k-i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.124664em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>因此偶数情况便是上述两者相加而得</p><h4 id="附上ac代码"><a class="markdownIt-Anchor" href="#附上ac代码"></a> 附上AC代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//read(x)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+(ch^<span class="number">48</span>);ch=<span class="built_in">getchar</span>();&#125;x*=f;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="comment">//write(x)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)<span class="built_in">write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);<span class="keyword">return</span>;&#125;      </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpower</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> mod)</span></span>&#123;  <span class="comment">//快速幂</span></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(LL)res%mod*a%mod;</span><br><span class="line">a=(LL)a*a%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;  <span class="comment">//取模运算</span></span><br><span class="line"><span class="keyword">return</span> ((LL)x%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">read</span>(n),<span class="built_in">read</span>(k);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans=<span class="built_in">fpower</span>(<span class="built_in">fpower</span>(<span class="number">2</span>,n<span class="number">-1</span>,mod)+<span class="number">1</span>,k,mod);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> power2=<span class="built_in">fpower</span>(<span class="number">2</span>,n<span class="number">-1</span>,mod);</span><br><span class="line"><span class="keyword">int</span> ppower2=<span class="built_in">fpower</span>(<span class="number">2</span>,n,mod);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">ans=<span class="built_in">mo</span>((LL)ans+(LL)<span class="built_in">fpower</span>(ppower2,(k-i),mod)*<span class="built_in">fpower</span>(<span class="built_in">mo</span>(power2<span class="number">-1</span>),i<span class="number">-1</span>,mod)%mod);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">mo</span>(((LL)ans+<span class="built_in">fpower</span>(power2<span class="number">-1</span>,k,mod)%mod)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">write</span>(ans);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/2021/08/11/Codeforces-Round-737-Div-2-C-Moamen-and-XOR/1.png&quot; class title=&quot;This is an test image&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题目大</summary>
      
    
    
    
    <category term="Codeforces" scheme="https://wangyuhang-cmd.github.io/categories/Codeforces/"/>
    
    
    <category term="Codeforces_C" scheme="https://wangyuhang-cmd.github.io/tags/Codeforces-C/"/>
    
  </entry>
  
</feed>
